/*
 * generated by Xtext 2.23.0
 */
grammar InternalPcode;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package tdt4250.pseudocode.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package tdt4250.pseudocode.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

}

@parser::members {

 	private PcodeGrammarAccess grammarAccess;

    public InternalPcodeParser(TokenStream input, PcodeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "PseudoClass";
   	}

   	@Override
   	protected PcodeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePseudoClass
entryRulePseudoClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPseudoClassRule()); }
	iv_rulePseudoClass=rulePseudoClass
	{ $current=$iv_rulePseudoClass.current; }
	EOF;

// Rule PseudoClass
rulePseudoClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPseudoClassAccess().getPseudoClassAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPseudoClassAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPseudoClassRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"tdt4250.pseudocode.Pcode.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPseudoClassAccess().getMembersConstructorParserRuleCall_2_0());
				}
				lv_members_2_0=ruleConstructor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPseudoClassRule());
					}
					add(
						$current,
						"members",
						lv_members_2_0,
						"tdt4250.pseudocode.Pcode.Constructor");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_3='\n'
			{
				newLeafNode(otherlv_3, grammarAccess.getPseudoClassAccess().getLineFeedKeyword_3());
			}
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getPseudoClassAccess().getMembersMethodParserRuleCall_4_0());
				}
				lv_members_4_0=ruleMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPseudoClassRule());
					}
					add(
						$current,
						"members",
						lv_members_4_0,
						"tdt4250.pseudocode.Pcode.Method");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConstructor
entryRuleConstructor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstructorRule()); }
	iv_ruleConstructor=ruleConstructor
	{ $current=$iv_ruleConstructor.current; }
	EOF;

// Rule Constructor
ruleConstructor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConstructorAccess().getConstructorAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0='('
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConstructorAccess().getNameLeftParenthesisKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstructorRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "(");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstructorAccess().getParametersParameterParserRuleCall_2_0_0());
					}
					lv_parameters_2_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstructorRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"tdt4250.pseudocode.Pcode.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getConstructorAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getConstructorAccess().getParametersParameterParserRuleCall_2_1_1_0());
						}
						lv_parameters_4_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConstructorRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"tdt4250.pseudocode.Pcode.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getConstructorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMethodAccess().getMethodAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"tdt4250.pseudocode.Pcode.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getParametersParameterParserRuleCall_3_0_0());
					}
					lv_parameters_3_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"tdt4250.pseudocode.Pcode.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getMethodAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodAccess().getParametersParameterParserRuleCall_3_1_1_0());
						}
						lv_parameters_5_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_5_0,
								"tdt4250.pseudocode.Pcode.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getMethodAccess().getRightParenthesisKeyword_4());
		}
		(
			otherlv_7='\n'
			{
				newLeafNode(otherlv_7, grammarAccess.getMethodAccess().getLineFeedKeyword_5());
			}
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getParametersMethodBodyParserRuleCall_6_0_0());
					}
					lv_parameters_8_0=ruleMethodBody
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_8_0,
							"tdt4250.pseudocode.Pcode.MethodBody");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					otherlv_9='\n'
					{
						newLeafNode(otherlv_9, grammarAccess.getMethodAccess().getLineFeedKeyword_6_1_0());
					}
				)*
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodAccess().getParametersMethodBodyParserRuleCall_6_1_1_0());
						}
						lv_parameters_10_0=ruleMethodBody
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_10_0,
								"tdt4250.pseudocode.Pcode.MethodBody");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)*
		(
			otherlv_11='return'
			{
				newLeafNode(otherlv_11, grammarAccess.getMethodAccess().getReturnKeyword_7_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getEStringParserRuleCall_7_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
				    |
				this_DOUBLE_13=RULE_DOUBLE
				{
					newLeafNode(this_DOUBLE_13, grammarAccess.getMethodAccess().getDOUBLETerminalRuleCall_7_1_1());
				}
				    |
				this_INT_14=RULE_INT
				{
					newLeafNode(this_INT_14, grammarAccess.getMethodAccess().getINTTerminalRuleCall_7_1_2());
				}
			)
		)*
	)
;

// Entry rule entryRuleMethodBody
entryRuleMethodBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodBodyRule()); }
	iv_ruleMethodBody=ruleMethodBody
	{ $current=$iv_ruleMethodBody.current; }
	EOF;

// Rule MethodBody
ruleMethodBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMethodBodyAccess().getParameterAction_0(),
					$current);
			}
		)
		(
			{
				newCompositeNode(grammarAccess.getMethodBodyAccess().getEqualsParserRuleCall_1_0());
			}
			ruleEquals
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getMethodBodyAccess().getIfParserRuleCall_1_1());
			}
			ruleIf
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleEquals
entryRuleEquals returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEqualsRule()); }
	iv_ruleEquals=ruleEquals
	{ $current=$iv_ruleEquals.current.getText(); }
	EOF;

// Rule Equals
ruleEquals returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualsAccess().getEStringParserRuleCall_0());
		}
		this_EString_0=ruleEString
		{
			$current.merge(this_EString_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEqualsAccess().getEqualsSignKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getEqualsAccess().getEStringParserRuleCall_2_0());
			}
			this_EString_2=ruleEString
			{
				$current.merge(this_EString_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			this_DOUBLE_3=RULE_DOUBLE
			{
				$current.merge(this_DOUBLE_3);
			}
			{
				newLeafNode(this_DOUBLE_3, grammarAccess.getEqualsAccess().getDOUBLETerminalRuleCall_2_1());
			}
			    |
			this_INT_4=RULE_INT
			{
				$current.merge(this_INT_4);
			}
			{
				newLeafNode(this_INT_4, grammarAccess.getEqualsAccess().getINTTerminalRuleCall_2_2());
			}
		)
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current.getText(); }
	EOF;

// Rule If
ruleIf returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='if'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIfAccess().getIfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getIfAccess().getTypeParserRuleCall_1());
		}
		this_Type_1=ruleType
		{
			$current.merge(this_Type_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='=='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIfAccess().getEqualsSignEqualsSignKeyword_2_0());
			}
			    |
			kw='<'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIfAccess().getLessThanSignKeyword_2_1());
			}
			    |
			kw='<='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIfAccess().getLessThanSignEqualsSignKeyword_2_2());
			}
			    |
			kw='>'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIfAccess().getGreaterThanSignKeyword_2_3());
			}
			    |
			kw='>='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIfAccess().getGreaterThanSignEqualsSignKeyword_2_4());
			}
		)
		{
			newCompositeNode(grammarAccess.getIfAccess().getTypeParserRuleCall_3());
		}
		this_Type_7=ruleType
		{
			$current.merge(this_Type_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			$current = forceCreateModelElement(
				grammarAccess.getFieldAccess().getFieldAction(),
				$current);
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterAccess().getParameterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"tdt4250.pseudocode.Pcode.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getEStringParserRuleCall_0());
		}
		this_EString_0=ruleEString
		{
			$current.merge(this_EString_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_DOUBLE_1=RULE_DOUBLE
		{
			$current.merge(this_DOUBLE_1);
		}
		{
			newLeafNode(this_DOUBLE_1, grammarAccess.getTypeAccess().getDOUBLETerminalRuleCall_1());
		}
		    |
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getTypeAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
