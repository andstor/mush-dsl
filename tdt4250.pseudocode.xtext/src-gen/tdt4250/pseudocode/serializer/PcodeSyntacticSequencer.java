/*
 * generated by Xtext 2.23.0
 */
package tdt4250.pseudocode.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

@SuppressWarnings("all")
public class PcodeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PcodeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_If_EqualsSignEqualsSignKeyword_3_0_or_GreaterThanSignEqualsSignKeyword_3_4_or_GreaterThanSignKeyword_3_3_or_LessThanSignEqualsSignKeyword_3_2_or_LessThanSignKeyword_3_1;
	protected AbstractElementAlias match_Method_LineFeedKeyword_5_a;
	protected AbstractElementAlias match_Method___ReturnKeyword_7_0_TypeParserRuleCall_7_1__a;
	protected AbstractElementAlias match_PseudoClass_LineFeedKeyword_3_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PcodeGrammarAccess) access;
		match_If_EqualsSignEqualsSignKeyword_3_0_or_GreaterThanSignEqualsSignKeyword_3_4_or_GreaterThanSignKeyword_3_3_or_LessThanSignEqualsSignKeyword_3_2_or_LessThanSignKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getIfAccess().getEqualsSignEqualsSignKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getIfAccess().getGreaterThanSignEqualsSignKeyword_3_4()), new TokenAlias(false, false, grammarAccess.getIfAccess().getGreaterThanSignKeyword_3_3()), new TokenAlias(false, false, grammarAccess.getIfAccess().getLessThanSignEqualsSignKeyword_3_2()), new TokenAlias(false, false, grammarAccess.getIfAccess().getLessThanSignKeyword_3_1()));
		match_Method_LineFeedKeyword_5_a = new TokenAlias(true, true, grammarAccess.getMethodAccess().getLineFeedKeyword_5());
		match_Method___ReturnKeyword_7_0_TypeParserRuleCall_7_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getMethodAccess().getReturnKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getMethodAccess().getTypeParserRuleCall_7_1()));
		match_PseudoClass_LineFeedKeyword_3_a = new TokenAlias(true, true, grammarAccess.getPseudoClassAccess().getLineFeedKeyword_3());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEStringRule())
			return getEStringToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTypeRule())
			return getTypeToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * EString returns ecore::EString:
	 * 	STRING | ID;
	 */
	protected String getEStringToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * Type:
	 * 	(EString | DOUBLE | INT)
	 * ;
	 */
	protected String getTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_If_EqualsSignEqualsSignKeyword_3_0_or_GreaterThanSignEqualsSignKeyword_3_4_or_GreaterThanSignKeyword_3_3_or_LessThanSignEqualsSignKeyword_3_2_or_LessThanSignKeyword_3_1.equals(syntax))
				emit_If_EqualsSignEqualsSignKeyword_3_0_or_GreaterThanSignEqualsSignKeyword_3_4_or_GreaterThanSignKeyword_3_3_or_LessThanSignEqualsSignKeyword_3_2_or_LessThanSignKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Method_LineFeedKeyword_5_a.equals(syntax))
				emit_Method_LineFeedKeyword_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Method___ReturnKeyword_7_0_TypeParserRuleCall_7_1__a.equals(syntax))
				emit_Method___ReturnKeyword_7_0_TypeParserRuleCall_7_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PseudoClass_LineFeedKeyword_3_a.equals(syntax))
				emit_PseudoClass_LineFeedKeyword_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '==' | '<' | '<=' | '>' | '>='
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'if' Type (ambiguity) Type (rule start)
	 */
	protected void emit_If_EqualsSignEqualsSignKeyword_3_0_or_GreaterThanSignEqualsSignKeyword_3_4_or_GreaterThanSignKeyword_3_3_or_LessThanSignEqualsSignKeyword_3_2_or_LessThanSignKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=EString '(' ')' (ambiguity) body=Body
	 *     parameters+=Parameter ')' (ambiguity) body=Body
	 */
	protected void emit_Method_LineFeedKeyword_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('return' Type)*
	 *
	 * This ambiguous syntax occurs at:
	 *     body=Body (ambiguity) (rule end)
	 */
	protected void emit_Method___ReturnKeyword_7_0_TypeParserRuleCall_7_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     members+=Constructor (ambiguity) (rule end)
	 *     members+=Constructor (ambiguity) members+=Method
	 *     name=EString (ambiguity) (rule end)
	 *     name=EString (ambiguity) members+=Method
	 */
	protected void emit_PseudoClass_LineFeedKeyword_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
