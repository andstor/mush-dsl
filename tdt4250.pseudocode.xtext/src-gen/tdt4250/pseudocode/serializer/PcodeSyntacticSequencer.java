/*
 * generated by Xtext 2.23.0
 */
package tdt4250.pseudocode.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

@SuppressWarnings("all")
public class PcodeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PcodeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_CollectionAccessor_IndexKeyword_1_1_2_q;
	protected AbstractElementAlias match_ForStatement_IntervalKeyword_2_q;
	protected AbstractElementAlias match_Function___BEGINTerminalRuleCall_6_0_ENDTerminalRuleCall_6_2__a;
	protected AbstractElementAlias match_Function___ENDTerminalRuleCall_6_2_BEGINTerminalRuleCall_6_0__a;
	protected AbstractElementAlias match_IfStatement_ThenKeyword_3_q;
	protected AbstractElementAlias match_IfStatement___ElseKeyword_7_0_BEGINTerminalRuleCall_7_1_ENDTerminalRuleCall_7_3__q;
	protected AbstractElementAlias match_List_ArrayKeyword_2_0_or_ListKeyword_2_1_or_TableKeyword_2_2;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PcodeGrammarAccess) access;
		match_CollectionAccessor_IndexKeyword_1_1_2_q = new TokenAlias(false, true, grammarAccess.getCollectionAccessorAccess().getIndexKeyword_1_1_2());
		match_ForStatement_IntervalKeyword_2_q = new TokenAlias(false, true, grammarAccess.getForStatementAccess().getIntervalKeyword_2());
		match_Function___BEGINTerminalRuleCall_6_0_ENDTerminalRuleCall_6_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getFunctionAccess().getBEGINTerminalRuleCall_6_0()), new TokenAlias(false, false, grammarAccess.getFunctionAccess().getENDTerminalRuleCall_6_2()));
		match_Function___ENDTerminalRuleCall_6_2_BEGINTerminalRuleCall_6_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getFunctionAccess().getENDTerminalRuleCall_6_2()), new TokenAlias(false, false, grammarAccess.getFunctionAccess().getBEGINTerminalRuleCall_6_0()));
		match_IfStatement_ThenKeyword_3_q = new TokenAlias(false, true, grammarAccess.getIfStatementAccess().getThenKeyword_3());
		match_IfStatement___ElseKeyword_7_0_BEGINTerminalRuleCall_7_1_ENDTerminalRuleCall_7_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getIfStatementAccess().getElseKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getIfStatementAccess().getBEGINTerminalRuleCall_7_1()), new TokenAlias(false, false, grammarAccess.getIfStatementAccess().getENDTerminalRuleCall_7_3()));
		match_List_ArrayKeyword_2_0_or_ListKeyword_2_1_or_TableKeyword_2_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getListAccess().getArrayKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getListAccess().getListKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getListAccess().getTableKeyword_2_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMinusOperatorRule())
			return getMinusOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPlusOperatorRule())
			return getPlusOperatorToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * MinusOperator:
	 *     ('-' | 'minus');
	 */
	protected String getMinusOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-";
	}
	
	/**
	 * PlusOperator:
	 *     ('+' | 'plus');
	 */
	protected String getPlusOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_CollectionAccessor_IndexKeyword_1_1_2_q.equals(syntax))
				emit_CollectionAccessor_IndexKeyword_1_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForStatement_IntervalKeyword_2_q.equals(syntax))
				emit_ForStatement_IntervalKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Function___BEGINTerminalRuleCall_6_0_ENDTerminalRuleCall_6_2__a.equals(syntax))
				emit_Function___BEGINTerminalRuleCall_6_0_ENDTerminalRuleCall_6_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Function___ENDTerminalRuleCall_6_2_BEGINTerminalRuleCall_6_0__a.equals(syntax))
				emit_Function___ENDTerminalRuleCall_6_2_BEGINTerminalRuleCall_6_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfStatement_ThenKeyword_3_q.equals(syntax))
				emit_IfStatement_ThenKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfStatement___ElseKeyword_7_0_BEGINTerminalRuleCall_7_1_ENDTerminalRuleCall_7_3__q.equals(syntax))
				emit_IfStatement___ElseKeyword_7_0_BEGINTerminalRuleCall_7_1_ENDTerminalRuleCall_7_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_List_ArrayKeyword_2_0_or_ListKeyword_2_1_or_TableKeyword_2_2.equals(syntax))
				emit_List_ArrayKeyword_2_0_or_ListKeyword_2_1_or_TableKeyword_2_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'index'?
	 *
	 * This ambiguous syntax occurs at:
	 *     collection=[Variable|ID] 'at' (ambiguity) accessor+=LiteralExpression
	 */
	protected void emit_CollectionAccessor_IndexKeyword_1_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'interval'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'for' (ambiguity) from=ArithmeticExpression
	 */
	protected void emit_ForStatement_IntervalKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (BEGIN END)*
	 *
	 * This ambiguous syntax occurs at:
	 *     features+=Feature END (ambiguity) (rule end)
	 *     name=ID '(' ')' (ambiguity) (rule end)
	 *     parameters+=Parameter ')' (ambiguity) (rule end)
	 */
	protected void emit_Function___BEGINTerminalRuleCall_6_0_ENDTerminalRuleCall_6_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (END BEGIN)*
	 *
	 * This ambiguous syntax occurs at:
	 *     features+=Feature (ambiguity) features+=Feature
	 *     name=ID '(' ')' BEGIN (ambiguity) features+=Feature
	 *     parameters+=Parameter ')' BEGIN (ambiguity) features+=Feature
	 */
	protected void emit_Function___ENDTerminalRuleCall_6_2_BEGINTerminalRuleCall_6_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'then'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=LiteralExpression (ambiguity) BEGIN END 'else' BEGIN otherwise+=Feature
	 *     condition=LiteralExpression (ambiguity) BEGIN END ('else' BEGIN END)? (rule end)
	 *     condition=LiteralExpression (ambiguity) BEGIN then+=Feature
	 */
	protected void emit_IfStatement_ThenKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('else' BEGIN END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=LiteralExpression 'then'? BEGIN END (ambiguity) (rule end)
	 *     then+=Feature END (ambiguity) (rule end)
	 */
	protected void emit_IfStatement___ElseKeyword_7_0_BEGINTerminalRuleCall_7_1_ENDTerminalRuleCall_7_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'array' | 'list' | 'table'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'new' (ambiguity) 'with' type=Type
	 */
	protected void emit_List_ArrayKeyword_2_0_or_ListKeyword_2_1_or_TableKeyword_2_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
