/*
 * generated by Xtext 2.23.0
 */
package tdt4250.pseudocode.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

@SuppressWarnings("all")
public class PcodeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PcodeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Expression___EStringParserRuleCall_1_1_0___EqualsSignKeyword_1_1_1_0_or_HyphenMinusEqualsSignKeyword_1_1_1_2_or_PlusSignEqualsSignKeyword_1_1_1_1___TypeParserRuleCall_1_1_2___MathSignsParserRuleCall_1_1_3_0_TypeParserRuleCall_1_1_3_1__a___or___EStringParserRuleCall_1_2_0__Keyword_1_2_1_TypeParserRuleCall_1_2_2___or___PrintKeyword_1_0_0___TypeParserRuleCall_1_0_1_1___CommaKeyword_1_0_1_2_0_TypeParserRuleCall_1_0_1_2_1__a___QuotationMarkKeyword_1_0_1_0_0_TypeParserRuleCall_1_0_1_0_1_a_QuotationMarkKeyword_1_0_1_0_2__a__a__;
	protected AbstractElementAlias match_For___ForKeyword_1_0_0_LeftParenthesisKeyword_1_0_1_____AllKeyword_1_0_2_2_0_EStringParserRuleCall_1_0_2_2_1___or___EStringParserRuleCall_1_0_2_0_0_EqualsSignKeyword_1_0_2_0_1_INTTerminalRuleCall_1_0_2_0_2_SemicolonKeyword_1_0_2_0_3_EStringParserRuleCall_1_0_2_0_4_EqualVariableParserRuleCall_1_0_2_0_5_TypeParserRuleCall_1_0_2_0_6_SemicolonKeyword_1_0_2_0_7_EStringParserRuleCall_1_0_2_0_8___HyphenMinusHyphenMinusKeyword_1_0_2_0_9_1_or_PlusSignPlusSignKeyword_1_0_2_0_9_0_or___HyphenMinusKeyword_1_0_2_0_9_3_0_INTTerminalRuleCall_1_0_2_0_9_3_1___or___PlusSignKeyword_1_0_2_0_9_2_0_INTTerminalRuleCall_1_0_2_0_9_2_1_______or___EStringParserRuleCall_1_0_2_1_0_ColonKeyword_1_0_2_1_1_EStringParserRuleCall_1_0_2_1_2___or___IntervalKeyword_1_0_2_3_0_INTTerminalRuleCall_1_0_2_3_1_ToKeyword_1_0_2_3_2_INTTerminalRuleCall_1_0_2_3_3_InKeyword_1_0_2_3_4_EStringParserRuleCall_1_0_2_3_5_____RightParenthesisKeyword_1_0_3___or___RepeatKeyword_1_1_0_INTTerminalRuleCall_1_1_1_TimesKeyword_1_1_2__;
	protected AbstractElementAlias match_If_ElseKeyword_4_q;
	protected AbstractElementAlias match_If___EStringParserRuleCall_2_1_q___ExclamationMarkKeyword_2_0_0_EStringParserRuleCall_2_0_1__q___TypeParserRuleCall_2_2_0_EqualVariableParserRuleCall_2_2_1_TypeParserRuleCall_2_2_2__q___EStringParserRuleCall_2_3_0_NotKeyword_2_3_1_q_ExistsKeyword_2_3_2__q___EStringParserRuleCall_2_4_0_NotKeyword_2_4_1_q_KnowingKeyword_2_4_2_EStringParserRuleCall_2_4_3__q__p;
	protected AbstractElementAlias match_If___ElseKeyword_3_0_IfKeyword_3_1___EStringParserRuleCall_3_2_1_or___ExclamationMarkKeyword_3_2_0_0_EStringParserRuleCall_3_2_0_1___or___TypeParserRuleCall_3_2_2_0_EqualVariableParserRuleCall_3_2_2_1_TypeParserRuleCall_3_2_2_2______a;
	protected AbstractElementAlias match_Stop_BreakKeyword_1_2_or_ContinueKeyword_1_3_or_StopKeyword_1_1_or___ReturnKeyword_1_0_0_TypeParserRuleCall_1_0_1__;
	protected AbstractElementAlias match_While___RepeatKeyword_1_1_0_UntilKeyword_1_1_1_EStringParserRuleCall_1_1_2_____AndKeyword_1_1_3_0_1_or_OrKeyword_1_1_3_0_0___EStringParserRuleCall_1_1_3_1__a___EqualsSignEqualsSignKeyword_1_1_4_0_0_or_ExclamationMarkEqualsSignKeyword_1_1_4_0_1___EStringParserRuleCall_1_1_4_1___or___WhileKeyword_1_0_0___TrueKeyword_1_0_1_0_or___ExclamationMarkKeyword_1_0_1_1_0_q_EStringParserRuleCall_1_0_1_1_1______;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PcodeGrammarAccess) access;
		match_Expression___EStringParserRuleCall_1_1_0___EqualsSignKeyword_1_1_1_0_or_HyphenMinusEqualsSignKeyword_1_1_1_2_or_PlusSignEqualsSignKeyword_1_1_1_1___TypeParserRuleCall_1_1_2___MathSignsParserRuleCall_1_1_3_0_TypeParserRuleCall_1_1_3_1__a___or___EStringParserRuleCall_1_2_0__Keyword_1_2_1_TypeParserRuleCall_1_2_2___or___PrintKeyword_1_0_0___TypeParserRuleCall_1_0_1_1___CommaKeyword_1_0_1_2_0_TypeParserRuleCall_1_0_1_2_1__a___QuotationMarkKeyword_1_0_1_0_0_TypeParserRuleCall_1_0_1_0_1_a_QuotationMarkKeyword_1_0_1_0_2__a__a__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionAccess().getEStringParserRuleCall_1_1_0()), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionAccess().getEqualsSignKeyword_1_1_1_0()), new TokenAlias(false, false, grammarAccess.getExpressionAccess().getHyphenMinusEqualsSignKeyword_1_1_1_2()), new TokenAlias(false, false, grammarAccess.getExpressionAccess().getPlusSignEqualsSignKeyword_1_1_1_1())), new TokenAlias(false, false, grammarAccess.getExpressionAccess().getTypeParserRuleCall_1_1_2()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getExpressionAccess().getMathSignsParserRuleCall_1_1_3_0()), new TokenAlias(false, false, grammarAccess.getExpressionAccess().getTypeParserRuleCall_1_1_3_1()))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionAccess().getEStringParserRuleCall_1_2_0()), new TokenAlias(false, false, grammarAccess.getExpressionAccess().get_Keyword_1_2_1()), new TokenAlias(false, false, grammarAccess.getExpressionAccess().getTypeParserRuleCall_1_2_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionAccess().getPrintKeyword_1_0_0()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getExpressionAccess().getTypeParserRuleCall_1_0_1_1()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getExpressionAccess().getCommaKeyword_1_0_1_2_0()), new TokenAlias(false, false, grammarAccess.getExpressionAccess().getTypeParserRuleCall_1_0_1_2_1())), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getExpressionAccess().getQuotationMarkKeyword_1_0_1_0_0()), new TokenAlias(true, true, grammarAccess.getExpressionAccess().getTypeParserRuleCall_1_0_1_0_1()), new TokenAlias(false, false, grammarAccess.getExpressionAccess().getQuotationMarkKeyword_1_0_1_0_2())))));
		match_For___ForKeyword_1_0_0_LeftParenthesisKeyword_1_0_1_____AllKeyword_1_0_2_2_0_EStringParserRuleCall_1_0_2_2_1___or___EStringParserRuleCall_1_0_2_0_0_EqualsSignKeyword_1_0_2_0_1_INTTerminalRuleCall_1_0_2_0_2_SemicolonKeyword_1_0_2_0_3_EStringParserRuleCall_1_0_2_0_4_EqualVariableParserRuleCall_1_0_2_0_5_TypeParserRuleCall_1_0_2_0_6_SemicolonKeyword_1_0_2_0_7_EStringParserRuleCall_1_0_2_0_8___HyphenMinusHyphenMinusKeyword_1_0_2_0_9_1_or_PlusSignPlusSignKeyword_1_0_2_0_9_0_or___HyphenMinusKeyword_1_0_2_0_9_3_0_INTTerminalRuleCall_1_0_2_0_9_3_1___or___PlusSignKeyword_1_0_2_0_9_2_0_INTTerminalRuleCall_1_0_2_0_9_2_1_______or___EStringParserRuleCall_1_0_2_1_0_ColonKeyword_1_0_2_1_1_EStringParserRuleCall_1_0_2_1_2___or___IntervalKeyword_1_0_2_3_0_INTTerminalRuleCall_1_0_2_3_1_ToKeyword_1_0_2_3_2_INTTerminalRuleCall_1_0_2_3_3_InKeyword_1_0_2_3_4_EStringParserRuleCall_1_0_2_3_5_____RightParenthesisKeyword_1_0_3___or___RepeatKeyword_1_1_0_INTTerminalRuleCall_1_1_1_TimesKeyword_1_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getForAccess().getForKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getForAccess().getLeftParenthesisKeyword_1_0_1()), new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getForAccess().getAllKeyword_1_0_2_2_0()), new TokenAlias(false, false, grammarAccess.getForAccess().getEStringParserRuleCall_1_0_2_2_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getForAccess().getEStringParserRuleCall_1_0_2_0_0()), new TokenAlias(false, false, grammarAccess.getForAccess().getEqualsSignKeyword_1_0_2_0_1()), new TokenAlias(false, false, grammarAccess.getForAccess().getINTTerminalRuleCall_1_0_2_0_2()), new TokenAlias(false, false, grammarAccess.getForAccess().getSemicolonKeyword_1_0_2_0_3()), new TokenAlias(false, false, grammarAccess.getForAccess().getEStringParserRuleCall_1_0_2_0_4()), new TokenAlias(false, false, grammarAccess.getForAccess().getEqualVariableParserRuleCall_1_0_2_0_5()), new TokenAlias(false, false, grammarAccess.getForAccess().getTypeParserRuleCall_1_0_2_0_6()), new TokenAlias(false, false, grammarAccess.getForAccess().getSemicolonKeyword_1_0_2_0_7()), new TokenAlias(false, false, grammarAccess.getForAccess().getEStringParserRuleCall_1_0_2_0_8()), new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getForAccess().getHyphenMinusKeyword_1_0_2_0_9_3_0()), new TokenAlias(false, false, grammarAccess.getForAccess().getINTTerminalRuleCall_1_0_2_0_9_3_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getForAccess().getPlusSignKeyword_1_0_2_0_9_2_0()), new TokenAlias(false, false, grammarAccess.getForAccess().getINTTerminalRuleCall_1_0_2_0_9_2_1())), new TokenAlias(false, false, grammarAccess.getForAccess().getHyphenMinusHyphenMinusKeyword_1_0_2_0_9_1()), new TokenAlias(false, false, grammarAccess.getForAccess().getPlusSignPlusSignKeyword_1_0_2_0_9_0()))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getForAccess().getEStringParserRuleCall_1_0_2_1_0()), new TokenAlias(false, false, grammarAccess.getForAccess().getColonKeyword_1_0_2_1_1()), new TokenAlias(false, false, grammarAccess.getForAccess().getEStringParserRuleCall_1_0_2_1_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getForAccess().getIntervalKeyword_1_0_2_3_0()), new TokenAlias(false, false, grammarAccess.getForAccess().getINTTerminalRuleCall_1_0_2_3_1()), new TokenAlias(false, false, grammarAccess.getForAccess().getToKeyword_1_0_2_3_2()), new TokenAlias(false, false, grammarAccess.getForAccess().getINTTerminalRuleCall_1_0_2_3_3()), new TokenAlias(false, false, grammarAccess.getForAccess().getInKeyword_1_0_2_3_4()), new TokenAlias(false, false, grammarAccess.getForAccess().getEStringParserRuleCall_1_0_2_3_5()))), new TokenAlias(false, false, grammarAccess.getForAccess().getRightParenthesisKeyword_1_0_3())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getForAccess().getRepeatKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getForAccess().getINTTerminalRuleCall_1_1_1()), new TokenAlias(false, false, grammarAccess.getForAccess().getTimesKeyword_1_1_2())));
		match_If_ElseKeyword_4_q = new TokenAlias(false, true, grammarAccess.getIfAccess().getElseKeyword_4());
		match_If___EStringParserRuleCall_2_1_q___ExclamationMarkKeyword_2_0_0_EStringParserRuleCall_2_0_1__q___TypeParserRuleCall_2_2_0_EqualVariableParserRuleCall_2_2_1_TypeParserRuleCall_2_2_2__q___EStringParserRuleCall_2_3_0_NotKeyword_2_3_1_q_ExistsKeyword_2_3_2__q___EStringParserRuleCall_2_4_0_NotKeyword_2_4_1_q_KnowingKeyword_2_4_2_EStringParserRuleCall_2_4_3__q__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getIfAccess().getEStringParserRuleCall_2_1()), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getIfAccess().getExclamationMarkKeyword_2_0_0()), new TokenAlias(false, false, grammarAccess.getIfAccess().getEStringParserRuleCall_2_0_1())), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getIfAccess().getTypeParserRuleCall_2_2_0()), new TokenAlias(false, false, grammarAccess.getIfAccess().getEqualVariableParserRuleCall_2_2_1()), new TokenAlias(false, false, grammarAccess.getIfAccess().getTypeParserRuleCall_2_2_2())), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getIfAccess().getEStringParserRuleCall_2_3_0()), new TokenAlias(false, true, grammarAccess.getIfAccess().getNotKeyword_2_3_1()), new TokenAlias(false, false, grammarAccess.getIfAccess().getExistsKeyword_2_3_2())), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getIfAccess().getEStringParserRuleCall_2_4_0()), new TokenAlias(false, true, grammarAccess.getIfAccess().getNotKeyword_2_4_1()), new TokenAlias(false, false, grammarAccess.getIfAccess().getKnowingKeyword_2_4_2()), new TokenAlias(false, false, grammarAccess.getIfAccess().getEStringParserRuleCall_2_4_3())));
		match_If___ElseKeyword_3_0_IfKeyword_3_1___EStringParserRuleCall_3_2_1_or___ExclamationMarkKeyword_3_2_0_0_EStringParserRuleCall_3_2_0_1___or___TypeParserRuleCall_3_2_2_0_EqualVariableParserRuleCall_3_2_2_1_TypeParserRuleCall_3_2_2_2______a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getIfAccess().getElseKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getIfAccess().getIfKeyword_3_1()), new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getIfAccess().getExclamationMarkKeyword_3_2_0_0()), new TokenAlias(false, false, grammarAccess.getIfAccess().getEStringParserRuleCall_3_2_0_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getIfAccess().getTypeParserRuleCall_3_2_2_0()), new TokenAlias(false, false, grammarAccess.getIfAccess().getEqualVariableParserRuleCall_3_2_2_1()), new TokenAlias(false, false, grammarAccess.getIfAccess().getTypeParserRuleCall_3_2_2_2())), new TokenAlias(false, false, grammarAccess.getIfAccess().getEStringParserRuleCall_3_2_1())));
		match_Stop_BreakKeyword_1_2_or_ContinueKeyword_1_3_or_StopKeyword_1_1_or___ReturnKeyword_1_0_0_TypeParserRuleCall_1_0_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getStopAccess().getReturnKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getStopAccess().getTypeParserRuleCall_1_0_1())), new TokenAlias(false, false, grammarAccess.getStopAccess().getBreakKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getStopAccess().getContinueKeyword_1_3()), new TokenAlias(false, false, grammarAccess.getStopAccess().getStopKeyword_1_1()));
		match_While___RepeatKeyword_1_1_0_UntilKeyword_1_1_1_EStringParserRuleCall_1_1_2_____AndKeyword_1_1_3_0_1_or_OrKeyword_1_1_3_0_0___EStringParserRuleCall_1_1_3_1__a___EqualsSignEqualsSignKeyword_1_1_4_0_0_or_ExclamationMarkEqualsSignKeyword_1_1_4_0_1___EStringParserRuleCall_1_1_4_1___or___WhileKeyword_1_0_0___TrueKeyword_1_0_1_0_or___ExclamationMarkKeyword_1_0_1_1_0_q_EStringParserRuleCall_1_0_1_1_1______ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getWhileAccess().getRepeatKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getWhileAccess().getUntilKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getWhileAccess().getEStringParserRuleCall_1_1_2()), new GroupAlias(true, true, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getWhileAccess().getAndKeyword_1_1_3_0_1()), new TokenAlias(false, false, grammarAccess.getWhileAccess().getOrKeyword_1_1_3_0_0())), new TokenAlias(false, false, grammarAccess.getWhileAccess().getEStringParserRuleCall_1_1_3_1())), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getWhileAccess().getEqualsSignEqualsSignKeyword_1_1_4_0_0()), new TokenAlias(false, false, grammarAccess.getWhileAccess().getExclamationMarkEqualsSignKeyword_1_1_4_0_1())), new TokenAlias(false, false, grammarAccess.getWhileAccess().getEStringParserRuleCall_1_1_4_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getWhileAccess().getWhileKeyword_1_0_0()), new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, true, grammarAccess.getWhileAccess().getExclamationMarkKeyword_1_0_1_1_0()), new TokenAlias(false, false, grammarAccess.getWhileAccess().getEStringParserRuleCall_1_0_1_1_1())), new TokenAlias(false, false, grammarAccess.getWhileAccess().getTrueKeyword_1_0_1_0()))));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEStringRule())
			return getEStringToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEqualVariableRule())
			return getEqualVariableToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMathSignsRule())
			return getMathSignsToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTypeRule())
			return getTypeToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * EString returns ecore::EString:
	 * 	STRING | ID;
	 */
	protected String getEStringToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * EqualVariable:
	 * 	('==' |'<' |'<=' | '>' | '>=' | '!=')
	 * ;
	 */
	protected String getEqualVariableToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "==";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * MathSigns:
	 * 	('+'|'-'|'*'|'/'|'%'|'total' 'division')
	 * ;
	 */
	protected String getMathSignsToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	/**
	 * Type:
	 * 	(EString | DOUBLE | INT)
	 * ;
	 */
	protected String getTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Expression___EStringParserRuleCall_1_1_0___EqualsSignKeyword_1_1_1_0_or_HyphenMinusEqualsSignKeyword_1_1_1_2_or_PlusSignEqualsSignKeyword_1_1_1_1___TypeParserRuleCall_1_1_2___MathSignsParserRuleCall_1_1_3_0_TypeParserRuleCall_1_1_3_1__a___or___EStringParserRuleCall_1_2_0__Keyword_1_2_1_TypeParserRuleCall_1_2_2___or___PrintKeyword_1_0_0___TypeParserRuleCall_1_0_1_1___CommaKeyword_1_0_1_2_0_TypeParserRuleCall_1_0_1_2_1__a___QuotationMarkKeyword_1_0_1_0_0_TypeParserRuleCall_1_0_1_0_1_a_QuotationMarkKeyword_1_0_1_0_2__a__a__.equals(syntax))
				emit_Expression___EStringParserRuleCall_1_1_0___EqualsSignKeyword_1_1_1_0_or_HyphenMinusEqualsSignKeyword_1_1_1_2_or_PlusSignEqualsSignKeyword_1_1_1_1___TypeParserRuleCall_1_1_2___MathSignsParserRuleCall_1_1_3_0_TypeParserRuleCall_1_1_3_1__a___or___EStringParserRuleCall_1_2_0__Keyword_1_2_1_TypeParserRuleCall_1_2_2___or___PrintKeyword_1_0_0___TypeParserRuleCall_1_0_1_1___CommaKeyword_1_0_1_2_0_TypeParserRuleCall_1_0_1_2_1__a___QuotationMarkKeyword_1_0_1_0_0_TypeParserRuleCall_1_0_1_0_1_a_QuotationMarkKeyword_1_0_1_0_2__a__a__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_For___ForKeyword_1_0_0_LeftParenthesisKeyword_1_0_1_____AllKeyword_1_0_2_2_0_EStringParserRuleCall_1_0_2_2_1___or___EStringParserRuleCall_1_0_2_0_0_EqualsSignKeyword_1_0_2_0_1_INTTerminalRuleCall_1_0_2_0_2_SemicolonKeyword_1_0_2_0_3_EStringParserRuleCall_1_0_2_0_4_EqualVariableParserRuleCall_1_0_2_0_5_TypeParserRuleCall_1_0_2_0_6_SemicolonKeyword_1_0_2_0_7_EStringParserRuleCall_1_0_2_0_8___HyphenMinusHyphenMinusKeyword_1_0_2_0_9_1_or_PlusSignPlusSignKeyword_1_0_2_0_9_0_or___HyphenMinusKeyword_1_0_2_0_9_3_0_INTTerminalRuleCall_1_0_2_0_9_3_1___or___PlusSignKeyword_1_0_2_0_9_2_0_INTTerminalRuleCall_1_0_2_0_9_2_1_______or___EStringParserRuleCall_1_0_2_1_0_ColonKeyword_1_0_2_1_1_EStringParserRuleCall_1_0_2_1_2___or___IntervalKeyword_1_0_2_3_0_INTTerminalRuleCall_1_0_2_3_1_ToKeyword_1_0_2_3_2_INTTerminalRuleCall_1_0_2_3_3_InKeyword_1_0_2_3_4_EStringParserRuleCall_1_0_2_3_5_____RightParenthesisKeyword_1_0_3___or___RepeatKeyword_1_1_0_INTTerminalRuleCall_1_1_1_TimesKeyword_1_1_2__.equals(syntax))
				emit_For___ForKeyword_1_0_0_LeftParenthesisKeyword_1_0_1_____AllKeyword_1_0_2_2_0_EStringParserRuleCall_1_0_2_2_1___or___EStringParserRuleCall_1_0_2_0_0_EqualsSignKeyword_1_0_2_0_1_INTTerminalRuleCall_1_0_2_0_2_SemicolonKeyword_1_0_2_0_3_EStringParserRuleCall_1_0_2_0_4_EqualVariableParserRuleCall_1_0_2_0_5_TypeParserRuleCall_1_0_2_0_6_SemicolonKeyword_1_0_2_0_7_EStringParserRuleCall_1_0_2_0_8___HyphenMinusHyphenMinusKeyword_1_0_2_0_9_1_or_PlusSignPlusSignKeyword_1_0_2_0_9_0_or___HyphenMinusKeyword_1_0_2_0_9_3_0_INTTerminalRuleCall_1_0_2_0_9_3_1___or___PlusSignKeyword_1_0_2_0_9_2_0_INTTerminalRuleCall_1_0_2_0_9_2_1_______or___EStringParserRuleCall_1_0_2_1_0_ColonKeyword_1_0_2_1_1_EStringParserRuleCall_1_0_2_1_2___or___IntervalKeyword_1_0_2_3_0_INTTerminalRuleCall_1_0_2_3_1_ToKeyword_1_0_2_3_2_INTTerminalRuleCall_1_0_2_3_3_InKeyword_1_0_2_3_4_EStringParserRuleCall_1_0_2_3_5_____RightParenthesisKeyword_1_0_3___or___RepeatKeyword_1_1_0_INTTerminalRuleCall_1_1_1_TimesKeyword_1_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_If_ElseKeyword_4_q.equals(syntax))
				emit_If_ElseKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_If___EStringParserRuleCall_2_1_q___ExclamationMarkKeyword_2_0_0_EStringParserRuleCall_2_0_1__q___TypeParserRuleCall_2_2_0_EqualVariableParserRuleCall_2_2_1_TypeParserRuleCall_2_2_2__q___EStringParserRuleCall_2_3_0_NotKeyword_2_3_1_q_ExistsKeyword_2_3_2__q___EStringParserRuleCall_2_4_0_NotKeyword_2_4_1_q_KnowingKeyword_2_4_2_EStringParserRuleCall_2_4_3__q__p.equals(syntax))
				emit_If___EStringParserRuleCall_2_1_q___ExclamationMarkKeyword_2_0_0_EStringParserRuleCall_2_0_1__q___TypeParserRuleCall_2_2_0_EqualVariableParserRuleCall_2_2_1_TypeParserRuleCall_2_2_2__q___EStringParserRuleCall_2_3_0_NotKeyword_2_3_1_q_ExistsKeyword_2_3_2__q___EStringParserRuleCall_2_4_0_NotKeyword_2_4_1_q_KnowingKeyword_2_4_2_EStringParserRuleCall_2_4_3__q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_If___ElseKeyword_3_0_IfKeyword_3_1___EStringParserRuleCall_3_2_1_or___ExclamationMarkKeyword_3_2_0_0_EStringParserRuleCall_3_2_0_1___or___TypeParserRuleCall_3_2_2_0_EqualVariableParserRuleCall_3_2_2_1_TypeParserRuleCall_3_2_2_2______a.equals(syntax))
				emit_If___ElseKeyword_3_0_IfKeyword_3_1___EStringParserRuleCall_3_2_1_or___ExclamationMarkKeyword_3_2_0_0_EStringParserRuleCall_3_2_0_1___or___TypeParserRuleCall_3_2_2_0_EqualVariableParserRuleCall_3_2_2_1_TypeParserRuleCall_3_2_2_2______a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Stop_BreakKeyword_1_2_or_ContinueKeyword_1_3_or_StopKeyword_1_1_or___ReturnKeyword_1_0_0_TypeParserRuleCall_1_0_1__.equals(syntax))
				emit_Stop_BreakKeyword_1_2_or_ContinueKeyword_1_3_or_StopKeyword_1_1_or___ReturnKeyword_1_0_0_TypeParserRuleCall_1_0_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_While___RepeatKeyword_1_1_0_UntilKeyword_1_1_1_EStringParserRuleCall_1_1_2_____AndKeyword_1_1_3_0_1_or_OrKeyword_1_1_3_0_0___EStringParserRuleCall_1_1_3_1__a___EqualsSignEqualsSignKeyword_1_1_4_0_0_or_ExclamationMarkEqualsSignKeyword_1_1_4_0_1___EStringParserRuleCall_1_1_4_1___or___WhileKeyword_1_0_0___TrueKeyword_1_0_1_0_or___ExclamationMarkKeyword_1_0_1_1_0_q_EStringParserRuleCall_1_0_1_1_1______.equals(syntax))
				emit_While___RepeatKeyword_1_1_0_UntilKeyword_1_1_1_EStringParserRuleCall_1_1_2_____AndKeyword_1_1_3_0_1_or_OrKeyword_1_1_3_0_0___EStringParserRuleCall_1_1_3_1__a___EqualsSignEqualsSignKeyword_1_1_4_0_0_or_ExclamationMarkEqualsSignKeyword_1_1_4_0_1___EStringParserRuleCall_1_1_4_1___or___WhileKeyword_1_0_0___TrueKeyword_1_0_1_0_or___ExclamationMarkKeyword_1_0_1_1_0_q_EStringParserRuleCall_1_0_1_1_1______(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('print' (Type (',' Type)* ('"' Type* '"')*)*) | (EString ('=' | '+=' | '-=') Type (MathSigns Type)*) | (EString '_' Type)
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Expression___EStringParserRuleCall_1_1_0___EqualsSignKeyword_1_1_1_0_or_HyphenMinusEqualsSignKeyword_1_1_1_2_or_PlusSignEqualsSignKeyword_1_1_1_1___TypeParserRuleCall_1_1_2___MathSignsParserRuleCall_1_1_3_0_TypeParserRuleCall_1_1_3_1__a___or___EStringParserRuleCall_1_2_0__Keyword_1_2_1_TypeParserRuleCall_1_2_2___or___PrintKeyword_1_0_0___TypeParserRuleCall_1_0_1_1___CommaKeyword_1_0_1_2_0_TypeParserRuleCall_1_0_1_2_1__a___QuotationMarkKeyword_1_0_1_0_0_TypeParserRuleCall_1_0_1_0_1_a_QuotationMarkKeyword_1_0_1_0_2__a__a__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         (
	  *             'for' 
	  *             '(' 
	  *             (
	  *                 (
	  *                     EString 
	  *                     '=' 
	  *                     INT 
	  *                     ';' 
	  *                     EString 
	  *                     EqualVariable 
	  *                     Type 
	  *                     ';' 
	  *                     EString 
	  *                     ('++' | '--' | ('+' INT) | ('-' INT))
	  *                 ) | 
	  *                 (EString ':' EString) | 
	  *                 ('all' EString) | 
	  *                 (
	  *                     'interval' 
	  *                     INT 
	  *                     'to' 
	  *                     INT 
	  *                     'in' 
	  *                     EString
	  *                 )
	  *             ) 
	  *             ')'
	  *         ) | 
	  *         ('repeat' INT 'times')
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_For___ForKeyword_1_0_0_LeftParenthesisKeyword_1_0_1_____AllKeyword_1_0_2_2_0_EStringParserRuleCall_1_0_2_2_1___or___EStringParserRuleCall_1_0_2_0_0_EqualsSignKeyword_1_0_2_0_1_INTTerminalRuleCall_1_0_2_0_2_SemicolonKeyword_1_0_2_0_3_EStringParserRuleCall_1_0_2_0_4_EqualVariableParserRuleCall_1_0_2_0_5_TypeParserRuleCall_1_0_2_0_6_SemicolonKeyword_1_0_2_0_7_EStringParserRuleCall_1_0_2_0_8___HyphenMinusHyphenMinusKeyword_1_0_2_0_9_1_or_PlusSignPlusSignKeyword_1_0_2_0_9_0_or___HyphenMinusKeyword_1_0_2_0_9_3_0_INTTerminalRuleCall_1_0_2_0_9_3_1___or___PlusSignKeyword_1_0_2_0_9_2_0_INTTerminalRuleCall_1_0_2_0_9_2_1_______or___EStringParserRuleCall_1_0_2_1_0_ColonKeyword_1_0_2_1_1_EStringParserRuleCall_1_0_2_1_2___or___IntervalKeyword_1_0_2_3_0_INTTerminalRuleCall_1_0_2_3_1_ToKeyword_1_0_2_3_2_INTTerminalRuleCall_1_0_2_3_3_InKeyword_1_0_2_3_4_EStringParserRuleCall_1_0_2_3_5_____RightParenthesisKeyword_1_0_3___or___RepeatKeyword_1_1_0_INTTerminalRuleCall_1_1_1_TimesKeyword_1_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'else'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         (rule start) 
	 *         'if' 
	 *         (EString? ('!' EString)? (Type EqualVariable Type)? (EString 'not'? 'exists')? (EString 'not'? 'knowing' EString)?)+ 
	 *         ('else' 'if' (('!' EString) | EString | (Type EqualVariable Type)))* 
	 *         (ambiguity) 
	 *         (rule start)
	 *     )
	 */
	protected void emit_If_ElseKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (EString? ('!' EString)? (Type EqualVariable Type)? (EString 'not'? 'exists')? (EString 'not'? 'knowing' EString)?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'if' (ambiguity) ('else' 'if' (('!' EString) | EString | (Type EqualVariable Type)))* 'else'? (rule start)
	 */
	protected void emit_If___EStringParserRuleCall_2_1_q___ExclamationMarkKeyword_2_0_0_EStringParserRuleCall_2_0_1__q___TypeParserRuleCall_2_2_0_EqualVariableParserRuleCall_2_2_1_TypeParserRuleCall_2_2_2__q___EStringParserRuleCall_2_3_0_NotKeyword_2_3_1_q_ExistsKeyword_2_3_2__q___EStringParserRuleCall_2_4_0_NotKeyword_2_4_1_q_KnowingKeyword_2_4_2_EStringParserRuleCall_2_4_3__q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('else' 'if' (('!' EString) | EString | (Type EqualVariable Type)))*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'if' (EString? ('!' EString)? (Type EqualVariable Type)? (EString 'not'? 'exists')? (EString 'not'? 'knowing' EString)?)+ (ambiguity) 'else'? (rule start)
	 */
	protected void emit_If___ElseKeyword_3_0_IfKeyword_3_1___EStringParserRuleCall_3_2_1_or___ExclamationMarkKeyword_3_2_0_0_EStringParserRuleCall_3_2_0_1___or___TypeParserRuleCall_3_2_2_0_EqualVariableParserRuleCall_3_2_2_1_TypeParserRuleCall_3_2_2_2______a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('return' Type) | 'stop' | 'break' | 'continue'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Stop_BreakKeyword_1_2_or_ContinueKeyword_1_3_or_StopKeyword_1_1_or___ReturnKeyword_1_0_0_TypeParserRuleCall_1_0_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         ('while' ('true' | ('!'? EString))) | 
	  *         (
	  *             'repeat' 
	  *             'until' 
	  *             EString 
	  *             (('or' | 'and') EString)* 
	  *             ('==' | '!=') 
	  *             EString
	  *         )
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_While___RepeatKeyword_1_1_0_UntilKeyword_1_1_1_EStringParserRuleCall_1_1_2_____AndKeyword_1_1_3_0_1_or_OrKeyword_1_1_3_0_0___EStringParserRuleCall_1_1_3_1__a___EqualsSignEqualsSignKeyword_1_1_4_0_0_or_ExclamationMarkEqualsSignKeyword_1_1_4_0_1___EStringParserRuleCall_1_1_4_1___or___WhileKeyword_1_0_0___TrueKeyword_1_0_1_0_or___ExclamationMarkKeyword_1_0_1_1_0_q_EStringParserRuleCall_1_0_1_1_1______(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
