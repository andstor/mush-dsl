/*
 * generated by Xtext 2.22.0
 */
package tdt4250.pseudocode.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

@SuppressWarnings("all")
public class PcodeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PcodeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Addition_HyphenMinusKeyword_1_0_1_1_0_or_MinusKeyword_1_0_1_1_1;
	protected AbstractElementAlias match_CollectionAccessor_IndexKeyword_1_1_2_q;
	protected AbstractElementAlias match_ForExpression_IntervalKeyword_2_q;
	protected AbstractElementAlias match_Function___BEGINTerminalRuleCall_5_0_ENDTerminalRuleCall_5_2__a;
	protected AbstractElementAlias match_Function___ENDTerminalRuleCall_5_2_BEGINTerminalRuleCall_5_0__a;
	protected AbstractElementAlias match_IfExpression_ThenKeyword_3_q;
	protected AbstractElementAlias match_IfExpression___ElseKeyword_7_0_BEGINTerminalRuleCall_7_1_ENDTerminalRuleCall_7_3__q;
	protected AbstractElementAlias match_List_ArrayKeyword_2_0_or_ListKeyword_2_1_or_TableKeyword_2_2;
	protected AbstractElementAlias match_Prefixed_HyphenMinusKeyword_1_1_0_0_or_MinusKeyword_1_1_0_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PcodeGrammarAccess) access;
		match_Addition_HyphenMinusKeyword_1_0_1_1_0_or_MinusKeyword_1_0_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1_0()), new TokenAlias(false, false, grammarAccess.getAdditionAccess().getMinusKeyword_1_0_1_1_1()));
		match_CollectionAccessor_IndexKeyword_1_1_2_q = new TokenAlias(false, true, grammarAccess.getCollectionAccessorAccess().getIndexKeyword_1_1_2());
		match_ForExpression_IntervalKeyword_2_q = new TokenAlias(false, true, grammarAccess.getForExpressionAccess().getIntervalKeyword_2());
		match_Function___BEGINTerminalRuleCall_5_0_ENDTerminalRuleCall_5_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getFunctionAccess().getBEGINTerminalRuleCall_5_0()), new TokenAlias(false, false, grammarAccess.getFunctionAccess().getENDTerminalRuleCall_5_2()));
		match_Function___ENDTerminalRuleCall_5_2_BEGINTerminalRuleCall_5_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getFunctionAccess().getENDTerminalRuleCall_5_2()), new TokenAlias(false, false, grammarAccess.getFunctionAccess().getBEGINTerminalRuleCall_5_0()));
		match_IfExpression_ThenKeyword_3_q = new TokenAlias(false, true, grammarAccess.getIfExpressionAccess().getThenKeyword_3());
		match_IfExpression___ElseKeyword_7_0_BEGINTerminalRuleCall_7_1_ENDTerminalRuleCall_7_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getIfExpressionAccess().getElseKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getIfExpressionAccess().getBEGINTerminalRuleCall_7_1()), new TokenAlias(false, false, grammarAccess.getIfExpressionAccess().getENDTerminalRuleCall_7_3()));
		match_List_ArrayKeyword_2_0_or_ListKeyword_2_1_or_TableKeyword_2_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getListAccess().getArrayKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getListAccess().getListKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getListAccess().getTableKeyword_2_2()));
		match_Prefixed_HyphenMinusKeyword_1_1_0_0_or_MinusKeyword_1_1_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPrefixedAccess().getHyphenMinusKeyword_1_1_0_0()), new TokenAlias(false, false, grammarAccess.getPrefixedAccess().getMinusKeyword_1_1_0_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPlusOperatorRule())
			return getPlusOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTypeLiteralRule())
			return getTypeLiteralToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * PlusOperator:
	 * 	('+' | 'plus')
	 * ;
	 */
	protected String getPlusOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	/**
	 * TypeLiteral:
	 * 	('Text' | 'Number' | 'Decimal' |
	 * 	'Array' | 'List' | 'Table')
	 * ;
	 */
	protected String getTypeLiteralToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Text";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Addition_HyphenMinusKeyword_1_0_1_1_0_or_MinusKeyword_1_0_1_1_1.equals(syntax))
				emit_Addition_HyphenMinusKeyword_1_0_1_1_0_or_MinusKeyword_1_0_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CollectionAccessor_IndexKeyword_1_1_2_q.equals(syntax))
				emit_CollectionAccessor_IndexKeyword_1_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForExpression_IntervalKeyword_2_q.equals(syntax))
				emit_ForExpression_IntervalKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Function___BEGINTerminalRuleCall_5_0_ENDTerminalRuleCall_5_2__a.equals(syntax))
				emit_Function___BEGINTerminalRuleCall_5_0_ENDTerminalRuleCall_5_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Function___ENDTerminalRuleCall_5_2_BEGINTerminalRuleCall_5_0__a.equals(syntax))
				emit_Function___ENDTerminalRuleCall_5_2_BEGINTerminalRuleCall_5_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfExpression_ThenKeyword_3_q.equals(syntax))
				emit_IfExpression_ThenKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfExpression___ElseKeyword_7_0_BEGINTerminalRuleCall_7_1_ENDTerminalRuleCall_7_3__q.equals(syntax))
				emit_IfExpression___ElseKeyword_7_0_BEGINTerminalRuleCall_7_1_ENDTerminalRuleCall_7_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_List_ArrayKeyword_2_0_or_ListKeyword_2_1_or_TableKeyword_2_2.equals(syntax))
				emit_List_ArrayKeyword_2_0_or_ListKeyword_2_1_or_TableKeyword_2_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Prefixed_HyphenMinusKeyword_1_1_0_0_or_MinusKeyword_1_1_0_1.equals(syntax))
				emit_Prefixed_HyphenMinusKeyword_1_1_0_0_or_MinusKeyword_1_1_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '-' | 'minus'
	 *
	 * This ambiguous syntax occurs at:
	 *     {Minus.left=} (ambiguity) right=Multiplication
	 */
	protected void emit_Addition_HyphenMinusKeyword_1_0_1_1_0_or_MinusKeyword_1_0_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'index'?
	 *
	 * This ambiguous syntax occurs at:
	 *     collection=[Variable|ID] 'at' (ambiguity) accessor+=LiteralExpression
	 */
	protected void emit_CollectionAccessor_IndexKeyword_1_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'interval'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'for' (ambiguity) from=ArithmeticExpression
	 */
	protected void emit_ForExpression_IntervalKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (BEGIN END)*
	 *
	 * This ambiguous syntax occurs at:
	 *     features+=Feature END (ambiguity) (rule end)
	 *     name=ID '(' ')' (ambiguity) (rule end)
	 *     parameters+=Parameter ')' (ambiguity) (rule end)
	 */
	protected void emit_Function___BEGINTerminalRuleCall_5_0_ENDTerminalRuleCall_5_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (END BEGIN)*
	 *
	 * This ambiguous syntax occurs at:
	 *     features+=Feature (ambiguity) features+=Feature
	 *     name=ID '(' ')' BEGIN (ambiguity) features+=Feature
	 *     parameters+=Parameter ')' BEGIN (ambiguity) features+=Feature
	 */
	protected void emit_Function___ENDTerminalRuleCall_5_2_BEGINTerminalRuleCall_5_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'then'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=LiteralExpression (ambiguity) BEGIN END 'else' BEGIN otherwise+=Feature
	 *     condition=LiteralExpression (ambiguity) BEGIN END ('else' BEGIN END)? (rule end)
	 *     condition=LiteralExpression (ambiguity) BEGIN then+=Feature
	 */
	protected void emit_IfExpression_ThenKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('else' BEGIN END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=LiteralExpression 'then'? BEGIN END (ambiguity) (rule end)
	 *     then+=Feature END (ambiguity) (rule end)
	 */
	protected void emit_IfExpression___ElseKeyword_7_0_BEGINTerminalRuleCall_7_1_ENDTerminalRuleCall_7_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'array' | 'list' | 'table'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'new' (ambiguity) 'with' type=Type
	 */
	protected void emit_List_ArrayKeyword_2_0_or_ListKeyword_2_1_or_TableKeyword_2_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '-' | 'minus'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) expression=Atomic
	 */
	protected void emit_Prefixed_HyphenMinusKeyword_1_1_0_0_or_MinusKeyword_1_1_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
