/*
 * generated by Xtext 2.22.0
 */
package tdt4250.pseudocode.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

@SuppressWarnings("all")
public class PcodeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PcodeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Atomic_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_Atomic_LeftParenthesisKeyword_0_0_p;
	protected AbstractElementAlias match_For___AllKeyword_3_2_0_EStringParserRuleCall_3_2_1___or___EStringParserRuleCall_3_0_0_EqualsSignKeyword_3_0_1_INTTerminalRuleCall_3_0_2_SemicolonKeyword_3_0_3_EStringParserRuleCall_3_0_4_BooleanOperatorParserRuleCall_3_0_5_TypeParserRuleCall_3_0_6_SemicolonKeyword_3_0_7_EStringParserRuleCall_3_0_8___HyphenMinusHyphenMinusKeyword_3_0_9_1_or_PlusSignPlusSignKeyword_3_0_9_0_or___HyphenMinusKeyword_3_0_9_3_0_INTTerminalRuleCall_3_0_9_3_1___or___PlusSignKeyword_3_0_9_2_0_INTTerminalRuleCall_3_0_9_2_1_______or___EStringParserRuleCall_3_1_0_ColonKeyword_3_1_1_EStringParserRuleCall_3_1_2___or___IntervalKeyword_3_3_0_INTTerminalRuleCall_3_3_1_ToKeyword_3_3_2_INTTerminalRuleCall_3_3_3_InKeyword_3_3_4_EStringParserRuleCall_3_3_5__;
	protected AbstractElementAlias match_While_TrueKeyword_2_0_or___ExclamationMarkKeyword_2_1_0_q_EStringParserRuleCall_2_1_1__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PcodeGrammarAccess) access;
		match_Atomic_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_0_0());
		match_Atomic_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_0_0());
		match_For___AllKeyword_3_2_0_EStringParserRuleCall_3_2_1___or___EStringParserRuleCall_3_0_0_EqualsSignKeyword_3_0_1_INTTerminalRuleCall_3_0_2_SemicolonKeyword_3_0_3_EStringParserRuleCall_3_0_4_BooleanOperatorParserRuleCall_3_0_5_TypeParserRuleCall_3_0_6_SemicolonKeyword_3_0_7_EStringParserRuleCall_3_0_8___HyphenMinusHyphenMinusKeyword_3_0_9_1_or_PlusSignPlusSignKeyword_3_0_9_0_or___HyphenMinusKeyword_3_0_9_3_0_INTTerminalRuleCall_3_0_9_3_1___or___PlusSignKeyword_3_0_9_2_0_INTTerminalRuleCall_3_0_9_2_1_______or___EStringParserRuleCall_3_1_0_ColonKeyword_3_1_1_EStringParserRuleCall_3_1_2___or___IntervalKeyword_3_3_0_INTTerminalRuleCall_3_3_1_ToKeyword_3_3_2_INTTerminalRuleCall_3_3_3_InKeyword_3_3_4_EStringParserRuleCall_3_3_5__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getForAccess().getAllKeyword_3_2_0()), new TokenAlias(false, false, grammarAccess.getForAccess().getEStringParserRuleCall_3_2_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getForAccess().getEStringParserRuleCall_3_0_0()), new TokenAlias(false, false, grammarAccess.getForAccess().getEqualsSignKeyword_3_0_1()), new TokenAlias(false, false, grammarAccess.getForAccess().getINTTerminalRuleCall_3_0_2()), new TokenAlias(false, false, grammarAccess.getForAccess().getSemicolonKeyword_3_0_3()), new TokenAlias(false, false, grammarAccess.getForAccess().getEStringParserRuleCall_3_0_4()), new TokenAlias(false, false, grammarAccess.getForAccess().getBooleanOperatorParserRuleCall_3_0_5()), new TokenAlias(false, false, grammarAccess.getForAccess().getTypeParserRuleCall_3_0_6()), new TokenAlias(false, false, grammarAccess.getForAccess().getSemicolonKeyword_3_0_7()), new TokenAlias(false, false, grammarAccess.getForAccess().getEStringParserRuleCall_3_0_8()), new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getForAccess().getHyphenMinusKeyword_3_0_9_3_0()), new TokenAlias(false, false, grammarAccess.getForAccess().getINTTerminalRuleCall_3_0_9_3_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getForAccess().getPlusSignKeyword_3_0_9_2_0()), new TokenAlias(false, false, grammarAccess.getForAccess().getINTTerminalRuleCall_3_0_9_2_1())), new TokenAlias(false, false, grammarAccess.getForAccess().getHyphenMinusHyphenMinusKeyword_3_0_9_1()), new TokenAlias(false, false, grammarAccess.getForAccess().getPlusSignPlusSignKeyword_3_0_9_0()))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getForAccess().getEStringParserRuleCall_3_1_0()), new TokenAlias(false, false, grammarAccess.getForAccess().getColonKeyword_3_1_1()), new TokenAlias(false, false, grammarAccess.getForAccess().getEStringParserRuleCall_3_1_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getForAccess().getIntervalKeyword_3_3_0()), new TokenAlias(false, false, grammarAccess.getForAccess().getINTTerminalRuleCall_3_3_1()), new TokenAlias(false, false, grammarAccess.getForAccess().getToKeyword_3_3_2()), new TokenAlias(false, false, grammarAccess.getForAccess().getINTTerminalRuleCall_3_3_3()), new TokenAlias(false, false, grammarAccess.getForAccess().getInKeyword_3_3_4()), new TokenAlias(false, false, grammarAccess.getForAccess().getEStringParserRuleCall_3_3_5())));
		match_While_TrueKeyword_2_0_or___ExclamationMarkKeyword_2_1_0_q_EStringParserRuleCall_2_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, true, grammarAccess.getWhileAccess().getExclamationMarkKeyword_2_1_0()), new TokenAlias(false, false, grammarAccess.getWhileAccess().getEStringParserRuleCall_2_1_1())), new TokenAlias(false, false, grammarAccess.getWhileAccess().getTrueKeyword_2_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBooleanOperatorRule())
			return getBooleanOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEStringRule())
			return getEStringToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTypeRule())
			return getTypeToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * BooleanOperator:
	 * 	'&&' | '||' | '!' | '^'
	 * ;
	 */
	protected String getBooleanOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "&&";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * EString returns ecore::EString:
	 * 	STRING | ID;
	 */
	protected String getEStringToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * Type:
	 * 	(EString | DOUBLE | INT)
	 * ;
	 */
	protected String getTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Atomic_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_Atomic_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Atomic_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_Atomic_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_For___AllKeyword_3_2_0_EStringParserRuleCall_3_2_1___or___EStringParserRuleCall_3_0_0_EqualsSignKeyword_3_0_1_INTTerminalRuleCall_3_0_2_SemicolonKeyword_3_0_3_EStringParserRuleCall_3_0_4_BooleanOperatorParserRuleCall_3_0_5_TypeParserRuleCall_3_0_6_SemicolonKeyword_3_0_7_EStringParserRuleCall_3_0_8___HyphenMinusHyphenMinusKeyword_3_0_9_1_or_PlusSignPlusSignKeyword_3_0_9_0_or___HyphenMinusKeyword_3_0_9_3_0_INTTerminalRuleCall_3_0_9_3_1___or___PlusSignKeyword_3_0_9_2_0_INTTerminalRuleCall_3_0_9_2_1_______or___EStringParserRuleCall_3_1_0_ColonKeyword_3_1_1_EStringParserRuleCall_3_1_2___or___IntervalKeyword_3_3_0_INTTerminalRuleCall_3_3_1_ToKeyword_3_3_2_INTTerminalRuleCall_3_3_3_InKeyword_3_3_4_EStringParserRuleCall_3_3_5__.equals(syntax))
				emit_For___AllKeyword_3_2_0_EStringParserRuleCall_3_2_1___or___EStringParserRuleCall_3_0_0_EqualsSignKeyword_3_0_1_INTTerminalRuleCall_3_0_2_SemicolonKeyword_3_0_3_EStringParserRuleCall_3_0_4_BooleanOperatorParserRuleCall_3_0_5_TypeParserRuleCall_3_0_6_SemicolonKeyword_3_0_7_EStringParserRuleCall_3_0_8___HyphenMinusHyphenMinusKeyword_3_0_9_1_or_PlusSignPlusSignKeyword_3_0_9_0_or___HyphenMinusKeyword_3_0_9_3_0_INTTerminalRuleCall_3_0_9_3_1___or___PlusSignKeyword_3_0_9_2_0_INTTerminalRuleCall_3_0_9_2_1_______or___EStringParserRuleCall_3_1_0_ColonKeyword_3_1_1_EStringParserRuleCall_3_1_2___or___IntervalKeyword_3_3_0_INTTerminalRuleCall_3_3_1_ToKeyword_3_3_2_INTTerminalRuleCall_3_3_3_InKeyword_3_3_4_EStringParserRuleCall_3_3_5__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_While_TrueKeyword_2_0_or___ExclamationMarkKeyword_2_1_0_q_EStringParserRuleCall_2_1_1__.equals(syntax))
				emit_While_TrueKeyword_2_0_or___ExclamationMarkKeyword_2_1_0_q_EStringParserRuleCall_2_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' expression=Atomic
	 *     (rule start) (ambiguity) '-' expression=Atomic
	 *     (rule start) (ambiguity) name=EString
	 *     (rule start) (ambiguity) ref=[Variable|ID]
	 *     (rule start) (ambiguity) value='false'
	 *     (rule start) (ambiguity) value='true'
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {AndOrExpression.left=}
	 *     (rule start) (ambiguity) {Comparison.left=}
	 *     (rule start) (ambiguity) {Equals.left=}
	 *     (rule start) (ambiguity) {Minus.left=}
	 *     (rule start) (ambiguity) {MultiOrDiv.left=}
	 *     (rule start) (ambiguity) {Plus.left=}
	 */
	protected void emit_Atomic_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' expression=Atomic
	 *     (rule start) (ambiguity) '-' expression=Atomic
	 *     (rule start) (ambiguity) {AndOrExpression.left=}
	 *     (rule start) (ambiguity) {Comparison.left=}
	 *     (rule start) (ambiguity) {Equals.left=}
	 *     (rule start) (ambiguity) {Minus.left=}
	 *     (rule start) (ambiguity) {MultiOrDiv.left=}
	 *     (rule start) (ambiguity) {Plus.left=}
	 */
	protected void emit_Atomic_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         (
	  *             EString 
	  *             '=' 
	  *             INT 
	  *             ';' 
	  *             EString 
	  *             BooleanOperator 
	  *             Type 
	  *             ';' 
	  *             EString 
	  *             ('++' | '--' | ('+' INT) | ('-' INT))
	  *         ) | 
	  *         (EString ':' EString) | 
	  *         ('all' EString) | 
	  *         (
	  *             'interval' 
	  *             INT 
	  *             'to' 
	  *             INT 
	  *             'in' 
	  *             EString
	  *         )
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'for' '(' (ambiguity) ')' (rule start)
	 */
	protected void emit_For___AllKeyword_3_2_0_EStringParserRuleCall_3_2_1___or___EStringParserRuleCall_3_0_0_EqualsSignKeyword_3_0_1_INTTerminalRuleCall_3_0_2_SemicolonKeyword_3_0_3_EStringParserRuleCall_3_0_4_BooleanOperatorParserRuleCall_3_0_5_TypeParserRuleCall_3_0_6_SemicolonKeyword_3_0_7_EStringParserRuleCall_3_0_8___HyphenMinusHyphenMinusKeyword_3_0_9_1_or_PlusSignPlusSignKeyword_3_0_9_0_or___HyphenMinusKeyword_3_0_9_3_0_INTTerminalRuleCall_3_0_9_3_1___or___PlusSignKeyword_3_0_9_2_0_INTTerminalRuleCall_3_0_9_2_1_______or___EStringParserRuleCall_3_1_0_ColonKeyword_3_1_1_EStringParserRuleCall_3_1_2___or___IntervalKeyword_3_3_0_INTTerminalRuleCall_3_3_1_ToKeyword_3_3_2_INTTerminalRuleCall_3_3_3_InKeyword_3_3_4_EStringParserRuleCall_3_3_5__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'true' | ('!'? EString)
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'while' (ambiguity) (rule start)
	 */
	protected void emit_While_TrueKeyword_2_0_or___ExclamationMarkKeyword_2_1_0_q_EStringParserRuleCall_2_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
