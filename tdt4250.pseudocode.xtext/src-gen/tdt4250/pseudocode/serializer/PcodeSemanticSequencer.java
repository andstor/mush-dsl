/*
 * generated by Xtext 2.23.0
 */
package tdt4250.pseudocode.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import tdt4250.pseudocode.Constructor;
import tdt4250.pseudocode.Field;
import tdt4250.pseudocode.Method;
import tdt4250.pseudocode.PseudoClass;
import tdt4250.pseudocode.PseudocodePackage;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

@SuppressWarnings("all")
public class PcodeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PcodeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PseudocodePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PseudocodePackage.CONSTRUCTOR:
				sequence_Constructor(context, (Constructor) semanticObject); 
				return; 
			case PseudocodePackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case PseudocodePackage.METHOD:
				sequence_Method(context, (Method) semanticObject); 
				return; 
			case PseudocodePackage.PARAMETER:
				if (rule == grammarAccess.getMethodBodyRule()) {
					sequence_MethodBody(context, (tdt4250.pseudocode.Parameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Parameter(context, (tdt4250.pseudocode.Parameter) semanticObject); 
					return; 
				}
				else break;
			case PseudocodePackage.PSEUDO_CLASS:
				sequence_PseudoClass(context, (PseudoClass) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Member returns Constructor
	 *     Constructor returns Constructor
	 *
	 * Constraint:
	 *     (name='(' (parameters+=Parameter parameters+=Parameter*)*)
	 */
	protected void sequence_Constructor(ISerializationContext context, Constructor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Member returns Field
	 *     Field returns Field
	 *
	 * Constraint:
	 *     {Field}
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MethodBody returns Parameter
	 *
	 * Constraint:
	 *     {Parameter}
	 */
	protected void sequence_MethodBody(ISerializationContext context, tdt4250.pseudocode.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Member returns Method
	 *     Method returns Method
	 *
	 * Constraint:
	 *     (name=EString (parameters+=Parameter parameters+=Parameter*)* (parameters+=MethodBody parameters+=MethodBody*)*)
	 */
	protected void sequence_Method(ISerializationContext context, Method semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Parameter(ISerializationContext context, tdt4250.pseudocode.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PseudocodePackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PseudocodePackage.Literals.PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PseudoClass returns PseudoClass
	 *     Member returns PseudoClass
	 *
	 * Constraint:
	 *     (name=EString members+=Constructor* members+=Method*)
	 */
	protected void sequence_PseudoClass(ISerializationContext context, PseudoClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
