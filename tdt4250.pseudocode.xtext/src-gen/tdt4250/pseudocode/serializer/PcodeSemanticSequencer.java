/*
 * generated by Xtext 2.22.0
 */
package tdt4250.pseudocode.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import tdt4250.pseudocode.Constructor;
import tdt4250.pseudocode.Expression;
import tdt4250.pseudocode.Field;
import tdt4250.pseudocode.Member;
import tdt4250.pseudocode.Method;
import tdt4250.pseudocode.Operation;
import tdt4250.pseudocode.PseudoClass;
import tdt4250.pseudocode.PseudoInterface;
import tdt4250.pseudocode.PseudocodePackage;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

@SuppressWarnings("all")
public class PcodeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PcodeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PseudocodePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PseudocodePackage.CONSTRUCTOR:
				sequence_Constructor(context, (Constructor) semanticObject); 
				return; 
			case PseudocodePackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case PseudocodePackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case PseudocodePackage.MEMBER:
				sequence_Member_Impl(context, (Member) semanticObject); 
				return; 
			case PseudocodePackage.METHOD:
				sequence_Method(context, (Method) semanticObject); 
				return; 
			case PseudocodePackage.OPERATION:
				sequence_Operation_Impl(context, (Operation) semanticObject); 
				return; 
			case PseudocodePackage.PARAMETER:
				sequence_Parameter(context, (tdt4250.pseudocode.Parameter) semanticObject); 
				return; 
			case PseudocodePackage.PSEUDO_CLASS:
				sequence_PseudoClass(context, (PseudoClass) semanticObject); 
				return; 
			case PseudocodePackage.PSEUDO_INTERFACE:
				sequence_PseudoInterface(context, (PseudoInterface) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Member returns Constructor
	 *     Constructor returns Constructor
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         visibility=VisibilityKind? 
	 *         type=[PseudoType|EString]? 
	 *         exceptions=[PseudoType|EString]? 
	 *         (parameters+=Parameter parameters+=Parameter*)?
	 *     )
	 */
	protected void sequence_Constructor(ISerializationContext context, Constructor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     {Expression}
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Member returns Field
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (name=EString visibility=VisibilityKind? type=[PseudoType|EString]? initializer=[Expression|EString]?)
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Member returns Member
	 *     Member_Impl returns Member
	 *
	 * Constraint:
	 *     (name=EString visibility=VisibilityKind? type=[PseudoType|EString]?)
	 */
	protected void sequence_Member_Impl(ISerializationContext context, Member semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Member returns Method
	 *     Method returns Method
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         visibility=VisibilityKind? 
	 *         type=[PseudoType|EString]? 
	 *         exceptions=[PseudoType|EString]? 
	 *         (parameters+=Parameter parameters+=Parameter*)?
	 *     )
	 */
	protected void sequence_Method(ISerializationContext context, Method semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Member returns Operation
	 *     Operation_Impl returns Operation
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         visibility=VisibilityKind? 
	 *         type=[PseudoType|EString]? 
	 *         exceptions=[PseudoType|EString]? 
	 *         (parameters+=Parameter parameters+=Parameter*)?
	 *     )
	 */
	protected void sequence_Operation_Impl(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=EString type=[PseudoType|EString]?)
	 */
	protected void sequence_Parameter(ISerializationContext context, tdt4250.pseudocode.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PseudoClass returns PseudoClass
	 *     PseudoType returns PseudoClass
	 *     Member returns PseudoClass
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         visibility=VisibilityKind? 
	 *         type=[PseudoType|EString]? 
	 *         (superTypes+=[PseudoType|EString] superTypes+=[PseudoType|EString]*)? 
	 *         (members+=Member members+=Member*)?
	 *     )
	 */
	protected void sequence_PseudoClass(ISerializationContext context, PseudoClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PseudoType returns PseudoInterface
	 *     Member returns PseudoInterface
	 *     PseudoInterface returns PseudoInterface
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         visibility=VisibilityKind? 
	 *         type=[PseudoType|EString]? 
	 *         (superTypes+=[PseudoType|EString] superTypes+=[PseudoType|EString]*)? 
	 *         (members+=Member members+=Member*)?
	 *     )
	 */
	protected void sequence_PseudoInterface(ISerializationContext context, PseudoInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
