/*
 * generated by Xtext 2.22.0
 */
package tdt4250.pseudocode.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import tdt4250.pseudocode.AndOrExpression;
import tdt4250.pseudocode.ArithmeticSigned;
import tdt4250.pseudocode.BooleanLiteral;
import tdt4250.pseudocode.BooleanNegation;
import tdt4250.pseudocode.Comparison;
import tdt4250.pseudocode.Equals;
import tdt4250.pseudocode.For;
import tdt4250.pseudocode.Function;
import tdt4250.pseudocode.FunctionCall;
import tdt4250.pseudocode.IfExpression;
import tdt4250.pseudocode.Minus;
import tdt4250.pseudocode.Model;
import tdt4250.pseudocode.MultiOrDiv;
import tdt4250.pseudocode.NumberLiteral;
import tdt4250.pseudocode.Plus;
import tdt4250.pseudocode.PseudocodePackage;
import tdt4250.pseudocode.Stop;
import tdt4250.pseudocode.StringLiteral;
import tdt4250.pseudocode.Variable;
import tdt4250.pseudocode.VariableReference;
import tdt4250.pseudocode.While;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

@SuppressWarnings("all")
public class PcodeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PcodeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PseudocodePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PseudocodePackage.AND_OR_EXPRESSION:
				sequence_BooleanExpression(context, (AndOrExpression) semanticObject); 
				return; 
			case PseudocodePackage.ARITHMETIC_SIGNED:
				sequence_Prefixed(context, (ArithmeticSigned) semanticObject); 
				return; 
			case PseudocodePackage.BOOLEAN_LITERAL:
				sequence_Atomic(context, (BooleanLiteral) semanticObject); 
				return; 
			case PseudocodePackage.BOOLEAN_NEGATION:
				sequence_Prefixed(context, (BooleanNegation) semanticObject); 
				return; 
			case PseudocodePackage.COMPARISON:
				sequence_Comparison(context, (Comparison) semanticObject); 
				return; 
			case PseudocodePackage.EQUALS:
				sequence_Equals(context, (Equals) semanticObject); 
				return; 
			case PseudocodePackage.FOR:
				sequence_For(context, (For) semanticObject); 
				return; 
			case PseudocodePackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case PseudocodePackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case PseudocodePackage.IF_EXPRESSION:
				sequence_IfExpression(context, (IfExpression) semanticObject); 
				return; 
			case PseudocodePackage.MINUS:
				sequence_Addition(context, (Minus) semanticObject); 
				return; 
			case PseudocodePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case PseudocodePackage.MULTI_OR_DIV:
				sequence_Multiplication(context, (MultiOrDiv) semanticObject); 
				return; 
			case PseudocodePackage.NUMBER_LITERAL:
				sequence_Atomic(context, (NumberLiteral) semanticObject); 
				return; 
			case PseudocodePackage.PARAMETER:
				sequence_Parameter(context, (tdt4250.pseudocode.Parameter) semanticObject); 
				return; 
			case PseudocodePackage.PLUS:
				sequence_Addition(context, (Plus) semanticObject); 
				return; 
			case PseudocodePackage.STOP:
				sequence_Stop(context, (Stop) semanticObject); 
				return; 
			case PseudocodePackage.STRING_LITERAL:
				sequence_Atomic(context, (StringLiteral) semanticObject); 
				return; 
			case PseudocodePackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case PseudocodePackage.VARIABLE_REFERENCE:
				sequence_Atomic(context, (VariableReference) semanticObject); 
				return; 
			case PseudocodePackage.WHILE:
				sequence_While(context, (While) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns Minus
	 *     BooleanExpression returns Minus
	 *     BooleanExpression.AndOrExpression_1_0_0 returns Minus
	 *     Comparison returns Minus
	 *     Comparison.Comparison_1_0_0 returns Minus
	 *     Equals returns Minus
	 *     Equals.Equals_1_0_0 returns Minus
	 *     Addition returns Minus
	 *     Addition.Plus_1_0_0_0 returns Minus
	 *     Addition.Minus_1_0_1_0 returns Minus
	 *     Multiplication returns Minus
	 *     Multiplication.MultiOrDiv_1_0_0 returns Minus
	 *     Prefixed returns Minus
	 *     Atomic returns Minus
	 *
	 * Constraint:
	 *     (left=Addition_Minus_1_0_1_0 right=Multiplication)
	 */
	protected void sequence_Addition(ISerializationContext context, Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PseudocodePackage.Literals.MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PseudocodePackage.Literals.MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, PseudocodePackage.Literals.MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PseudocodePackage.Literals.MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Plus
	 *     BooleanExpression returns Plus
	 *     BooleanExpression.AndOrExpression_1_0_0 returns Plus
	 *     Comparison returns Plus
	 *     Comparison.Comparison_1_0_0 returns Plus
	 *     Equals returns Plus
	 *     Equals.Equals_1_0_0 returns Plus
	 *     Addition returns Plus
	 *     Addition.Plus_1_0_0_0 returns Plus
	 *     Addition.Minus_1_0_1_0 returns Plus
	 *     Multiplication returns Plus
	 *     Multiplication.MultiOrDiv_1_0_0 returns Plus
	 *     Prefixed returns Plus
	 *     Atomic returns Plus
	 *
	 * Constraint:
	 *     (left=Addition_Plus_1_0_0_0 right=Multiplication)
	 */
	protected void sequence_Addition(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PseudocodePackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PseudocodePackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, PseudocodePackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PseudocodePackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns BooleanLiteral
	 *     BooleanExpression returns BooleanLiteral
	 *     BooleanExpression.AndOrExpression_1_0_0 returns BooleanLiteral
	 *     Comparison returns BooleanLiteral
	 *     Comparison.Comparison_1_0_0 returns BooleanLiteral
	 *     Equals returns BooleanLiteral
	 *     Equals.Equals_1_0_0 returns BooleanLiteral
	 *     Addition returns BooleanLiteral
	 *     Addition.Plus_1_0_0_0 returns BooleanLiteral
	 *     Addition.Minus_1_0_1_0 returns BooleanLiteral
	 *     Multiplication returns BooleanLiteral
	 *     Multiplication.MultiOrDiv_1_0_0 returns BooleanLiteral
	 *     Prefixed returns BooleanLiteral
	 *     Atomic returns BooleanLiteral
	 *
	 * Constraint:
	 *     (value='true' | value='false')
	 */
	protected void sequence_Atomic(ISerializationContext context, BooleanLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns NumberLiteral
	 *     BooleanExpression returns NumberLiteral
	 *     BooleanExpression.AndOrExpression_1_0_0 returns NumberLiteral
	 *     Comparison returns NumberLiteral
	 *     Comparison.Comparison_1_0_0 returns NumberLiteral
	 *     Equals returns NumberLiteral
	 *     Equals.Equals_1_0_0 returns NumberLiteral
	 *     Addition returns NumberLiteral
	 *     Addition.Plus_1_0_0_0 returns NumberLiteral
	 *     Addition.Minus_1_0_1_0 returns NumberLiteral
	 *     Multiplication returns NumberLiteral
	 *     Multiplication.MultiOrDiv_1_0_0 returns NumberLiteral
	 *     Prefixed returns NumberLiteral
	 *     Atomic returns NumberLiteral
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Atomic(ISerializationContext context, NumberLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PseudocodePackage.Literals.NUMBER_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PseudocodePackage.Literals.NUMBER_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns StringLiteral
	 *     BooleanExpression returns StringLiteral
	 *     BooleanExpression.AndOrExpression_1_0_0 returns StringLiteral
	 *     Comparison returns StringLiteral
	 *     Comparison.Comparison_1_0_0 returns StringLiteral
	 *     Equals returns StringLiteral
	 *     Equals.Equals_1_0_0 returns StringLiteral
	 *     Addition returns StringLiteral
	 *     Addition.Plus_1_0_0_0 returns StringLiteral
	 *     Addition.Minus_1_0_1_0 returns StringLiteral
	 *     Multiplication returns StringLiteral
	 *     Multiplication.MultiOrDiv_1_0_0 returns StringLiteral
	 *     Prefixed returns StringLiteral
	 *     Atomic returns StringLiteral
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Atomic(ISerializationContext context, StringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PseudocodePackage.Literals.STRING_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PseudocodePackage.Literals.STRING_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_2_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns VariableReference
	 *     BooleanExpression returns VariableReference
	 *     BooleanExpression.AndOrExpression_1_0_0 returns VariableReference
	 *     Comparison returns VariableReference
	 *     Comparison.Comparison_1_0_0 returns VariableReference
	 *     Equals returns VariableReference
	 *     Equals.Equals_1_0_0 returns VariableReference
	 *     Addition returns VariableReference
	 *     Addition.Plus_1_0_0_0 returns VariableReference
	 *     Addition.Minus_1_0_1_0 returns VariableReference
	 *     Multiplication returns VariableReference
	 *     Multiplication.MultiOrDiv_1_0_0 returns VariableReference
	 *     Prefixed returns VariableReference
	 *     Atomic returns VariableReference
	 *
	 * Constraint:
	 *     ref=[Variable|ID]
	 */
	protected void sequence_Atomic(ISerializationContext context, VariableReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PseudocodePackage.Literals.VARIABLE_REFERENCE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PseudocodePackage.Literals.VARIABLE_REFERENCE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getRefVariableIDTerminalRuleCall_4_1_0_1(), semanticObject.eGet(PseudocodePackage.Literals.VARIABLE_REFERENCE__REF, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns AndOrExpression
	 *     BooleanExpression returns AndOrExpression
	 *     BooleanExpression.AndOrExpression_1_0_0 returns AndOrExpression
	 *     Comparison returns AndOrExpression
	 *     Comparison.Comparison_1_0_0 returns AndOrExpression
	 *     Equals returns AndOrExpression
	 *     Equals.Equals_1_0_0 returns AndOrExpression
	 *     Addition returns AndOrExpression
	 *     Addition.Plus_1_0_0_0 returns AndOrExpression
	 *     Addition.Minus_1_0_1_0 returns AndOrExpression
	 *     Multiplication returns AndOrExpression
	 *     Multiplication.MultiOrDiv_1_0_0 returns AndOrExpression
	 *     Prefixed returns AndOrExpression
	 *     Atomic returns AndOrExpression
	 *
	 * Constraint:
	 *     (left=BooleanExpression_AndOrExpression_1_0_0 (op='||' | op='&&') right=Comparison)
	 */
	protected void sequence_BooleanExpression(ISerializationContext context, AndOrExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Comparison
	 *     BooleanExpression returns Comparison
	 *     BooleanExpression.AndOrExpression_1_0_0 returns Comparison
	 *     Comparison returns Comparison
	 *     Comparison.Comparison_1_0_0 returns Comparison
	 *     Equals returns Comparison
	 *     Equals.Equals_1_0_0 returns Comparison
	 *     Addition returns Comparison
	 *     Addition.Plus_1_0_0_0 returns Comparison
	 *     Addition.Minus_1_0_1_0 returns Comparison
	 *     Multiplication returns Comparison
	 *     Multiplication.MultiOrDiv_1_0_0 returns Comparison
	 *     Prefixed returns Comparison
	 *     Atomic returns Comparison
	 *
	 * Constraint:
	 *     (left=Comparison_Comparison_1_0_0 (op='<' | op='>') right=Equals)
	 */
	protected void sequence_Comparison(ISerializationContext context, Comparison semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Equals
	 *     BooleanExpression returns Equals
	 *     BooleanExpression.AndOrExpression_1_0_0 returns Equals
	 *     Comparison returns Equals
	 *     Comparison.Comparison_1_0_0 returns Equals
	 *     Equals returns Equals
	 *     Equals.Equals_1_0_0 returns Equals
	 *     Addition returns Equals
	 *     Addition.Plus_1_0_0_0 returns Equals
	 *     Addition.Minus_1_0_1_0 returns Equals
	 *     Multiplication returns Equals
	 *     Multiplication.MultiOrDiv_1_0_0 returns Equals
	 *     Prefixed returns Equals
	 *     Atomic returns Equals
	 *
	 * Constraint:
	 *     (left=Equals_Equals_1_0_0 (op='==' | op='<=' | op='>=' | op='!=') right=Addition)
	 */
	protected void sequence_Equals(ISerializationContext context, Equals semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns For
	 *     Statement returns For
	 *     For returns For
	 *
	 * Constraint:
	 *     {For}
	 */
	protected void sequence_For(ISerializationContext context, For semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionCall returns FunctionCall
	 *     Expression returns FunctionCall
	 *     BooleanExpression returns FunctionCall
	 *     BooleanExpression.AndOrExpression_1_0_0 returns FunctionCall
	 *     Comparison returns FunctionCall
	 *     Comparison.Comparison_1_0_0 returns FunctionCall
	 *     Equals returns FunctionCall
	 *     Equals.Equals_1_0_0 returns FunctionCall
	 *     Addition returns FunctionCall
	 *     Addition.Plus_1_0_0_0 returns FunctionCall
	 *     Addition.Minus_1_0_1_0 returns FunctionCall
	 *     Multiplication returns FunctionCall
	 *     Multiplication.MultiOrDiv_1_0_0 returns FunctionCall
	 *     Prefixed returns FunctionCall
	 *     Atomic returns FunctionCall
	 *
	 * Constraint:
	 *     (name=EString (parameters+=Parameter parameters+=Parameter*)?)
	 */
	protected void sequence_FunctionCall(ISerializationContext context, FunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (name=EString (parameters+=Parameter parameters+=Parameter*)* features+=Feature*)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns IfExpression
	 *     Statement returns IfExpression
	 *     IfExpression returns IfExpression
	 *
	 * Constraint:
	 *     (condition=Expression then=Expression else=Expression?)
	 */
	protected void sequence_IfExpression(ISerializationContext context, IfExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     functions+=Function*
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns MultiOrDiv
	 *     BooleanExpression returns MultiOrDiv
	 *     BooleanExpression.AndOrExpression_1_0_0 returns MultiOrDiv
	 *     Comparison returns MultiOrDiv
	 *     Comparison.Comparison_1_0_0 returns MultiOrDiv
	 *     Equals returns MultiOrDiv
	 *     Equals.Equals_1_0_0 returns MultiOrDiv
	 *     Addition returns MultiOrDiv
	 *     Addition.Plus_1_0_0_0 returns MultiOrDiv
	 *     Addition.Minus_1_0_1_0 returns MultiOrDiv
	 *     Multiplication returns MultiOrDiv
	 *     Multiplication.MultiOrDiv_1_0_0 returns MultiOrDiv
	 *     Prefixed returns MultiOrDiv
	 *     Atomic returns MultiOrDiv
	 *
	 * Constraint:
	 *     (left=Multiplication_MultiOrDiv_1_0_0 (op='*' | op='/') right=Prefixed)
	 */
	protected void sequence_Multiplication(ISerializationContext context, MultiOrDiv semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     name=Type
	 */
	protected void sequence_Parameter(ISerializationContext context, tdt4250.pseudocode.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PseudocodePackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PseudocodePackage.Literals.PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameTypeParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns ArithmeticSigned
	 *     BooleanExpression returns ArithmeticSigned
	 *     BooleanExpression.AndOrExpression_1_0_0 returns ArithmeticSigned
	 *     Comparison returns ArithmeticSigned
	 *     Comparison.Comparison_1_0_0 returns ArithmeticSigned
	 *     Equals returns ArithmeticSigned
	 *     Equals.Equals_1_0_0 returns ArithmeticSigned
	 *     Addition returns ArithmeticSigned
	 *     Addition.Plus_1_0_0_0 returns ArithmeticSigned
	 *     Addition.Minus_1_0_1_0 returns ArithmeticSigned
	 *     Multiplication returns ArithmeticSigned
	 *     Multiplication.MultiOrDiv_1_0_0 returns ArithmeticSigned
	 *     Prefixed returns ArithmeticSigned
	 *     Atomic returns ArithmeticSigned
	 *
	 * Constraint:
	 *     expression=Atomic
	 */
	protected void sequence_Prefixed(ISerializationContext context, ArithmeticSigned semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PseudocodePackage.Literals.ARITHMETIC_SIGNED__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PseudocodePackage.Literals.ARITHMETIC_SIGNED__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrefixedAccess().getExpressionAtomicParserRuleCall_1_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns BooleanNegation
	 *     BooleanExpression returns BooleanNegation
	 *     BooleanExpression.AndOrExpression_1_0_0 returns BooleanNegation
	 *     Comparison returns BooleanNegation
	 *     Comparison.Comparison_1_0_0 returns BooleanNegation
	 *     Equals returns BooleanNegation
	 *     Equals.Equals_1_0_0 returns BooleanNegation
	 *     Addition returns BooleanNegation
	 *     Addition.Plus_1_0_0_0 returns BooleanNegation
	 *     Addition.Minus_1_0_1_0 returns BooleanNegation
	 *     Multiplication returns BooleanNegation
	 *     Multiplication.MultiOrDiv_1_0_0 returns BooleanNegation
	 *     Prefixed returns BooleanNegation
	 *     Atomic returns BooleanNegation
	 *
	 * Constraint:
	 *     expression=Atomic
	 */
	protected void sequence_Prefixed(ISerializationContext context, BooleanNegation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PseudocodePackage.Literals.BOOLEAN_NEGATION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PseudocodePackage.Literals.BOOLEAN_NEGATION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrefixedAccess().getExpressionAtomicParserRuleCall_0_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns Stop
	 *     Statement returns Stop
	 *     Stop returns Stop
	 *
	 * Constraint:
	 *     (type='stop' | type='break' | type='continue' | (type='return' value=Type))
	 */
	protected void sequence_Stop(ISerializationContext context, Stop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns Variable
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (name=EString value=Expression?)
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns While
	 *     Statement returns While
	 *     While returns While
	 *
	 * Constraint:
	 *     {While}
	 */
	protected void sequence_While(ISerializationContext context, While semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
