/*
 * generated by Xtext 2.22.0
 */
package tdt4250.pseudocode.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PcodeGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_1_0 = (RuleCall)cFunctionsAssignment_1.eContents().get(0);
		
		///* Det er fortsatt litt rot i modellen, sorry! Will fix!
		// * Tror at Expression skal være ok nå ;)
		// */ // OK
		//Model:
		//	{Model} functions+=Function*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} functions+=Function*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//functions+=Function*
		public Assignment getFunctionsAssignment_1() { return cFunctionsAssignment_1; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_1_0() { return cFunctionsFunctionParserRuleCall_1_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cBEGINTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cFeaturesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFeaturesFeatureParserRuleCall_6_0 = (RuleCall)cFeaturesAssignment_6.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//// OK
		//Function:
		//	{Function} name=EString
		//	'(' (parameters+=Parameter ("," parameters+=Parameter)*)*
		//	')'
		//	//('\n' ('\n')*)
		//	BEGIN
		//	features+=Feature*
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Function} name=EString '(' (parameters+=Parameter ("," parameters+=Parameter)*)* ')' //('\n' ('\n')*)
		//BEGIN features+=Feature* END
		public Group getGroup() { return cGroup; }
		
		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Parameter ("," parameters+=Parameter)*)*
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0_0() { return cParametersParameterParserRuleCall_3_0_0; }
		
		//("," parameters+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_1_0() { return cParametersParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		////('\n' ('\n')*)
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_5() { return cBEGINTerminalRuleCall_5; }
		
		//features+=Feature*
		public Assignment getFeaturesAssignment_6() { return cFeaturesAssignment_6; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_6_0() { return cFeaturesFeatureParserRuleCall_6_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_7() { return cENDTerminalRuleCall_7; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Feature:
		//	Statement | Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//Statement | Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement:
		//	IfExpression | For | While | Stop;
		@Override public ParserRule getRule() { return rule; }
		
		//IfExpression | For | While | Stop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_0() { return cIfExpressionParserRuleCall_0; }
		
		//For
		public RuleCall getForParserRuleCall_1() { return cForParserRuleCall_1; }
		
		//While
		public RuleCall getWhileParserRuleCall_2() { return cWhileParserRuleCall_2; }
		
		//Stop
		public RuleCall getStopParserRuleCall_3() { return cStopParserRuleCall_3; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Variable:
		//	{Variable} name=EString ('=' value=Expression)? // Er lov å skrive x=y=2?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable} name=EString ('=' value=Expression)?
		public Group getGroup() { return cGroup; }
		
		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//('=' value=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//value=Expression
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_1_0() { return cValueExpressionParserRuleCall_2_1_0; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenExpressionParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseExpressionParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		
		///*
		//// TODO: lag ecore modell
		//CollectionLitteral:
		//	SetLitteral | ListLitteral
		//;
		//
		//// TODO: lag ecore modell
		//SetLitteral:
		//	{SetLitteral}
		//	'{' (elements+=Expression (',' elements+=Expression )*)? '}'
		//;
		//
		//// TODO: lag ecore modell
		//ListLitteral:
		//	{ListLitteral}
		//	'[' (elements+=Expression (',' elements+=Expression )*)? ']'
		//;
		//*/ IfExpression:
		//	{IfExpression}
		//	'if' condition=Expression ':' // må sjekke etter newline elns for å fjerne ':'
		//	then=Expression (=> 'else' else=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfExpression} 'if' condition=Expression ':' // må sjekke etter newline elns for å fjerne ':'
		//then=Expression (=> 'else' else=Expression)?
		public Group getGroup() { return cGroup; }
		
		//{IfExpression}
		public Action getIfExpressionAction_0() { return cIfExpressionAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//// må sjekke etter newline elns for å fjerne ':'
		//then=Expression
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//Expression
		public RuleCall getThenExpressionParserRuleCall_4_0() { return cThenExpressionParserRuleCall_4_0; }
		
		//(=> 'else' else=Expression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//else=Expression
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//Expression
		public RuleCall getElseExpressionParserRuleCall_5_1_0() { return cElseExpressionParserRuleCall_5_1_0; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cEStringParserRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final RuleCall cEStringParserRuleCall_3_0_4 = (RuleCall)cGroup_3_0.eContents().get(4);
		private final RuleCall cBooleanOperatorParserRuleCall_3_0_5 = (RuleCall)cGroup_3_0.eContents().get(5);
		private final RuleCall cTypeParserRuleCall_3_0_6 = (RuleCall)cGroup_3_0.eContents().get(6);
		private final Keyword cSemicolonKeyword_3_0_7 = (Keyword)cGroup_3_0.eContents().get(7);
		private final RuleCall cEStringParserRuleCall_3_0_8 = (RuleCall)cGroup_3_0.eContents().get(8);
		private final Alternatives cAlternatives_3_0_9 = (Alternatives)cGroup_3_0.eContents().get(9);
		private final Keyword cPlusSignPlusSignKeyword_3_0_9_0 = (Keyword)cAlternatives_3_0_9.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_3_0_9_1 = (Keyword)cAlternatives_3_0_9.eContents().get(1);
		private final Group cGroup_3_0_9_2 = (Group)cAlternatives_3_0_9.eContents().get(2);
		private final Keyword cPlusSignKeyword_3_0_9_2_0 = (Keyword)cGroup_3_0_9_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_3_0_9_2_1 = (RuleCall)cGroup_3_0_9_2.eContents().get(1);
		private final Group cGroup_3_0_9_3 = (Group)cAlternatives_3_0_9.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_3_0_9_3_0 = (Keyword)cGroup_3_0_9_3.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_3_0_9_3_1 = (RuleCall)cGroup_3_0_9_3.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cEStringParserRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Keyword cColonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final RuleCall cEStringParserRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Keyword cAllKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final RuleCall cEStringParserRuleCall_3_2_1 = (RuleCall)cGroup_3_2.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cAlternatives_3.eContents().get(3);
		private final Keyword cIntervalKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_3_3_1 = (RuleCall)cGroup_3_3.eContents().get(1);
		private final Keyword cToKeyword_3_3_2 = (Keyword)cGroup_3_3.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3_3_3 = (RuleCall)cGroup_3_3.eContents().get(3);
		private final Keyword cInKeyword_3_3_4 = (Keyword)cGroup_3_3.eContents().get(4);
		private final RuleCall cEStringParserRuleCall_3_3_5 = (RuleCall)cGroup_3_3.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//For:
		//	{For}
		//	'for' '(' (EString '=' INT ';' EString BooleanOperator Type ';' EString ('++' | '--' | '+' INT | '-' INT) | EString
		//	':' EString | 'all' EString | 'interval' INT 'to' INT 'in' EString) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{For} 'for' '(' (EString '=' INT ';' EString BooleanOperator Type ';' EString ('++' | '--' | '+' INT | '-' INT) |
		//EString ':' EString | 'all' EString | 'interval' INT 'to' INT 'in' EString) ')'
		public Group getGroup() { return cGroup; }
		
		//{For}
		public Action getForAction_0() { return cForAction_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(EString '=' INT ';' EString BooleanOperator Type ';' EString ('++' | '--' | '+' INT | '-' INT) | EString ':' EString |
		//'all' EString | 'interval' INT 'to' INT 'in' EString)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		////Original for loop
		//EString '=' INT ';' EString BooleanOperator Type ';' EString ('++' | '--' | '+' INT | '-' INT)
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//EString
		public RuleCall getEStringParserRuleCall_3_0_0() { return cEStringParserRuleCall_3_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0_1() { return cEqualsSignKeyword_3_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_0_2() { return cINTTerminalRuleCall_3_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0_3() { return cSemicolonKeyword_3_0_3; }
		
		//EString
		public RuleCall getEStringParserRuleCall_3_0_4() { return cEStringParserRuleCall_3_0_4; }
		
		//BooleanOperator
		public RuleCall getBooleanOperatorParserRuleCall_3_0_5() { return cBooleanOperatorParserRuleCall_3_0_5; }
		
		//Type
		public RuleCall getTypeParserRuleCall_3_0_6() { return cTypeParserRuleCall_3_0_6; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0_7() { return cSemicolonKeyword_3_0_7; }
		
		//EString
		public RuleCall getEStringParserRuleCall_3_0_8() { return cEStringParserRuleCall_3_0_8; }
		
		//('++' | '--' | '+' INT | '-' INT)
		public Alternatives getAlternatives_3_0_9() { return cAlternatives_3_0_9; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_3_0_9_0() { return cPlusSignPlusSignKeyword_3_0_9_0; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_3_0_9_1() { return cHyphenMinusHyphenMinusKeyword_3_0_9_1; }
		
		//'+' INT
		public Group getGroup_3_0_9_2() { return cGroup_3_0_9_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_3_0_9_2_0() { return cPlusSignKeyword_3_0_9_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_0_9_2_1() { return cINTTerminalRuleCall_3_0_9_2_1; }
		
		//'-' INT
		public Group getGroup_3_0_9_3() { return cGroup_3_0_9_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_0_9_3_0() { return cHyphenMinusKeyword_3_0_9_3_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_0_9_3_1() { return cINTTerminalRuleCall_3_0_9_3_1; }
		
		//EString ':' EString
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//EString
		public RuleCall getEStringParserRuleCall_3_1_0() { return cEStringParserRuleCall_3_1_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_1() { return cColonKeyword_3_1_1; }
		
		//EString
		public RuleCall getEStringParserRuleCall_3_1_2() { return cEStringParserRuleCall_3_1_2; }
		
		//'all' EString
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'all'
		public Keyword getAllKeyword_3_2_0() { return cAllKeyword_3_2_0; }
		
		//EString
		public RuleCall getEStringParserRuleCall_3_2_1() { return cEStringParserRuleCall_3_2_1; }
		
		//'interval' INT 'to' INT 'in' EString
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'interval'
		public Keyword getIntervalKeyword_3_3_0() { return cIntervalKeyword_3_3_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_3_1() { return cINTTerminalRuleCall_3_3_1; }
		
		//'to'
		public Keyword getToKeyword_3_3_2() { return cToKeyword_3_3_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_3_3() { return cINTTerminalRuleCall_3_3_3; }
		
		//'in'
		public Keyword getInKeyword_3_3_4() { return cInKeyword_3_3_4; }
		
		//EString
		public RuleCall getEStringParserRuleCall_3_3_5() { return cEStringParserRuleCall_3_3_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cTrueKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cEStringParserRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		
		//While:
		//	{While}
		//	'while' ('true' | '!'? EString);
		@Override public ParserRule getRule() { return rule; }
		
		//{While} 'while' ('true' | '!'? EString)
		public Group getGroup() { return cGroup; }
		
		//{While}
		public Action getWhileAction_0() { return cWhileAction_0; }
		
		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//('true' | '!'? EString)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'true'
		public Keyword getTrueKeyword_2_0() { return cTrueKeyword_2_0; }
		
		//'!'? EString
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'!'?
		public Keyword getExclamationMarkKeyword_2_1_0() { return cExclamationMarkKeyword_2_1_0; }
		
		//EString
		public RuleCall getEStringParserRuleCall_2_1_1() { return cEStringParserRuleCall_2_1_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTypeParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	{Parameter} name=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter} name=Type
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//name=Type
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Type
		public RuleCall getNameTypeParserRuleCall_1_0() { return cNameTypeParserRuleCall_1_0; }
	}
	public class StopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Stop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStopAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Alternatives cTypeAlternatives_1_0_0 = (Alternatives)cTypeAssignment_1_0.eContents().get(0);
		private final Keyword cTypeStopKeyword_1_0_0_0 = (Keyword)cTypeAlternatives_1_0_0.eContents().get(0);
		private final Keyword cTypeBreakKeyword_1_0_0_1 = (Keyword)cTypeAlternatives_1_0_0.eContents().get(1);
		private final Keyword cTypeContinueKeyword_1_0_0_2 = (Keyword)cTypeAlternatives_1_0_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cTypeReturnKeyword_1_1_0_0 = (Keyword)cTypeAssignment_1_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueTypeParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		
		//Stop:
		//	{Stop} (type=('stop' | 'break' | 'continue') | type='return' value=Type);
		@Override public ParserRule getRule() { return rule; }
		
		//{Stop} (type=('stop' | 'break' | 'continue') | type='return' value=Type)
		public Group getGroup() { return cGroup; }
		
		//{Stop}
		public Action getStopAction_0() { return cStopAction_0; }
		
		//(type=('stop' | 'break' | 'continue') | type='return' value=Type)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//type=('stop' | 'break' | 'continue')
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//('stop' | 'break' | 'continue')
		public Alternatives getTypeAlternatives_1_0_0() { return cTypeAlternatives_1_0_0; }
		
		//'stop'
		public Keyword getTypeStopKeyword_1_0_0_0() { return cTypeStopKeyword_1_0_0_0; }
		
		//'break'
		public Keyword getTypeBreakKeyword_1_0_0_1() { return cTypeBreakKeyword_1_0_0_1; }
		
		//'continue'
		public Keyword getTypeContinueKeyword_1_0_0_2() { return cTypeContinueKeyword_1_0_0_2; }
		
		//type='return' value=Type
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//type='return'
		public Assignment getTypeAssignment_1_1_0() { return cTypeAssignment_1_1_0; }
		
		//'return'
		public Keyword getTypeReturnKeyword_1_1_0_0() { return cTypeReturnKeyword_1_1_0_0; }
		
		//value=Type
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }
		
		//Type
		public RuleCall getValueTypeParserRuleCall_1_1_1_0() { return cValueTypeParserRuleCall_1_1_1_0; }
	}
	public class BooleanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCircumflexAccentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//BooleanOperator:
		//	'&&' | '||' | '!' | '^';
		@Override public ParserRule getRule() { return rule; }
		
		//'&&' | '||' | '!' | '^'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_0() { return cAmpersandAmpersandKeyword_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1() { return cVerticalLineVerticalLineKeyword_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_3() { return cCircumflexAccentKeyword_3; }
	}
	public class BooleanTestOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.BooleanTestOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//BooleanTestOperator:
		//	'==' | '<' | '<=' | '>' | '>=' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '<' | '<=' | '>' | '>=' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_5() { return cExclamationMarkEqualsSignKeyword_5; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//	EString | DOUBLE | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//EString | DOUBLE | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EString
		public RuleCall getEStringParserRuleCall_0() { return cEStringParserRuleCall_0; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_1() { return cDOUBLETerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// OK
		//FunctionCall:
		//	{FunctionCall} name=EString '(' (parameters+=Parameter ("," parameters+=Parameter)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionCall} name=EString '(' (parameters+=Parameter ("," parameters+=Parameter)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{FunctionCall}
		public Action getFunctionCallAction_0() { return cFunctionCallAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0_0() { return cParametersParameterParserRuleCall_3_0_0; }
		
		//("," parameters+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_1_0() { return cParametersParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Expression");
		private final RuleCall cBooleanExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Under her burde være OK.
		//Expression:
		//	BooleanExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall() { return cBooleanExpressionParserRuleCall; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cAndOrExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpAmpersandAmpersandKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightComparisonParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BooleanExpression Expression:
		//	Comparison (({AndOrExpression.left=current} op=("||" | "&&")) right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison (({AndOrExpression.left=current} op=("||" | "&&")) right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//(({AndOrExpression.left=current} op=("||" | "&&")) right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({AndOrExpression.left=current} op=("||" | "&&"))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{AndOrExpression.left=current}
		public Action getAndOrExpressionLeftAction_1_0_0() { return cAndOrExpressionLeftAction_1_0_0; }
		
		//op=("||" | "&&")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("||" | "&&")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"||"
		public Keyword getOpVerticalLineVerticalLineKeyword_1_0_1_0_0() { return cOpVerticalLineVerticalLineKeyword_1_0_1_0_0; }
		
		//"&&"
		public Keyword getOpAmpersandAmpersandKeyword_1_0_1_0_1() { return cOpAmpersandAmpersandKeyword_1_0_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_1_0() { return cRightComparisonParserRuleCall_1_1_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cComparisonLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEqualsParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Comparison Expression:
		//	Equals (({Comparison.left=current} op=('<' | '>')) right=Equals)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equals (({Comparison.left=current} op=('<' | '>')) right=Equals)*
		public Group getGroup() { return cGroup; }
		
		//Equals
		public RuleCall getEqualsParserRuleCall_0() { return cEqualsParserRuleCall_0; }
		
		//(({Comparison.left=current} op=('<' | '>')) right=Equals)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Comparison.left=current} op=('<' | '>'))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0_0() { return cComparisonLeftAction_1_0_0; }
		
		//op=('<' | '>')
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//('<' | '>')
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_0_1_0_0() { return cOpLessThanSignKeyword_1_0_1_0_0; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_0_1_0_1() { return cOpGreaterThanSignKeyword_1_0_1_0_1; }
		
		//right=Equals
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Equals
		public RuleCall getRightEqualsParserRuleCall_1_1_0() { return cRightEqualsParserRuleCall_1_1_0; }
	}
	public class EqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Equals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cEqualsLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_1_0_3 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Equals Expression:
		//	Addition (({Equals.left=current} op=('==' | '<=' | '>=' | '!=')) right=Addition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition (({Equals.left=current} op=('==' | '<=' | '>=' | '!=')) right=Addition)*
		public Group getGroup() { return cGroup; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }
		
		//(({Equals.left=current} op=('==' | '<=' | '>=' | '!=')) right=Addition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Equals.left=current} op=('==' | '<=' | '>=' | '!='))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_0() { return cEqualsLeftAction_1_0_0; }
		
		//op=('==' | '<=' | '>=' | '!=')
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//('==' | '<=' | '>=' | '!=')
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_0_1_0_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_0_1_0_1; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2() { return cOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_1_0_3() { return cOpExclamationMarkEqualsSignKeyword_1_0_1_0_3; }
		
		//right=Addition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_1_0() { return cRightAdditionParserRuleCall_1_1_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition Expression:
		//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixedParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMultiOrDivLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrefixedParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication Expression:
		//	Prefixed (({MultiOrDiv.left=current} op=("*" | "/")) right=Prefixed)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Prefixed (({MultiOrDiv.left=current} op=("*" | "/")) right=Prefixed)*
		public Group getGroup() { return cGroup; }
		
		//Prefixed
		public RuleCall getPrefixedParserRuleCall_0() { return cPrefixedParserRuleCall_0; }
		
		//(({MultiOrDiv.left=current} op=("*" | "/")) right=Prefixed)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({MultiOrDiv.left=current} op=("*" | "/"))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MultiOrDiv.left=current}
		public Action getMultiOrDivLeftAction_1_0_0() { return cMultiOrDivLeftAction_1_0_0; }
		
		//op=("*" | "/")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("*" | "/")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"*"
		public Keyword getOpAsteriskKeyword_1_0_1_0_0() { return cOpAsteriskKeyword_1_0_1_0_0; }
		
		//"/"
		public Keyword getOpSolidusKeyword_1_0_1_0_1() { return cOpSolidusKeyword_1_0_1_0_1; }
		
		//right=Prefixed
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Prefixed
		public RuleCall getRightPrefixedParserRuleCall_1_1_0() { return cRightPrefixedParserRuleCall_1_1_0; }
	}
	public class PrefixedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Prefixed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanNegationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionAtomicParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cArithmeticSignedAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionAtomicParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Prefixed Expression:
		//	{BooleanNegation} => "!" expression=Atomic | {ArithmeticSigned} => "-" expression=Atomic | Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanNegation} => "!" expression=Atomic | {ArithmeticSigned} => "-" expression=Atomic | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BooleanNegation} => "!" expression=Atomic
		public Group getGroup_0() { return cGroup_0; }
		
		//{BooleanNegation}
		public Action getBooleanNegationAction_0_0() { return cBooleanNegationAction_0_0; }
		
		//=> "!"
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }
		
		//expression=Atomic
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//Atomic
		public RuleCall getExpressionAtomicParserRuleCall_0_2_0() { return cExpressionAtomicParserRuleCall_0_2_0; }
		
		//{ArithmeticSigned} => "-" expression=Atomic
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticSigned}
		public Action getArithmeticSignedAction_1_0() { return cArithmeticSignedAction_1_0; }
		
		//=> "-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//expression=Atomic
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Atomic
		public RuleCall getExpressionAtomicParserRuleCall_1_2_0() { return cExpressionAtomicParserRuleCall_1_2_0; }
		
		///* right associativity */ Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_3_1_0_0 = (Keyword)cValueAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_3_1_0_1 = (Keyword)cValueAlternatives_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cVariableReferenceAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cRefAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cRefVariableCrossReference_4_1_0 = (CrossReference)cRefAssignment_4_1.eContents().get(0);
		private final RuleCall cRefVariableIDTerminalRuleCall_4_1_0_1 = (RuleCall)cRefVariableCrossReference_4_1_0.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Atomic Expression:
		//	'(' Expression ')' | {NumberLiteral} value=INT | {StringLiteral} value=STRING | {BooleanLiteral} value=('true' |
		//	'false') | {VariableReference} ref=[Variable] | FunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {NumberLiteral} value=INT | {StringLiteral} value=STRING | {BooleanLiteral} value=('true' |
		//'false') | {VariableReference} ref=[Variable] | FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{NumberLiteral} value=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{NumberLiteral}
		public Action getNumberLiteralAction_1_0() { return cNumberLiteralAction_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
		
		//{StringLiteral} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_2_0() { return cStringLiteralAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{BooleanLiteral} value=('true' | 'false')
		public Group getGroup_3() { return cGroup_3; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_3_0() { return cBooleanLiteralAction_3_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_3_1_0_0() { return cValueTrueKeyword_3_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_3_1_0_1() { return cValueFalseKeyword_3_1_0_1; }
		
		//{VariableReference} ref=[Variable]
		public Group getGroup_4() { return cGroup_4; }
		
		//{VariableReference}
		public Action getVariableReferenceAction_4_0() { return cVariableReferenceAction_4_0; }
		
		//ref=[Variable]
		public Assignment getRefAssignment_4_1() { return cRefAssignment_4_1; }
		
		//[Variable]
		public CrossReference getRefVariableCrossReference_4_1_0() { return cRefVariableCrossReference_4_1_0; }
		
		//ID
		public RuleCall getRefVariableIDTerminalRuleCall_4_1_0_1() { return cRefVariableIDTerminalRuleCall_4_1_0_1; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_5() { return cFunctionCallParserRuleCall_5; }
	}
	
	
	private final ModelElements pModel;
	private final FunctionElements pFunction;
	private final FeatureElements pFeature;
	private final StatementElements pStatement;
	private final VariableElements pVariable;
	private final IfExpressionElements pIfExpression;
	private final ForElements pFor;
	private final WhileElements pWhile;
	private final ParameterElements pParameter;
	private final StopElements pStop;
	private final BooleanOperatorElements pBooleanOperator;
	private final BooleanTestOperatorElements pBooleanTestOperator;
	private final TypeElements pType;
	private final EStringElements pEString;
	private final TerminalRule tDOUBLE;
	private final FunctionCallElements pFunctionCall;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	private final ExpressionElements pExpression;
	private final BooleanExpressionElements pBooleanExpression;
	private final ComparisonElements pComparison;
	private final EqualsElements pEquals;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrefixedElements pPrefixed;
	private final AtomicElements pAtomic;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PcodeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFunction = new FunctionElements();
		this.pFeature = new FeatureElements();
		this.pStatement = new StatementElements();
		this.pVariable = new VariableElements();
		this.pIfExpression = new IfExpressionElements();
		this.pFor = new ForElements();
		this.pWhile = new WhileElements();
		this.pParameter = new ParameterElements();
		this.pStop = new StopElements();
		this.pBooleanOperator = new BooleanOperatorElements();
		this.pBooleanTestOperator = new BooleanTestOperatorElements();
		this.pType = new TypeElements();
		this.pEString = new EStringElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.DOUBLE");
		this.pFunctionCall = new FunctionCallElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.END");
		this.pExpression = new ExpressionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pComparison = new ComparisonElements();
		this.pEquals = new EqualsElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrefixed = new PrefixedElements();
		this.pAtomic = new AtomicElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tdt4250.pseudocode.Pcode".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///* Det er fortsatt litt rot i modellen, sorry! Will fix!
	// * Tror at Expression skal være ok nå ;)
	// */ // OK
	//Model:
	//	{Model} functions+=Function*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// OK
	//Function:
	//	{Function} name=EString
	//	'(' (parameters+=Parameter ("," parameters+=Parameter)*)*
	//	')'
	//	//('\n' ('\n')*)
	//	BEGIN
	//	features+=Feature*
	//	END;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Feature:
	//	Statement | Variable;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//Statement:
	//	IfExpression | For | While | Stop;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Variable:
	//	{Variable} name=EString ('=' value=Expression)? // Er lov å skrive x=y=2?
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	///*
	//// TODO: lag ecore modell
	//CollectionLitteral:
	//	SetLitteral | ListLitteral
	//;
	//
	//// TODO: lag ecore modell
	//SetLitteral:
	//	{SetLitteral}
	//	'{' (elements+=Expression (',' elements+=Expression )*)? '}'
	//;
	//
	//// TODO: lag ecore modell
	//ListLitteral:
	//	{ListLitteral}
	//	'[' (elements+=Expression (',' elements+=Expression )*)? ']'
	//;
	//*/ IfExpression:
	//	{IfExpression}
	//	'if' condition=Expression ':' // må sjekke etter newline elns for å fjerne ':'
	//	then=Expression (=> 'else' else=Expression)?;
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//For:
	//	{For}
	//	'for' '(' (EString '=' INT ';' EString BooleanOperator Type ';' EString ('++' | '--' | '+' INT | '-' INT) | EString
	//	':' EString | 'all' EString | 'interval' INT 'to' INT 'in' EString) ')';
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//While:
	//	{While}
	//	'while' ('true' | '!'? EString);
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//Parameter:
	//	{Parameter} name=Type;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Stop:
	//	{Stop} (type=('stop' | 'break' | 'continue') | type='return' value=Type);
	public StopElements getStopAccess() {
		return pStop;
	}
	
	public ParserRule getStopRule() {
		return getStopAccess().getRule();
	}
	
	//BooleanOperator:
	//	'&&' | '||' | '!' | '^';
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return pBooleanOperator;
	}
	
	public ParserRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}
	
	//BooleanTestOperator:
	//	'==' | '<' | '<=' | '>' | '>=' | '!=';
	public BooleanTestOperatorElements getBooleanTestOperatorAccess() {
		return pBooleanTestOperator;
	}
	
	public ParserRule getBooleanTestOperatorRule() {
		return getBooleanTestOperatorAccess().getRule();
	}
	
	//Type:
	//	EString | DOUBLE | INT;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal DOUBLE:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//// OK
	//FunctionCall:
	//	{FunctionCall} name=EString '(' (parameters+=Parameter ("," parameters+=Parameter)*)? ')';
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//terminal BEGIN:
	//	'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//	'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//// Under her burde være OK.
	//Expression:
	//	BooleanExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BooleanExpression Expression:
	//	Comparison (({AndOrExpression.left=current} op=("||" | "&&")) right=Comparison)*;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//Comparison Expression:
	//	Equals (({Comparison.left=current} op=('<' | '>')) right=Equals)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Equals Expression:
	//	Addition (({Equals.left=current} op=('==' | '<=' | '>=' | '!=')) right=Addition)*;
	public EqualsElements getEqualsAccess() {
		return pEquals;
	}
	
	public ParserRule getEqualsRule() {
		return getEqualsAccess().getRule();
	}
	
	//Addition Expression:
	//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication Expression:
	//	Prefixed (({MultiOrDiv.left=current} op=("*" | "/")) right=Prefixed)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Prefixed Expression:
	//	{BooleanNegation} => "!" expression=Atomic | {ArithmeticSigned} => "-" expression=Atomic | Atomic;
	public PrefixedElements getPrefixedAccess() {
		return pPrefixed;
	}
	
	public ParserRule getPrefixedRule() {
		return getPrefixedAccess().getRule();
	}
	
	//Atomic Expression:
	//	'(' Expression ')' | {NumberLiteral} value=INT | {StringLiteral} value=STRING | {BooleanLiteral} value=('true' |
	//	'false') | {VariableReference} ref=[Variable] | FunctionCall;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
