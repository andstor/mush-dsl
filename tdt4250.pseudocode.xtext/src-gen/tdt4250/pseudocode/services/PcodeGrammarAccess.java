/*
 * generated by Xtext 2.22.0
 */
package tdt4250.pseudocode.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PcodeGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPackageKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPackageAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPackageQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cPackageAssignment_1_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionsFunctionParserRuleCall_2_0 = (RuleCall)cFunctionsAssignment_2.eContents().get(0);
		
		////generate pseudocode "http://www.pseudocode.tdt4250/xtext/Pcode"
		//Model:
		//	{Model} ('package' package=QualifiedName)?
		//	functions+=Function*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} ('package' package=QualifiedName)? functions+=Function*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//('package' package=QualifiedName)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'package'
		public Keyword getPackageKeyword_1_0() { return cPackageKeyword_1_0; }
		
		//package=QualifiedName
		public Assignment getPackageAssignment_1_1() { return cPackageAssignment_1_1; }
		
		//QualifiedName
		public RuleCall getPackageQualifiedNameParserRuleCall_1_1_0() { return cPackageQualifiedNameParserRuleCall_1_1_0; }
		
		//functions+=Function*
		public Assignment getFunctionsAssignment_2() { return cFunctionsAssignment_2; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_2_0() { return cFunctionsFunctionParserRuleCall_2_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExecutableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cExecutableExecutableKeyword_1_0 = (Keyword)cExecutableAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final RuleCall cBEGINTerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Assignment cFeaturesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_6_1_0 = (RuleCall)cFeaturesAssignment_6_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		
		//Function:
		//	{Function} executable?='executable'?
		//	name=ID
		//	'(' (parameters+=Parameter ("," parameters+=Parameter)*)?
		//	')' (BEGIN
		//	features+=Feature*
		//	END)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Function} executable?='executable'? name=ID '(' (parameters+=Parameter ("," parameters+=Parameter)*)? ')' (BEGIN
		//features+=Feature* END)*
		public Group getGroup() { return cGroup; }
		
		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//executable?='executable'?
		public Assignment getExecutableAssignment_1() { return cExecutableAssignment_1; }
		
		//'executable'
		public Keyword getExecutableExecutableKeyword_1_0() { return cExecutableExecutableKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_0_0() { return cParametersParameterParserRuleCall_4_0_0; }
		
		//("," parameters+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_1_0() { return cParametersParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//(BEGIN features+=Feature* END)*
		public Group getGroup_6() { return cGroup_6; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_6_0() { return cBEGINTerminalRuleCall_6_0; }
		
		//features+=Feature*
		public Assignment getFeaturesAssignment_6_1() { return cFeaturesAssignment_6_1; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_6_1_0() { return cFeaturesFeatureParserRuleCall_6_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6_2() { return cENDTerminalRuleCall_6_2; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Feature:
		//	Statement | Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Statement | Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement:
		//	IfStatement | ForStatement | WhileStatement | Stop;
		@Override public ParserRule getRule() { return rule; }
		
		//IfStatement | ForStatement | WhileStatement | Stop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0() { return cIfStatementParserRuleCall_0; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_1() { return cForStatementParserRuleCall_1; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_2() { return cWhileStatementParserRuleCall_2; }
		
		//Stop
		public RuleCall getStopParserRuleCall_3() { return cStopParserRuleCall_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCollectionAddParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCollectionRemoveParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cValueExchangeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expression:
		//	Variable | FunctionCall | Print | CollectionAdd | CollectionRemove | ValueExchange;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable | FunctionCall | Print | CollectionAdd | CollectionRemove | ValueExchange
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_1() { return cFunctionCallParserRuleCall_1; }
		
		//Print
		public RuleCall getPrintParserRuleCall_2() { return cPrintParserRuleCall_2; }
		
		//CollectionAdd
		public RuleCall getCollectionAddParserRuleCall_3() { return cCollectionAddParserRuleCall_3; }
		
		//CollectionRemove
		public RuleCall getCollectionRemoveParserRuleCall_4() { return cCollectionRemoveParserRuleCall_4; }
		
		//ValueExchange
		public RuleCall getValueExchangeParserRuleCall_5() { return cValueExchangeParserRuleCall_5; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0_0 = (RuleCall)cNameAssignment_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpEqualsKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpIsKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cOpPlusSignEqualsSignKeyword_1_0_1_0_3 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(3);
		private final Keyword cOpHyphenMinusEqualsSignKeyword_1_0_1_0_4 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(4);
		private final Assignment cValueAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cValueLiteralExpressionParserRuleCall_1_0_2_0 = (RuleCall)cValueAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0_0 = (RuleCall)cNameAssignment_1_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_1_0 = (Alternatives)cOpAssignment_1_1_1.eContents().get(0);
		private final Keyword cOpPlusSignPlusSignKeyword_1_1_1_0_0 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusHyphenMinusKeyword_1_1_1_0_1 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(1);
		
		//// Primarily variable assignment
		//Variable Expression:
		//	{Variable} (name=ID op=('=' | 'equals' | 'is' | '+=' | '-=') value=LiteralExpression | name=ID op=('++' | '--'));
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable} (name=ID op=('=' | 'equals' | 'is' | '+=' | '-=') value=LiteralExpression | name=ID op=('++' | '--'))
		public Group getGroup() { return cGroup; }
		
		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//(name=ID op=('=' | 'equals' | 'is' | '+=' | '-=') value=LiteralExpression | name=ID op=('++' | '--'))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=ID op=('=' | 'equals' | 'is' | '+=' | '-=') value=LiteralExpression
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_0_0() { return cNameAssignment_1_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0_0() { return cNameIDTerminalRuleCall_1_0_0_0; }
		
		//op=('=' | 'equals' | 'is' | '+=' | '-=')
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//('=' | 'equals' | 'is' | '+=' | '-=')
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_1_0_1_0_0() { return cOpEqualsSignKeyword_1_0_1_0_0; }
		
		//'equals'
		public Keyword getOpEqualsKeyword_1_0_1_0_1() { return cOpEqualsKeyword_1_0_1_0_1; }
		
		//'is'
		public Keyword getOpIsKeyword_1_0_1_0_2() { return cOpIsKeyword_1_0_1_0_2; }
		
		//'+='
		public Keyword getOpPlusSignEqualsSignKeyword_1_0_1_0_3() { return cOpPlusSignEqualsSignKeyword_1_0_1_0_3; }
		
		//'-='
		public Keyword getOpHyphenMinusEqualsSignKeyword_1_0_1_0_4() { return cOpHyphenMinusEqualsSignKeyword_1_0_1_0_4; }
		
		//value=LiteralExpression
		public Assignment getValueAssignment_1_0_2() { return cValueAssignment_1_0_2; }
		
		//LiteralExpression
		public RuleCall getValueLiteralExpressionParserRuleCall_1_0_2_0() { return cValueLiteralExpressionParserRuleCall_1_0_2_0; }
		
		//name=ID op=('++' | '--')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_1_0() { return cNameAssignment_1_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0_0() { return cNameIDTerminalRuleCall_1_1_0_0; }
		
		//op=('++' | '--')
		public Assignment getOpAssignment_1_1_1() { return cOpAssignment_1_1_1; }
		
		//('++' | '--')
		public Alternatives getOpAlternatives_1_1_1_0() { return cOpAlternatives_1_1_1_0; }
		
		//'++'
		public Keyword getOpPlusSignPlusSignKeyword_1_1_1_0_0() { return cOpPlusSignPlusSignKeyword_1_1_1_0_0; }
		
		//'--'
		public Keyword getOpHyphenMinusHyphenMinusKeyword_1_1_1_0_1() { return cOpHyphenMinusHyphenMinusKeyword_1_1_1_0_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//// Variable declaration
		//Parameter Expression:
		//	{Variable} type=Type name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable} type=Type name=ID
		public Group getGroup() { return cGroup; }
		
		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameIfKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionLiteralExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenFeatureParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Assignment cOtherwiseAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cOtherwiseFeatureParserRuleCall_7_2_0 = (RuleCall)cOtherwiseAssignment_7_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_7_3 = (RuleCall)cGroup_7.eContents().get(3);
		
		//IfStatement:
		//	{IfStatement} name='if' condition=LiteralExpression 'then'?
		//	BEGIN
		//	then+=Feature*
		//	END ('else'
		//	BEGIN
		//	otherwise+=Feature*
		//	END)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfStatement} name='if' condition=LiteralExpression 'then'? BEGIN then+=Feature* END ('else' BEGIN otherwise+=Feature*
		//END)?
		public Group getGroup() { return cGroup; }
		
		//{IfStatement}
		public Action getIfStatementAction_0() { return cIfStatementAction_0; }
		
		//name='if'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'if'
		public Keyword getNameIfKeyword_1_0() { return cNameIfKeyword_1_0; }
		
		//condition=LiteralExpression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//LiteralExpression
		public RuleCall getConditionLiteralExpressionParserRuleCall_2_0() { return cConditionLiteralExpressionParserRuleCall_2_0; }
		
		//'then'?
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//then+=Feature*
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }
		
		//Feature
		public RuleCall getThenFeatureParserRuleCall_5_0() { return cThenFeatureParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
		
		//('else' BEGIN otherwise+=Feature* END)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'else'
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_7_1() { return cBEGINTerminalRuleCall_7_1; }
		
		//otherwise+=Feature*
		public Assignment getOtherwiseAssignment_7_2() { return cOtherwiseAssignment_7_2; }
		
		//Feature
		public RuleCall getOtherwiseFeatureParserRuleCall_7_2_0() { return cOtherwiseFeatureParserRuleCall_7_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_7_3() { return cENDTerminalRuleCall_7_3; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIntervalKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromArithmeticExpressionParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToArithmeticExpressionParserRuleCall_5_0 = (RuleCall)cToAssignment_5.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cBlockAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBlockFeatureParserRuleCall_7_0 = (RuleCall)cBlockAssignment_7.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//ForStatement:
		//	{ForStatement}
		//	'for' 'interval'? from=ArithmeticExpression 'to' to=ArithmeticExpression
		//	BEGIN
		//	block+=Feature*
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//{ForStatement} 'for' 'interval'? from=ArithmeticExpression 'to' to=ArithmeticExpression BEGIN block+=Feature* END
		public Group getGroup() { return cGroup; }
		
		//{ForStatement}
		public Action getForStatementAction_0() { return cForStatementAction_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//'interval'?
		public Keyword getIntervalKeyword_2() { return cIntervalKeyword_2; }
		
		//from=ArithmeticExpression
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }
		
		//ArithmeticExpression
		public RuleCall getFromArithmeticExpressionParserRuleCall_3_0() { return cFromArithmeticExpressionParserRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//to=ArithmeticExpression
		public Assignment getToAssignment_5() { return cToAssignment_5; }
		
		//ArithmeticExpression
		public RuleCall getToArithmeticExpressionParserRuleCall_5_0() { return cToArithmeticExpressionParserRuleCall_5_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_6() { return cBEGINTerminalRuleCall_6; }
		
		//block+=Feature*
		public Assignment getBlockAssignment_7() { return cBlockAssignment_7; }
		
		//Feature
		public RuleCall getBlockFeatureParserRuleCall_7_0() { return cBlockFeatureParserRuleCall_7_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_8() { return cENDTerminalRuleCall_8; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionLiteralExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockFeatureParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//WhileStatement:
		//	{WhileStatement}
		//	'while' condition=LiteralExpression
		//	BEGIN
		//	block+=Feature*
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//{WhileStatement} 'while' condition=LiteralExpression BEGIN block+=Feature* END
		public Group getGroup() { return cGroup; }
		
		//{WhileStatement}
		public Action getWhileStatementAction_0() { return cWhileStatementAction_0; }
		
		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//condition=LiteralExpression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//LiteralExpression
		public RuleCall getConditionLiteralExpressionParserRuleCall_2_0() { return cConditionLiteralExpressionParserRuleCall_2_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//block+=Feature*
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//Feature
		public RuleCall getBlockFeatureParserRuleCall_4_0() { return cBlockFeatureParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class StopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Stop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStopAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Alternatives cTypeAlternatives_1_0_0 = (Alternatives)cTypeAssignment_1_0.eContents().get(0);
		private final Keyword cTypeStopKeyword_1_0_0_0 = (Keyword)cTypeAlternatives_1_0_0.eContents().get(0);
		private final Keyword cTypeBreakKeyword_1_0_0_1 = (Keyword)cTypeAlternatives_1_0_0.eContents().get(1);
		private final Keyword cTypeContinueKeyword_1_0_0_2 = (Keyword)cTypeAlternatives_1_0_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cTypeReturnKeyword_1_1_0_0 = (Keyword)cTypeAssignment_1_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueLiteralExpressionParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		
		//Stop:
		//	{Stop} (type=('stop' | 'break' | 'continue') | type='return' value=LiteralExpression);
		@Override public ParserRule getRule() { return rule; }
		
		//{Stop} (type=('stop' | 'break' | 'continue') | type='return' value=LiteralExpression)
		public Group getGroup() { return cGroup; }
		
		//{Stop}
		public Action getStopAction_0() { return cStopAction_0; }
		
		//(type=('stop' | 'break' | 'continue') | type='return' value=LiteralExpression)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//type=('stop' | 'break' | 'continue')
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//('stop' | 'break' | 'continue')
		public Alternatives getTypeAlternatives_1_0_0() { return cTypeAlternatives_1_0_0; }
		
		//'stop'
		public Keyword getTypeStopKeyword_1_0_0_0() { return cTypeStopKeyword_1_0_0_0; }
		
		//'break'
		public Keyword getTypeBreakKeyword_1_0_0_1() { return cTypeBreakKeyword_1_0_0_1; }
		
		//'continue'
		public Keyword getTypeContinueKeyword_1_0_0_2() { return cTypeContinueKeyword_1_0_0_2; }
		
		//type='return' value=LiteralExpression
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//type='return'
		public Assignment getTypeAssignment_1_1_0() { return cTypeAssignment_1_1_0; }
		
		//'return'
		public Keyword getTypeReturnKeyword_1_1_0_0() { return cTypeReturnKeyword_1_1_0_0; }
		
		//value=LiteralExpression
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }
		
		//LiteralExpression
		public RuleCall getValueLiteralExpressionParserRuleCall_1_1_1_0() { return cValueLiteralExpressionParserRuleCall_1_1_1_0; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNamePrintKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNewlineAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNewlineLineKeyword_1_0 = (Keyword)cNewlineAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLiteralExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Print:
		//	name='print' newline?='line'? value=LiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//name='print' newline?='line'? value=LiteralExpression
		public Group getGroup() { return cGroup; }
		
		//name='print'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'print'
		public Keyword getNamePrintKeyword_0_0() { return cNamePrintKeyword_0_0; }
		
		//newline?='line'?
		public Assignment getNewlineAssignment_1() { return cNewlineAssignment_1; }
		
		//'line'
		public Keyword getNewlineLineKeyword_1_0() { return cNewlineLineKeyword_1_0; }
		
		//value=LiteralExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//LiteralExpression
		public RuleCall getValueLiteralExpressionParserRuleCall_2_0() { return cValueLiteralExpressionParserRuleCall_2_0; }
	}
	public class CollectionAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.CollectionAdd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCollectionAddAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCollectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cCollectionVariableCrossReference_1_0 = (CrossReference)cCollectionAssignment_1.eContents().get(0);
		private final RuleCall cCollectionVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cCollectionVariableCrossReference_1_0.eContents().get(1);
		private final Keyword cAddKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueLiteralExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//CollectionAdd Expression:
		//	{CollectionAdd} collection=[Variable] 'add' value=LiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{CollectionAdd} collection=[Variable] 'add' value=LiteralExpression
		public Group getGroup() { return cGroup; }
		
		//{CollectionAdd}
		public Action getCollectionAddAction_0() { return cCollectionAddAction_0; }
		
		//collection=[Variable]
		public Assignment getCollectionAssignment_1() { return cCollectionAssignment_1; }
		
		//[Variable]
		public CrossReference getCollectionVariableCrossReference_1_0() { return cCollectionVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getCollectionVariableIDTerminalRuleCall_1_0_1() { return cCollectionVariableIDTerminalRuleCall_1_0_1; }
		
		//'add'
		public Keyword getAddKeyword_2() { return cAddKeyword_2; }
		
		//value=LiteralExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//LiteralExpression
		public RuleCall getValueLiteralExpressionParserRuleCall_3_0() { return cValueLiteralExpressionParserRuleCall_3_0; }
	}
	public class CollectionRemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.CollectionRemove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCollectionRemoveAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCollectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cCollectionVariableCrossReference_1_0 = (CrossReference)cCollectionAssignment_1.eContents().get(0);
		private final RuleCall cCollectionVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cCollectionVariableCrossReference_1_0.eContents().get(1);
		private final Keyword cRemoveKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueLiteralExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//CollectionRemove Expression:
		//	{CollectionRemove} collection=[Variable] 'remove' value=LiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{CollectionRemove} collection=[Variable] 'remove' value=LiteralExpression
		public Group getGroup() { return cGroup; }
		
		//{CollectionRemove}
		public Action getCollectionRemoveAction_0() { return cCollectionRemoveAction_0; }
		
		//collection=[Variable]
		public Assignment getCollectionAssignment_1() { return cCollectionAssignment_1; }
		
		//[Variable]
		public CrossReference getCollectionVariableCrossReference_1_0() { return cCollectionVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getCollectionVariableIDTerminalRuleCall_1_0_1() { return cCollectionVariableIDTerminalRuleCall_1_0_1; }
		
		//'remove'
		public Keyword getRemoveKeyword_2() { return cRemoveKeyword_2; }
		
		//value=LiteralExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//LiteralExpression
		public RuleCall getValueLiteralExpressionParserRuleCall_3_0() { return cValueLiteralExpressionParserRuleCall_3_0; }
	}
	public class ValueExchangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.ValueExchange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueExchangeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExchangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCollectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCollectionLiteralExpressionParserRuleCall_2_0 = (RuleCall)cCollectionAssignment_2.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueLiteralExpressionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		////TODO: change name to collection1 and collection 2
		//ValueExchange Expression:
		//	{ValueExchange}
		//	'exchange' collection=LiteralExpression 'with' value=LiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{ValueExchange} 'exchange' collection=LiteralExpression 'with' value=LiteralExpression
		public Group getGroup() { return cGroup; }
		
		//{ValueExchange}
		public Action getValueExchangeAction_0() { return cValueExchangeAction_0; }
		
		//'exchange'
		public Keyword getExchangeKeyword_1() { return cExchangeKeyword_1; }
		
		//collection=LiteralExpression
		public Assignment getCollectionAssignment_2() { return cCollectionAssignment_2; }
		
		//LiteralExpression
		public RuleCall getCollectionLiteralExpressionParserRuleCall_2_0() { return cCollectionLiteralExpressionParserRuleCall_2_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//value=LiteralExpression
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//LiteralExpression
		public RuleCall getValueLiteralExpressionParserRuleCall_4_0() { return cValueLiteralExpressionParserRuleCall_4_0; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCollectionAccessorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// -- Literal Expressions ---
		//LiteralExpression Expression:
		//	Collection | CollectionAccessor | BooleanExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//Collection | CollectionAccessor | BooleanExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Collection
		public RuleCall getCollectionParserRuleCall_0() { return cCollectionParserRuleCall_0; }
		
		//CollectionAccessor
		public RuleCall getCollectionAccessorParserRuleCall_1() { return cCollectionAccessorParserRuleCall_1; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_2() { return cBooleanExpressionParserRuleCall_2; }
	}
	public class CollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Collection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionLitteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Collection Expression:
		//	CollectionLitteral | List;
		@Override public ParserRule getRule() { return rule; }
		
		//CollectionLitteral | List
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CollectionLitteral
		public RuleCall getCollectionLitteralParserRuleCall_0() { return cCollectionLitteralParserRuleCall_0; }
		
		//List
		public RuleCall getListParserRuleCall_1() { return cListParserRuleCall_1; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cArrayKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cListKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cTableKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cThatKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cContainsKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cElementsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cElementsLiteralExpressionParserRuleCall_5_2_0 = (RuleCall)cElementsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cElementsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cElementsLiteralExpressionParserRuleCall_5_3_1_0 = (RuleCall)cElementsAssignment_5_3_1.eContents().get(0);
		
		//List Collection:
		//	{List}
		//	'new' ('array' | 'list' | 'table') 'with' type=Type ('that' 'contains' elements+=LiteralExpression (','
		//	elements+=LiteralExpression)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{List} 'new' ('array' | 'list' | 'table') 'with' type=Type ('that' 'contains' elements+=LiteralExpression (','
		//elements+=LiteralExpression)*)?
		public Group getGroup() { return cGroup; }
		
		//{List}
		public Action getListAction_0() { return cListAction_0; }
		
		//'new'
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }
		
		//('array' | 'list' | 'table')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'array'
		public Keyword getArrayKeyword_2_0() { return cArrayKeyword_2_0; }
		
		//'list'
		public Keyword getListKeyword_2_1() { return cListKeyword_2_1; }
		
		//'table'
		public Keyword getTableKeyword_2_2() { return cTableKeyword_2_2; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }
		
		//('that' 'contains' elements+=LiteralExpression (',' elements+=LiteralExpression)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'that'
		public Keyword getThatKeyword_5_0() { return cThatKeyword_5_0; }
		
		//'contains'
		public Keyword getContainsKeyword_5_1() { return cContainsKeyword_5_1; }
		
		//elements+=LiteralExpression
		public Assignment getElementsAssignment_5_2() { return cElementsAssignment_5_2; }
		
		//LiteralExpression
		public RuleCall getElementsLiteralExpressionParserRuleCall_5_2_0() { return cElementsLiteralExpressionParserRuleCall_5_2_0; }
		
		//(',' elements+=LiteralExpression)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//','
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//elements+=LiteralExpression
		public Assignment getElementsAssignment_5_3_1() { return cElementsAssignment_5_3_1; }
		
		//LiteralExpression
		public RuleCall getElementsLiteralExpressionParserRuleCall_5_3_1_0() { return cElementsLiteralExpressionParserRuleCall_5_3_1_0; }
	}
	public class CollectionLitteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.CollectionLitteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetLitteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListLitteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////TODO: implement Set
		//CollectionLitteral Collection:
		//	SetLitteral | ListLitteral;
		@Override public ParserRule getRule() { return rule; }
		
		//SetLitteral | ListLitteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SetLitteral
		public RuleCall getSetLitteralParserRuleCall_0() { return cSetLitteralParserRuleCall_0; }
		
		//ListLitteral
		public RuleCall getListLitteralParserRuleCall_1() { return cListLitteralParserRuleCall_1; }
	}
	public class SetLitteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.SetLitteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetLitteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsLiteralExpressionParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsLiteralExpressionParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SetLitteral Collection:
		//	{SetLitteral}
		//	'{' elements+=LiteralExpression (',' elements+=LiteralExpression)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SetLitteral} '{' elements+=LiteralExpression (',' elements+=LiteralExpression)* '}'
		public Group getGroup() { return cGroup; }
		
		//{SetLitteral}
		public Action getSetLitteralAction_0() { return cSetLitteralAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=LiteralExpression
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//LiteralExpression
		public RuleCall getElementsLiteralExpressionParserRuleCall_2_0() { return cElementsLiteralExpressionParserRuleCall_2_0; }
		
		//(',' elements+=LiteralExpression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//elements+=LiteralExpression
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }
		
		//LiteralExpression
		public RuleCall getElementsLiteralExpressionParserRuleCall_3_1_0() { return cElementsLiteralExpressionParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ListLitteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.ListLitteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListLitteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsLiteralExpressionParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsLiteralExpressionParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListLitteral Collection:
		//	{ListLitteral}
		//	'[' elements+=LiteralExpression (',' elements+=LiteralExpression)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{ListLitteral} '[' elements+=LiteralExpression (',' elements+=LiteralExpression)* ']'
		public Group getGroup() { return cGroup; }
		
		//{ListLitteral}
		public Action getListLitteralAction_0() { return cListLitteralAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//elements+=LiteralExpression
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//LiteralExpression
		public RuleCall getElementsLiteralExpressionParserRuleCall_2_0() { return cElementsLiteralExpressionParserRuleCall_2_0; }
		
		//(',' elements+=LiteralExpression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//elements+=LiteralExpression
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }
		
		//LiteralExpression
		public RuleCall getElementsLiteralExpressionParserRuleCall_3_1_0() { return cElementsLiteralExpressionParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class CollectionAccessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.CollectionAccessor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCollectionAccessorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cCollectionAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cCollectionVariableCrossReference_1_0_0_0 = (CrossReference)cCollectionAssignment_1_0_0.eContents().get(0);
		private final RuleCall cCollectionVariableIDTerminalRuleCall_1_0_0_0_1 = (RuleCall)cCollectionVariableCrossReference_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cAccessorAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cAccessorLiteralExpressionParserRuleCall_1_0_1_1_0 = (RuleCall)cAccessorAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_1_2 = (Keyword)cGroup_1_0_1.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cCollectionAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final CrossReference cCollectionVariableCrossReference_1_1_0_0 = (CrossReference)cCollectionAssignment_1_1_0.eContents().get(0);
		private final RuleCall cCollectionVariableIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cCollectionVariableCrossReference_1_1_0_0.eContents().get(1);
		private final Keyword cAtKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cIndexKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cAccessorAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cAccessorLiteralExpressionParserRuleCall_1_1_3_0 = (RuleCall)cAccessorAssignment_1_1_3.eContents().get(0);
		private final Group cGroup_1_1_4 = (Group)cGroup_1_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_1_4_0 = (Keyword)cGroup_1_1_4.eContents().get(0);
		private final Assignment cAccessorAssignment_1_1_4_1 = (Assignment)cGroup_1_1_4.eContents().get(1);
		private final RuleCall cAccessorLiteralExpressionParserRuleCall_1_1_4_1_0 = (RuleCall)cAccessorAssignment_1_1_4_1.eContents().get(0);
		
		//CollectionAccessor Expression:
		//	{CollectionAccessor} (collection=[Variable] ('[' accessor+=LiteralExpression ']')+ | collection=[Variable] 'at'
		//	'index'? accessor+=LiteralExpression (',' accessor+=LiteralExpression)*);
		@Override public ParserRule getRule() { return rule; }
		
		//{CollectionAccessor} (collection=[Variable] ('[' accessor+=LiteralExpression ']')+ | collection=[Variable] 'at' 'index'?
		//accessor+=LiteralExpression (',' accessor+=LiteralExpression)*)
		public Group getGroup() { return cGroup; }
		
		//{CollectionAccessor}
		public Action getCollectionAccessorAction_0() { return cCollectionAccessorAction_0; }
		
		//(collection=[Variable] ('[' accessor+=LiteralExpression ']')+ | collection=[Variable] 'at' 'index'?
		//accessor+=LiteralExpression (',' accessor+=LiteralExpression)*)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//collection=[Variable] ('[' accessor+=LiteralExpression ']')+
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//collection=[Variable]
		public Assignment getCollectionAssignment_1_0_0() { return cCollectionAssignment_1_0_0; }
		
		//[Variable]
		public CrossReference getCollectionVariableCrossReference_1_0_0_0() { return cCollectionVariableCrossReference_1_0_0_0; }
		
		//ID
		public RuleCall getCollectionVariableIDTerminalRuleCall_1_0_0_0_1() { return cCollectionVariableIDTerminalRuleCall_1_0_0_0_1; }
		
		//('[' accessor+=LiteralExpression ']')+
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_1_0() { return cLeftSquareBracketKeyword_1_0_1_0; }
		
		//accessor+=LiteralExpression
		public Assignment getAccessorAssignment_1_0_1_1() { return cAccessorAssignment_1_0_1_1; }
		
		//LiteralExpression
		public RuleCall getAccessorLiteralExpressionParserRuleCall_1_0_1_1_0() { return cAccessorLiteralExpressionParserRuleCall_1_0_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_1_2() { return cRightSquareBracketKeyword_1_0_1_2; }
		
		//// used instead of list[i]. Eks. list[i][j]  equals list at i,j 
		//collection=[Variable] 'at' 'index'? accessor+=LiteralExpression (',' accessor+=LiteralExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//// used instead of list[i]. Eks. list[i][j]  equals list at i,j 
		//collection=[Variable]
		public Assignment getCollectionAssignment_1_1_0() { return cCollectionAssignment_1_1_0; }
		
		//[Variable]
		public CrossReference getCollectionVariableCrossReference_1_1_0_0() { return cCollectionVariableCrossReference_1_1_0_0; }
		
		//ID
		public RuleCall getCollectionVariableIDTerminalRuleCall_1_1_0_0_1() { return cCollectionVariableIDTerminalRuleCall_1_1_0_0_1; }
		
		//'at'
		public Keyword getAtKeyword_1_1_1() { return cAtKeyword_1_1_1; }
		
		//'index'?
		public Keyword getIndexKeyword_1_1_2() { return cIndexKeyword_1_1_2; }
		
		//accessor+=LiteralExpression
		public Assignment getAccessorAssignment_1_1_3() { return cAccessorAssignment_1_1_3; }
		
		//LiteralExpression
		public RuleCall getAccessorLiteralExpressionParserRuleCall_1_1_3_0() { return cAccessorLiteralExpressionParserRuleCall_1_1_3_0; }
		
		//(',' accessor+=LiteralExpression)*
		public Group getGroup_1_1_4() { return cGroup_1_1_4; }
		
		//','
		public Keyword getCommaKeyword_1_1_4_0() { return cCommaKeyword_1_1_4_0; }
		
		//accessor+=LiteralExpression
		public Assignment getAccessorAssignment_1_1_4_1() { return cAccessorAssignment_1_1_4_1; }
		
		//LiteralExpression
		public RuleCall getAccessorLiteralExpressionParserRuleCall_1_1_4_1_0() { return cAccessorLiteralExpressionParserRuleCall_1_1_4_1_0; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cAndOrExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final RuleCall cOpOrOperatorParserRuleCall_1_0_1_0_0 = (RuleCall)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final RuleCall cOpAndOperatorParserRuleCall_1_0_1_0_1 = (RuleCall)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightComparisonParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		////----- Logic and Math------
		//BooleanExpression Expression:
		//	Comparison (({AndOrExpression.left=current} op=(OrOperator | AndOperator)) right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison (({AndOrExpression.left=current} op=(OrOperator | AndOperator)) right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//(({AndOrExpression.left=current} op=(OrOperator | AndOperator)) right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({AndOrExpression.left=current} op=(OrOperator | AndOperator))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{AndOrExpression.left=current}
		public Action getAndOrExpressionLeftAction_1_0_0() { return cAndOrExpressionLeftAction_1_0_0; }
		
		//op=(OrOperator | AndOperator)
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//(OrOperator | AndOperator)
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//OrOperator
		public RuleCall getOpOrOperatorParserRuleCall_1_0_1_0_0() { return cOpOrOperatorParserRuleCall_1_0_1_0_0; }
		
		//AndOperator
		public RuleCall getOpAndOperatorParserRuleCall_1_0_1_0_1() { return cOpAndOperatorParserRuleCall_1_0_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_1_0() { return cRightComparisonParserRuleCall_1_1_0; }
	}
	public class OrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.OrOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OrOperator:
		//	'|' | 'or';
		@Override public ParserRule getRule() { return rule; }
		
		//'|' | 'or'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
	}
	public class AndOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.AndOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AndOperator:
		//	'&' | 'and';
		@Override public ParserRule getRule() { return rule; }
		
		//'&' | 'and'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'&'
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }
		
		//'and'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cComparisonLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpLessThenKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cOpBiggerThenKeyword_1_0_1_0_3 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEqualsParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Comparison Expression:
		//	Equals (({Comparison.left=current} op=('<' | 'lessThen' | '>' | 'biggerThen')) right=Equals)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equals (({Comparison.left=current} op=('<' | 'lessThen' | '>' | 'biggerThen')) right=Equals)*
		public Group getGroup() { return cGroup; }
		
		//Equals
		public RuleCall getEqualsParserRuleCall_0() { return cEqualsParserRuleCall_0; }
		
		//(({Comparison.left=current} op=('<' | 'lessThen' | '>' | 'biggerThen')) right=Equals)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Comparison.left=current} op=('<' | 'lessThen' | '>' | 'biggerThen'))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0_0() { return cComparisonLeftAction_1_0_0; }
		
		//op=('<' | 'lessThen' | '>' | 'biggerThen')
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//('<' | 'lessThen' | '>' | 'biggerThen')
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_0_1_0_0() { return cOpLessThanSignKeyword_1_0_1_0_0; }
		
		//'lessThen'
		public Keyword getOpLessThenKeyword_1_0_1_0_1() { return cOpLessThenKeyword_1_0_1_0_1; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_0_1_0_2() { return cOpGreaterThanSignKeyword_1_0_1_0_2; }
		
		//'biggerThen'
		public Keyword getOpBiggerThenKeyword_1_0_1_0_3() { return cOpBiggerThenKeyword_1_0_1_0_3; }
		
		//right=Equals
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Equals
		public RuleCall getRightEqualsParserRuleCall_1_1_0() { return cRightEqualsParserRuleCall_1_1_0; }
	}
	public class EqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Equals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cEqualsLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_1_0_3 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Equals Expression:
		//	Addition (({Equals.left=current} op=('==' | '<=' | '>=' | '!=')) right=Addition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition (({Equals.left=current} op=('==' | '<=' | '>=' | '!=')) right=Addition)*
		public Group getGroup() { return cGroup; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }
		
		//(({Equals.left=current} op=('==' | '<=' | '>=' | '!=')) right=Addition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Equals.left=current} op=('==' | '<=' | '>=' | '!='))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_0() { return cEqualsLeftAction_1_0_0; }
		
		//op=('==' | '<=' | '>=' | '!=')
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//('==' | '<=' | '>=' | '!=')
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_0_1_0_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_0_1_0_1; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2() { return cOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_1_0_3() { return cOpExclamationMarkEqualsSignKeyword_1_0_1_0_3; }
		
		//right=Addition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_1_0() { return cRightAdditionParserRuleCall_1_1_0; }
	}
	public class ArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.ArithmeticExpression");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ArithmeticExpression Expression:
		//	Addition;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cPlusOperatorParserRuleCall_1_0_0_1 = (RuleCall)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cMinusOperatorParserRuleCall_1_0_1_1 = (RuleCall)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition Expression:
		//	Multiplication (({Plus.left=current} PlusOperator | {Minus.left=current} MinusOperator) right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication (({Plus.left=current} PlusOperator | {Minus.left=current} MinusOperator) right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(({Plus.left=current} PlusOperator | {Minus.left=current} MinusOperator) right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} PlusOperator | {Minus.left=current} MinusOperator)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} PlusOperator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//PlusOperator
		public RuleCall getPlusOperatorParserRuleCall_1_0_0_1() { return cPlusOperatorParserRuleCall_1_0_0_1; }
		
		//{Minus.left=current} MinusOperator
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//MinusOperator
		public RuleCall getMinusOperatorParserRuleCall_1_0_1_1() { return cMinusOperatorParserRuleCall_1_0_1_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class PlusOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.PlusOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PlusOperator:
		//	'+' | 'plus';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | 'plus'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'plus'
		public Keyword getPlusKeyword_1() { return cPlusKeyword_1; }
	}
	public class MinusOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.MinusOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MinusOperator:
		//	'-' | 'minus';
		@Override public ParserRule getRule() { return rule; }
		
		//'-' | 'minus'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//'minus'
		public Keyword getMinusKeyword_1() { return cMinusKeyword_1; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixedParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMultiOrDivLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final RuleCall cOpTimesOperatorParserRuleCall_1_0_1_0_0 = (RuleCall)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final RuleCall cOpDivideOperatorParserRuleCall_1_0_1_0_1 = (RuleCall)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrefixedParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication Expression:
		//	Prefixed (({MultiOrDiv.left=current} op=(TimesOperator | DivideOperator)) right=Prefixed)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Prefixed (({MultiOrDiv.left=current} op=(TimesOperator | DivideOperator)) right=Prefixed)*
		public Group getGroup() { return cGroup; }
		
		//Prefixed
		public RuleCall getPrefixedParserRuleCall_0() { return cPrefixedParserRuleCall_0; }
		
		//(({MultiOrDiv.left=current} op=(TimesOperator | DivideOperator)) right=Prefixed)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({MultiOrDiv.left=current} op=(TimesOperator | DivideOperator))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MultiOrDiv.left=current}
		public Action getMultiOrDivLeftAction_1_0_0() { return cMultiOrDivLeftAction_1_0_0; }
		
		//op=(TimesOperator | DivideOperator)
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//(TimesOperator | DivideOperator)
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//TimesOperator
		public RuleCall getOpTimesOperatorParserRuleCall_1_0_1_0_0() { return cOpTimesOperatorParserRuleCall_1_0_1_0_0; }
		
		//DivideOperator
		public RuleCall getOpDivideOperatorParserRuleCall_1_0_1_0_1() { return cOpDivideOperatorParserRuleCall_1_0_1_0_1; }
		
		//right=Prefixed
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Prefixed
		public RuleCall getRightPrefixedParserRuleCall_1_1_0() { return cRightPrefixedParserRuleCall_1_1_0; }
	}
	public class TimesOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.TimesOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTimesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TimesOperator:
		//	'*' | 'times';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | 'times'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'times'
		public Keyword getTimesKeyword_1() { return cTimesKeyword_1; }
	}
	public class DivideOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.DivideOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDivideKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cModuloKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//DivideOperator:
		//	'/' | 'divide' | '%' | 'modulo';
		@Override public ParserRule getRule() { return rule; }
		
		//'/' | 'divide' | '%' | 'modulo'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'/'
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }
		
		//'divide'
		public Keyword getDivideKeyword_1() { return cDivideKeyword_1; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
		
		//'modulo'
		public Keyword getModuloKeyword_3() { return cModuloKeyword_3; }
	}
	public class PrefixedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Prefixed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanNegationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionAtomicParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cArithmeticSignedAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cMinusOperatorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionAtomicParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Prefixed Expression:
		//	{BooleanNegation} => "!" expression=Atomic | {ArithmeticSigned} => MinusOperator expression=Atomic | Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanNegation} => "!" expression=Atomic | {ArithmeticSigned} => MinusOperator expression=Atomic | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BooleanNegation} => "!" expression=Atomic
		public Group getGroup_0() { return cGroup_0; }
		
		//{BooleanNegation}
		public Action getBooleanNegationAction_0_0() { return cBooleanNegationAction_0_0; }
		
		//=> "!"
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }
		
		//expression=Atomic
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//Atomic
		public RuleCall getExpressionAtomicParserRuleCall_0_2_0() { return cExpressionAtomicParserRuleCall_0_2_0; }
		
		//{ArithmeticSigned} => MinusOperator expression=Atomic
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticSigned}
		public Action getArithmeticSignedAction_1_0() { return cArithmeticSignedAction_1_0; }
		
		//=> MinusOperator
		public RuleCall getMinusOperatorParserRuleCall_1_1() { return cMinusOperatorParserRuleCall_1_1; }
		
		//expression=Atomic
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Atomic
		public RuleCall getExpressionAtomicParserRuleCall_1_2_0() { return cExpressionAtomicParserRuleCall_1_2_0; }
		
		///* right associativity */ Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParenthesizedExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionLiteralExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDoubleLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBooleanLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Alternatives cValueAlternatives_4_1_0 = (Alternatives)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_4_1_0_0 = (Keyword)cValueAlternatives_4_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_4_1_0_1 = (Keyword)cValueAlternatives_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cVariableReferenceAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cRefAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cRefVariableCrossReference_5_1_0 = (CrossReference)cRefAssignment_5_1.eContents().get(0);
		private final RuleCall cRefVariableIDTerminalRuleCall_5_1_0_1 = (RuleCall)cRefVariableCrossReference_5_1_0.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSizeExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Atomic Expression:
		//	{ParenthesizedExpression} '(' expression=LiteralExpression ')' | {NumberLiteral} value=INT | {DoubleLiteral}
		//	value=DOUBLE | {StringLiteral} value=STRING | {BooleanLiteral} value=('true' | 'false') | {VariableReference}
		//	ref=[Variable] | FunctionCall | SizeExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParenthesizedExpression} '(' expression=LiteralExpression ')' | {NumberLiteral} value=INT | {DoubleLiteral}
		//value=DOUBLE | {StringLiteral} value=STRING | {BooleanLiteral} value=('true' | 'false') | {VariableReference}
		//ref=[Variable] | FunctionCall | SizeExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ParenthesizedExpression} '(' expression=LiteralExpression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ParenthesizedExpression}
		public Action getParenthesizedExpressionAction_0_0() { return cParenthesizedExpressionAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//expression=LiteralExpression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//LiteralExpression
		public RuleCall getExpressionLiteralExpressionParserRuleCall_0_2_0() { return cExpressionLiteralExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{NumberLiteral} value=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{NumberLiteral}
		public Action getNumberLiteralAction_1_0() { return cNumberLiteralAction_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
		
		//{DoubleLiteral} value=DOUBLE
		public Group getGroup_2() { return cGroup_2; }
		
		//{DoubleLiteral}
		public Action getDoubleLiteralAction_2_0() { return cDoubleLiteralAction_2_0; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_2_1_0() { return cValueDOUBLETerminalRuleCall_2_1_0; }
		
		//{StringLiteral} value=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_3_0() { return cStringLiteralAction_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
		
		//{BooleanLiteral} value=('true' | 'false')
		public Group getGroup_4() { return cGroup_4; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_4_0() { return cBooleanLiteralAction_4_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_4_1_0() { return cValueAlternatives_4_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_4_1_0_0() { return cValueTrueKeyword_4_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_4_1_0_1() { return cValueFalseKeyword_4_1_0_1; }
		
		//{VariableReference} ref=[Variable]
		public Group getGroup_5() { return cGroup_5; }
		
		//{VariableReference}
		public Action getVariableReferenceAction_5_0() { return cVariableReferenceAction_5_0; }
		
		//ref=[Variable]
		public Assignment getRefAssignment_5_1() { return cRefAssignment_5_1; }
		
		//[Variable]
		public CrossReference getRefVariableCrossReference_5_1_0() { return cRefVariableCrossReference_5_1_0; }
		
		//ID
		public RuleCall getRefVariableIDTerminalRuleCall_5_1_0_1() { return cRefVariableIDTerminalRuleCall_5_1_0_1; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_6() { return cFunctionCallParserRuleCall_6; }
		
		//SizeExpression
		public RuleCall getSizeExpressionParserRuleCall_7() { return cSizeExpressionParserRuleCall_7; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefFunctionCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefFunctionIDTerminalRuleCall_1_0_1 = (RuleCall)cRefFunctionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsLiteralExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsLiteralExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionCall:
		//	{FunctionCall} ref=[Function] '(' (arguments+=LiteralExpression ("," arguments+=LiteralExpression)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionCall} ref=[Function] '(' (arguments+=LiteralExpression ("," arguments+=LiteralExpression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{FunctionCall}
		public Action getFunctionCallAction_0() { return cFunctionCallAction_0; }
		
		//ref=[Function]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[Function]
		public CrossReference getRefFunctionCrossReference_1_0() { return cRefFunctionCrossReference_1_0; }
		
		//ID
		public RuleCall getRefFunctionIDTerminalRuleCall_1_0_1() { return cRefFunctionIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(arguments+=LiteralExpression ("," arguments+=LiteralExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//arguments+=LiteralExpression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }
		
		//LiteralExpression
		public RuleCall getArgumentsLiteralExpressionParserRuleCall_3_0_0() { return cArgumentsLiteralExpressionParserRuleCall_3_0_0; }
		
		//("," arguments+=LiteralExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//arguments+=LiteralExpression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//LiteralExpression
		public RuleCall getArgumentsLiteralExpressionParserRuleCall_3_1_1_0() { return cArgumentsLiteralExpressionParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SizeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.SizeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSizeExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSizeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueAtomicParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//SizeExpression:
		//	{SizeExpression}
		//	'size' 'of' value=Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//{SizeExpression} 'size' 'of' value=Atomic
		public Group getGroup() { return cGroup; }
		
		//{SizeExpression}
		public Action getSizeExpressionAction_0() { return cSizeExpressionAction_0; }
		
		//'size'
		public Keyword getSizeKeyword_1() { return cSizeKeyword_1; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//value=Atomic
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Atomic
		public RuleCall getValueAtomicParserRuleCall_3_0() { return cValueAtomicParserRuleCall_3_0; }
	}
	public class BooleanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCircumflexAccentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//// --- Diff ---
		//BooleanOperator:
		//	'&&' | '||' | '!' | '^';
		@Override public ParserRule getRule() { return rule; }
		
		//'&&' | '||' | '!' | '^'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_0() { return cAmpersandAmpersandKeyword_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1() { return cVerticalLineVerticalLineKeyword_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_3() { return cCircumflexAccentKeyword_3; }
	}
	public class BooleanTestOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.BooleanTestOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//BooleanTestOperator:
		//	'==' | '<' | '<=' | '>' | '>=' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '<' | '<=' | '>' | '>=' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_5() { return cExclamationMarkEqualsSignKeyword_5; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTypesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypesTypeLiteralParserRuleCall_1_0_0 = (RuleCall)cTypesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cWithKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTypesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypesTypeLiteralParserRuleCall_1_1_1_0 = (RuleCall)cTypesAssignment_1_1_1.eContents().get(0);
		
		//Type:
		//	{Type} (types+=TypeLiteral ('with' types+=TypeLiteral)*);
		@Override public ParserRule getRule() { return rule; }
		
		//{Type} (types+=TypeLiteral ('with' types+=TypeLiteral)*)
		public Group getGroup() { return cGroup; }
		
		//{Type}
		public Action getTypeAction_0() { return cTypeAction_0; }
		
		//(types+=TypeLiteral ('with' types+=TypeLiteral)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//types+=TypeLiteral
		public Assignment getTypesAssignment_1_0() { return cTypesAssignment_1_0; }
		
		//TypeLiteral
		public RuleCall getTypesTypeLiteralParserRuleCall_1_0_0() { return cTypesTypeLiteralParserRuleCall_1_0_0; }
		
		//('with' types+=TypeLiteral)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'with'
		public Keyword getWithKeyword_1_1_0() { return cWithKeyword_1_1_0; }
		
		//types+=TypeLiteral
		public Assignment getTypesAssignment_1_1_1() { return cTypesAssignment_1_1_1; }
		
		//TypeLiteral
		public RuleCall getTypesTypeLiteralParserRuleCall_1_1_1_0() { return cTypesTypeLiteralParserRuleCall_1_1_1_0; }
	}
	public class TypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.TypeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNumberKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDecimalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cArrayKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cListKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cTableKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//TypeLiteral:
		//	'Text' | 'Number' | 'Decimal' |
		//	'Array' | 'List' | 'Table';
		@Override public ParserRule getRule() { return rule; }
		
		//'Text' | 'Number' | 'Decimal' | 'Array' | 'List' | 'Table'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Text'
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }
		
		//'Number'
		public Keyword getNumberKeyword_1() { return cNumberKeyword_1; }
		
		//'Decimal'
		public Keyword getDecimalKeyword_2() { return cDecimalKeyword_2; }
		
		//'Array'
		public Keyword getArrayKeyword_3() { return cArrayKeyword_3; }
		
		//'List'
		public Keyword getListKeyword_4() { return cListKeyword_4; }
		
		//'Table'
		public Keyword getTableKeyword_5() { return cTableKeyword_5; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final QualifiedNameElements pQualifiedName;
	private final FunctionElements pFunction;
	private final FeatureElements pFeature;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final VariableElements pVariable;
	private final ParameterElements pParameter;
	private final IfStatementElements pIfStatement;
	private final ForStatementElements pForStatement;
	private final WhileStatementElements pWhileStatement;
	private final StopElements pStop;
	private final PrintElements pPrint;
	private final CollectionAddElements pCollectionAdd;
	private final CollectionRemoveElements pCollectionRemove;
	private final ValueExchangeElements pValueExchange;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	private final LiteralExpressionElements pLiteralExpression;
	private final CollectionElements pCollection;
	private final ListElements pList;
	private final CollectionLitteralElements pCollectionLitteral;
	private final SetLitteralElements pSetLitteral;
	private final ListLitteralElements pListLitteral;
	private final CollectionAccessorElements pCollectionAccessor;
	private final BooleanExpressionElements pBooleanExpression;
	private final OrOperatorElements pOrOperator;
	private final AndOperatorElements pAndOperator;
	private final ComparisonElements pComparison;
	private final EqualsElements pEquals;
	private final ArithmeticExpressionElements pArithmeticExpression;
	private final AdditionElements pAddition;
	private final PlusOperatorElements pPlusOperator;
	private final MinusOperatorElements pMinusOperator;
	private final MultiplicationElements pMultiplication;
	private final TimesOperatorElements pTimesOperator;
	private final DivideOperatorElements pDivideOperator;
	private final PrefixedElements pPrefixed;
	private final AtomicElements pAtomic;
	private final FunctionCallElements pFunctionCall;
	private final SizeExpressionElements pSizeExpression;
	private final BooleanOperatorElements pBooleanOperator;
	private final BooleanTestOperatorElements pBooleanTestOperator;
	private final TypeElements pType;
	private final TypeLiteralElements pTypeLiteral;
	private final EStringElements pEString;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PcodeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pFunction = new FunctionElements();
		this.pFeature = new FeatureElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pVariable = new VariableElements();
		this.pParameter = new ParameterElements();
		this.pIfStatement = new IfStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pStop = new StopElements();
		this.pPrint = new PrintElements();
		this.pCollectionAdd = new CollectionAddElements();
		this.pCollectionRemove = new CollectionRemoveElements();
		this.pValueExchange = new ValueExchangeElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.END");
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pCollection = new CollectionElements();
		this.pList = new ListElements();
		this.pCollectionLitteral = new CollectionLitteralElements();
		this.pSetLitteral = new SetLitteralElements();
		this.pListLitteral = new ListLitteralElements();
		this.pCollectionAccessor = new CollectionAccessorElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pOrOperator = new OrOperatorElements();
		this.pAndOperator = new AndOperatorElements();
		this.pComparison = new ComparisonElements();
		this.pEquals = new EqualsElements();
		this.pArithmeticExpression = new ArithmeticExpressionElements();
		this.pAddition = new AdditionElements();
		this.pPlusOperator = new PlusOperatorElements();
		this.pMinusOperator = new MinusOperatorElements();
		this.pMultiplication = new MultiplicationElements();
		this.pTimesOperator = new TimesOperatorElements();
		this.pDivideOperator = new DivideOperatorElements();
		this.pPrefixed = new PrefixedElements();
		this.pAtomic = new AtomicElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pSizeExpression = new SizeExpressionElements();
		this.pBooleanOperator = new BooleanOperatorElements();
		this.pBooleanTestOperator = new BooleanTestOperatorElements();
		this.pType = new TypeElements();
		this.pTypeLiteral = new TypeLiteralElements();
		this.pEString = new EStringElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.pseudocode.Pcode.DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tdt4250.pseudocode.Pcode".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////generate pseudocode "http://www.pseudocode.tdt4250/xtext/Pcode"
	//Model:
	//	{Model} ('package' package=QualifiedName)?
	//	functions+=Function*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Function:
	//	{Function} executable?='executable'?
	//	name=ID
	//	'(' (parameters+=Parameter ("," parameters+=Parameter)*)?
	//	')' (BEGIN
	//	features+=Feature*
	//	END)*;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Feature:
	//	Statement | Expression;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//Statement:
	//	IfStatement | ForStatement | WhileStatement | Stop;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Expression:
	//	Variable | FunctionCall | Print | CollectionAdd | CollectionRemove | ValueExchange;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Primarily variable assignment
	//Variable Expression:
	//	{Variable} (name=ID op=('=' | 'equals' | 'is' | '+=' | '-=') value=LiteralExpression | name=ID op=('++' | '--'));
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//// Variable declaration
	//Parameter Expression:
	//	{Variable} type=Type name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//IfStatement:
	//	{IfStatement} name='if' condition=LiteralExpression 'then'?
	//	BEGIN
	//	then+=Feature*
	//	END ('else'
	//	BEGIN
	//	otherwise+=Feature*
	//	END)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//ForStatement:
	//	{ForStatement}
	//	'for' 'interval'? from=ArithmeticExpression 'to' to=ArithmeticExpression
	//	BEGIN
	//	block+=Feature*
	//	END;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//WhileStatement:
	//	{WhileStatement}
	//	'while' condition=LiteralExpression
	//	BEGIN
	//	block+=Feature*
	//	END;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//Stop:
	//	{Stop} (type=('stop' | 'break' | 'continue') | type='return' value=LiteralExpression);
	public StopElements getStopAccess() {
		return pStop;
	}
	
	public ParserRule getStopRule() {
		return getStopAccess().getRule();
	}
	
	//Print:
	//	name='print' newline?='line'? value=LiteralExpression;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//CollectionAdd Expression:
	//	{CollectionAdd} collection=[Variable] 'add' value=LiteralExpression;
	public CollectionAddElements getCollectionAddAccess() {
		return pCollectionAdd;
	}
	
	public ParserRule getCollectionAddRule() {
		return getCollectionAddAccess().getRule();
	}
	
	//CollectionRemove Expression:
	//	{CollectionRemove} collection=[Variable] 'remove' value=LiteralExpression;
	public CollectionRemoveElements getCollectionRemoveAccess() {
		return pCollectionRemove;
	}
	
	public ParserRule getCollectionRemoveRule() {
		return getCollectionRemoveAccess().getRule();
	}
	
	////TODO: change name to collection1 and collection 2
	//ValueExchange Expression:
	//	{ValueExchange}
	//	'exchange' collection=LiteralExpression 'with' value=LiteralExpression;
	public ValueExchangeElements getValueExchangeAccess() {
		return pValueExchange;
	}
	
	public ParserRule getValueExchangeRule() {
		return getValueExchangeAccess().getRule();
	}
	
	//terminal BEGIN:
	//	'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//	'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//// -- Literal Expressions ---
	//LiteralExpression Expression:
	//	Collection | CollectionAccessor | BooleanExpression;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//Collection Expression:
	//	CollectionLitteral | List;
	public CollectionElements getCollectionAccess() {
		return pCollection;
	}
	
	public ParserRule getCollectionRule() {
		return getCollectionAccess().getRule();
	}
	
	//List Collection:
	//	{List}
	//	'new' ('array' | 'list' | 'table') 'with' type=Type ('that' 'contains' elements+=LiteralExpression (','
	//	elements+=LiteralExpression)*)?;
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	////TODO: implement Set
	//CollectionLitteral Collection:
	//	SetLitteral | ListLitteral;
	public CollectionLitteralElements getCollectionLitteralAccess() {
		return pCollectionLitteral;
	}
	
	public ParserRule getCollectionLitteralRule() {
		return getCollectionLitteralAccess().getRule();
	}
	
	//SetLitteral Collection:
	//	{SetLitteral}
	//	'{' elements+=LiteralExpression (',' elements+=LiteralExpression)* '}';
	public SetLitteralElements getSetLitteralAccess() {
		return pSetLitteral;
	}
	
	public ParserRule getSetLitteralRule() {
		return getSetLitteralAccess().getRule();
	}
	
	//ListLitteral Collection:
	//	{ListLitteral}
	//	'[' elements+=LiteralExpression (',' elements+=LiteralExpression)* ']';
	public ListLitteralElements getListLitteralAccess() {
		return pListLitteral;
	}
	
	public ParserRule getListLitteralRule() {
		return getListLitteralAccess().getRule();
	}
	
	//CollectionAccessor Expression:
	//	{CollectionAccessor} (collection=[Variable] ('[' accessor+=LiteralExpression ']')+ | collection=[Variable] 'at'
	//	'index'? accessor+=LiteralExpression (',' accessor+=LiteralExpression)*);
	public CollectionAccessorElements getCollectionAccessorAccess() {
		return pCollectionAccessor;
	}
	
	public ParserRule getCollectionAccessorRule() {
		return getCollectionAccessorAccess().getRule();
	}
	
	////----- Logic and Math------
	//BooleanExpression Expression:
	//	Comparison (({AndOrExpression.left=current} op=(OrOperator | AndOperator)) right=Comparison)*;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//OrOperator:
	//	'|' | 'or';
	public OrOperatorElements getOrOperatorAccess() {
		return pOrOperator;
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}
	
	//AndOperator:
	//	'&' | 'and';
	public AndOperatorElements getAndOperatorAccess() {
		return pAndOperator;
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}
	
	//Comparison Expression:
	//	Equals (({Comparison.left=current} op=('<' | 'lessThen' | '>' | 'biggerThen')) right=Equals)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Equals Expression:
	//	Addition (({Equals.left=current} op=('==' | '<=' | '>=' | '!=')) right=Addition)*;
	public EqualsElements getEqualsAccess() {
		return pEquals;
	}
	
	public ParserRule getEqualsRule() {
		return getEqualsAccess().getRule();
	}
	
	//ArithmeticExpression Expression:
	//	Addition;
	public ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return pArithmeticExpression;
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}
	
	//Addition Expression:
	//	Multiplication (({Plus.left=current} PlusOperator | {Minus.left=current} MinusOperator) right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//PlusOperator:
	//	'+' | 'plus';
	public PlusOperatorElements getPlusOperatorAccess() {
		return pPlusOperator;
	}
	
	public ParserRule getPlusOperatorRule() {
		return getPlusOperatorAccess().getRule();
	}
	
	//MinusOperator:
	//	'-' | 'minus';
	public MinusOperatorElements getMinusOperatorAccess() {
		return pMinusOperator;
	}
	
	public ParserRule getMinusOperatorRule() {
		return getMinusOperatorAccess().getRule();
	}
	
	//Multiplication Expression:
	//	Prefixed (({MultiOrDiv.left=current} op=(TimesOperator | DivideOperator)) right=Prefixed)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//TimesOperator:
	//	'*' | 'times';
	public TimesOperatorElements getTimesOperatorAccess() {
		return pTimesOperator;
	}
	
	public ParserRule getTimesOperatorRule() {
		return getTimesOperatorAccess().getRule();
	}
	
	//DivideOperator:
	//	'/' | 'divide' | '%' | 'modulo';
	public DivideOperatorElements getDivideOperatorAccess() {
		return pDivideOperator;
	}
	
	public ParserRule getDivideOperatorRule() {
		return getDivideOperatorAccess().getRule();
	}
	
	//Prefixed Expression:
	//	{BooleanNegation} => "!" expression=Atomic | {ArithmeticSigned} => MinusOperator expression=Atomic | Atomic;
	public PrefixedElements getPrefixedAccess() {
		return pPrefixed;
	}
	
	public ParserRule getPrefixedRule() {
		return getPrefixedAccess().getRule();
	}
	
	//Atomic Expression:
	//	{ParenthesizedExpression} '(' expression=LiteralExpression ')' | {NumberLiteral} value=INT | {DoubleLiteral}
	//	value=DOUBLE | {StringLiteral} value=STRING | {BooleanLiteral} value=('true' | 'false') | {VariableReference}
	//	ref=[Variable] | FunctionCall | SizeExpression;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//FunctionCall:
	//	{FunctionCall} ref=[Function] '(' (arguments+=LiteralExpression ("," arguments+=LiteralExpression)*)? ')';
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//SizeExpression:
	//	{SizeExpression}
	//	'size' 'of' value=Atomic;
	public SizeExpressionElements getSizeExpressionAccess() {
		return pSizeExpression;
	}
	
	public ParserRule getSizeExpressionRule() {
		return getSizeExpressionAccess().getRule();
	}
	
	//// --- Diff ---
	//BooleanOperator:
	//	'&&' | '||' | '!' | '^';
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return pBooleanOperator;
	}
	
	public ParserRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}
	
	//BooleanTestOperator:
	//	'==' | '<' | '<=' | '>' | '>=' | '!=';
	public BooleanTestOperatorElements getBooleanTestOperatorAccess() {
		return pBooleanTestOperator;
	}
	
	public ParserRule getBooleanTestOperatorRule() {
		return getBooleanTestOperatorAccess().getRule();
	}
	
	//Type:
	//	{Type} (types+=TypeLiteral ('with' types+=TypeLiteral)*);
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeLiteral:
	//	'Text' | 'Number' | 'Decimal' |
	//	'Array' | 'List' | 'Table';
	public TypeLiteralElements getTypeLiteralAccess() {
		return pTypeLiteral;
	}
	
	public ParserRule getTypeLiteralRule() {
		return getTypeLiteralAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal DOUBLE:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
