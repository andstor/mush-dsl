/*
 * generated by Xtext 2.23.0
 */
grammar InternalPcode;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package tdt4250.pseudocode.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package tdt4250.pseudocode.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

}

@parser::members {

 	private PcodeGrammarAccess grammarAccess;

    public InternalPcodeParser(TokenStream input, PcodeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "PseudoClass";
   	}

   	@Override
   	protected PcodeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePseudoClass
entryRulePseudoClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPseudoClassRule()); }
	iv_rulePseudoClass=rulePseudoClass
	{ $current=$iv_rulePseudoClass.current; }
	EOF;

// Rule PseudoClass
rulePseudoClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPseudoClassAccess().getPseudoClassAction_0(),
					$current);
			}
		)
		otherlv_1='class'
		{
			newLeafNode(otherlv_1, grammarAccess.getPseudoClassAccess().getClassKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPseudoClassAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPseudoClassRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"tdt4250.pseudocode.Pcode.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPseudoClassAccess().getMembersConstructorParserRuleCall_3_0());
				}
				lv_members_3_0=ruleConstructor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPseudoClassRule());
					}
					add(
						$current,
						"members",
						lv_members_3_0,
						"tdt4250.pseudocode.Pcode.Constructor");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getPseudoClassAccess().getMembersMethodParserRuleCall_4_0());
				}
				lv_members_4_0=ruleMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPseudoClassRule());
					}
					add(
						$current,
						"members",
						lv_members_4_0,
						"tdt4250.pseudocode.Pcode.Method");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='end_class'
		{
			newLeafNode(otherlv_5, grammarAccess.getPseudoClassAccess().getEnd_classKeyword_5());
		}
	)
;

// Entry rule entryRuleConstructor
entryRuleConstructor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstructorRule()); }
	iv_ruleConstructor=ruleConstructor
	{ $current=$iv_ruleConstructor.current; }
	EOF;

// Rule Constructor
ruleConstructor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConstructorAccess().getConstructorAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0='('
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConstructorAccess().getNameLeftParenthesisKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstructorRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "(");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstructorAccess().getParametersParameterParserRuleCall_2_0_0());
					}
					lv_parameters_2_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstructorRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"tdt4250.pseudocode.Pcode.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getConstructorAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getConstructorAccess().getParametersParameterParserRuleCall_2_1_1_0());
						}
						lv_parameters_4_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConstructorRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"tdt4250.pseudocode.Pcode.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getConstructorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMethodAccess().getMethodAction_0(),
					$current);
			}
		)
		otherlv_1='method'
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodAccess().getMethodKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"tdt4250.pseudocode.Pcode.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getParametersParameterParserRuleCall_4_0_0());
					}
					lv_parameters_4_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_4_0,
							"tdt4250.pseudocode.Pcode.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodAccess().getParametersParameterParserRuleCall_4_1_1_0());
						}
						lv_parameters_6_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_6_0,
								"tdt4250.pseudocode.Pcode.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)*
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getMethodAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getBodyBodyParserRuleCall_6_0());
				}
				lv_body_8_0=ruleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"body",
						lv_body_8_0,
						"tdt4250.pseudocode.Pcode.Body");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='end_method'
		{
			newLeafNode(otherlv_9, grammarAccess.getMethodAccess().getEnd_methodKeyword_7());
		}
	)
;

// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	iv_ruleBody=ruleBody
	{ $current=$iv_ruleBody.current; }
	EOF;

// Rule Body
ruleBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBodyAccess().getBodyAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBodyAccess().getStatementsVariableParserRuleCall_1_0_0());
					}
					lv_statements_1_1=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBodyRule());
						}
						add(
							$current,
							"statements",
							lv_statements_1_1,
							"tdt4250.pseudocode.Pcode.Variable");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getBodyAccess().getStatementsIfParserRuleCall_1_0_1());
					}
					lv_statements_1_2=ruleIf
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBodyRule());
						}
						add(
							$current,
							"statements",
							lv_statements_1_2,
							"tdt4250.pseudocode.Pcode.If");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getBodyAccess().getStatementsForParserRuleCall_1_0_2());
					}
					lv_statements_1_3=ruleFor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBodyRule());
						}
						add(
							$current,
							"statements",
							lv_statements_1_3,
							"tdt4250.pseudocode.Pcode.For");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getBodyAccess().getStatementsWhileParserRuleCall_1_0_3());
					}
					lv_statements_1_4=ruleWhile
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBodyRule());
						}
						add(
							$current,
							"statements",
							lv_statements_1_4,
							"tdt4250.pseudocode.Pcode.While");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getBodyAccess().getStatementsStopParserRuleCall_1_0_4());
					}
					lv_statements_1_5=ruleStop
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBodyRule());
						}
						add(
							$current,
							"statements",
							lv_statements_1_5,
							"tdt4250.pseudocode.Pcode.Stop");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getBodyAccess().getStatementsStopParserRuleCall_2_0());
				}
				lv_statements_2_0=ruleStop
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBodyRule());
					}
					add(
						$current,
						"statements",
						lv_statements_2_0,
						"tdt4250.pseudocode.Pcode.Stop");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableAccess().getVariableAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getExpressionsExpressionParserRuleCall_1_0());
				}
				lv_expressions_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_1_0,
						"tdt4250.pseudocode.Pcode.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExpressionAccess().getExpressionAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='print'
				{
					newLeafNode(otherlv_1, grammarAccess.getExpressionAccess().getPrintKeyword_1_0_0());
				}
				(
					(
						otherlv_2='"'
						{
							newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getQuotationMarkKeyword_1_0_1_0_0());
						}
						(
							{
								newCompositeNode(grammarAccess.getExpressionAccess().getTypeParserRuleCall_1_0_1_0_1());
							}
							ruleType
							{
								afterParserOrEnumRuleCall();
							}
						)*
						otherlv_4='"'
						{
							newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getQuotationMarkKeyword_1_0_1_0_2());
						}
					)*
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getTypeParserRuleCall_1_0_1_1());
					}
					ruleType
					{
						afterParserOrEnumRuleCall();
					}
					(
						otherlv_6=','
						{
							newLeafNode(otherlv_6, grammarAccess.getExpressionAccess().getCommaKeyword_1_0_1_2_0());
						}
						{
							newCompositeNode(grammarAccess.getExpressionAccess().getTypeParserRuleCall_1_0_1_2_1());
						}
						ruleType
						{
							afterParserOrEnumRuleCall();
						}
					)*
				)*
			)
			    |
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getEStringParserRuleCall_1_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
				(
					otherlv_9='='
					{
						newLeafNode(otherlv_9, grammarAccess.getExpressionAccess().getEqualsSignKeyword_1_1_1_0());
					}
					    |
					otherlv_10='+='
					{
						newLeafNode(otherlv_10, grammarAccess.getExpressionAccess().getPlusSignEqualsSignKeyword_1_1_1_1());
					}
					    |
					otherlv_11='-='
					{
						newLeafNode(otherlv_11, grammarAccess.getExpressionAccess().getHyphenMinusEqualsSignKeyword_1_1_1_2());
					}
				)
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getTypeParserRuleCall_1_1_2());
				}
				ruleType
				{
					afterParserOrEnumRuleCall();
				}
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getMathSignsParserRuleCall_1_1_3_0());
					}
					ruleMathSigns
					{
						afterParserOrEnumRuleCall();
					}
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getTypeParserRuleCall_1_1_3_1());
					}
					ruleType
					{
						afterParserOrEnumRuleCall();
					}
				)*
			)
			    |
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getEStringParserRuleCall_1_2_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
				otherlv_16='_'
				{
					newLeafNode(otherlv_16, grammarAccess.getExpressionAccess().get_Keyword_1_2_1());
				}
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getTypeParserRuleCall_1_2_2());
				}
				ruleType
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfAccess().getIfAction_0(),
					$current);
			}
		)
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfAccess().getIfKeyword_1());
		}
		(
			(
				otherlv_2='!'
				{
					newLeafNode(otherlv_2, grammarAccess.getIfAccess().getExclamationMarkKeyword_2_0_0());
				}
				{
					newCompositeNode(grammarAccess.getIfAccess().getEStringParserRuleCall_2_0_1());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			{
				newCompositeNode(grammarAccess.getIfAccess().getEStringParserRuleCall_2_1());
			}
			ruleEString
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getTypeParserRuleCall_2_2_0());
				}
				ruleType
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getIfAccess().getEqualVariableParserRuleCall_2_2_1());
				}
				ruleEqualVariable
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getIfAccess().getTypeParserRuleCall_2_2_2());
				}
				ruleType
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getEStringParserRuleCall_2_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
				(
					otherlv_9='not'
					{
						newLeafNode(otherlv_9, grammarAccess.getIfAccess().getNotKeyword_2_3_1());
					}
				)?
				otherlv_10='exists'
				{
					newLeafNode(otherlv_10, grammarAccess.getIfAccess().getExistsKeyword_2_3_2());
				}
			)
			    |
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getEStringParserRuleCall_2_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
				(
					otherlv_12='not'
					{
						newLeafNode(otherlv_12, grammarAccess.getIfAccess().getNotKeyword_2_4_1());
					}
				)?
				otherlv_13='knowing'
				{
					newLeafNode(otherlv_13, grammarAccess.getIfAccess().getKnowingKeyword_2_4_2());
				}
				{
					newCompositeNode(grammarAccess.getIfAccess().getEStringParserRuleCall_2_4_3());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_15='else'
			{
				newLeafNode(otherlv_15, grammarAccess.getIfAccess().getElseKeyword_3_0());
			}
			otherlv_16='if'
			{
				newLeafNode(otherlv_16, grammarAccess.getIfAccess().getIfKeyword_3_1());
			}
			(
				(
					otherlv_17='!'
					{
						newLeafNode(otherlv_17, grammarAccess.getIfAccess().getExclamationMarkKeyword_3_2_0_0());
					}
					{
						newCompositeNode(grammarAccess.getIfAccess().getEStringParserRuleCall_3_2_0_1());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
				    |
				{
					newCompositeNode(grammarAccess.getIfAccess().getEStringParserRuleCall_3_2_1());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
				    |
				(
					{
						newCompositeNode(grammarAccess.getIfAccess().getTypeParserRuleCall_3_2_2_0());
					}
					ruleType
					{
						afterParserOrEnumRuleCall();
					}
					{
						newCompositeNode(grammarAccess.getIfAccess().getEqualVariableParserRuleCall_3_2_2_1());
					}
					ruleEqualVariable
					{
						afterParserOrEnumRuleCall();
					}
					{
						newCompositeNode(grammarAccess.getIfAccess().getTypeParserRuleCall_3_2_2_2());
					}
					ruleType
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_23='else'
			{
				newLeafNode(otherlv_23, grammarAccess.getIfAccess().getElseKeyword_4());
			}
		)?
	)
;

// Entry rule entryRuleFor
entryRuleFor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForRule()); }
	iv_ruleFor=ruleFor
	{ $current=$iv_ruleFor.current; }
	EOF;

// Rule For
ruleFor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForAccess().getForAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='for'
				{
					newLeafNode(otherlv_1, grammarAccess.getForAccess().getForKeyword_1_0_0());
				}
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getForAccess().getLeftParenthesisKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getForAccess().getEStringParserRuleCall_1_0_2_0_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
						otherlv_4='='
						{
							newLeafNode(otherlv_4, grammarAccess.getForAccess().getEqualsSignKeyword_1_0_2_0_1());
						}
						this_INT_5=RULE_INT
						{
							newLeafNode(this_INT_5, grammarAccess.getForAccess().getINTTerminalRuleCall_1_0_2_0_2());
						}
						otherlv_6=';'
						{
							newLeafNode(otherlv_6, grammarAccess.getForAccess().getSemicolonKeyword_1_0_2_0_3());
						}
						{
							newCompositeNode(grammarAccess.getForAccess().getEStringParserRuleCall_1_0_2_0_4());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
						{
							newCompositeNode(grammarAccess.getForAccess().getEqualVariableParserRuleCall_1_0_2_0_5());
						}
						ruleEqualVariable
						{
							afterParserOrEnumRuleCall();
						}
						{
							newCompositeNode(grammarAccess.getForAccess().getTypeParserRuleCall_1_0_2_0_6());
						}
						ruleType
						{
							afterParserOrEnumRuleCall();
						}
						otherlv_10=';'
						{
							newLeafNode(otherlv_10, grammarAccess.getForAccess().getSemicolonKeyword_1_0_2_0_7());
						}
						{
							newCompositeNode(grammarAccess.getForAccess().getEStringParserRuleCall_1_0_2_0_8());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
						(
							otherlv_12='++'
							{
								newLeafNode(otherlv_12, grammarAccess.getForAccess().getPlusSignPlusSignKeyword_1_0_2_0_9_0());
							}
							    |
							otherlv_13='--'
							{
								newLeafNode(otherlv_13, grammarAccess.getForAccess().getHyphenMinusHyphenMinusKeyword_1_0_2_0_9_1());
							}
							    |
							(
								otherlv_14='+'
								{
									newLeafNode(otherlv_14, grammarAccess.getForAccess().getPlusSignKeyword_1_0_2_0_9_2_0());
								}
								this_INT_15=RULE_INT
								{
									newLeafNode(this_INT_15, grammarAccess.getForAccess().getINTTerminalRuleCall_1_0_2_0_9_2_1());
								}
							)
							    |
							(
								otherlv_16='-'
								{
									newLeafNode(otherlv_16, grammarAccess.getForAccess().getHyphenMinusKeyword_1_0_2_0_9_3_0());
								}
								this_INT_17=RULE_INT
								{
									newLeafNode(this_INT_17, grammarAccess.getForAccess().getINTTerminalRuleCall_1_0_2_0_9_3_1());
								}
							)
						)
					)
					    |
					(
						{
							newCompositeNode(grammarAccess.getForAccess().getEStringParserRuleCall_1_0_2_1_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
						otherlv_19=':'
						{
							newLeafNode(otherlv_19, grammarAccess.getForAccess().getColonKeyword_1_0_2_1_1());
						}
						{
							newCompositeNode(grammarAccess.getForAccess().getEStringParserRuleCall_1_0_2_1_2());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
					    |
					(
						otherlv_21='all'
						{
							newLeafNode(otherlv_21, grammarAccess.getForAccess().getAllKeyword_1_0_2_2_0());
						}
						{
							newCompositeNode(grammarAccess.getForAccess().getEStringParserRuleCall_1_0_2_2_1());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
					    |
					(
						otherlv_23='interval'
						{
							newLeafNode(otherlv_23, grammarAccess.getForAccess().getIntervalKeyword_1_0_2_3_0());
						}
						this_INT_24=RULE_INT
						{
							newLeafNode(this_INT_24, grammarAccess.getForAccess().getINTTerminalRuleCall_1_0_2_3_1());
						}
						otherlv_25='to'
						{
							newLeafNode(otherlv_25, grammarAccess.getForAccess().getToKeyword_1_0_2_3_2());
						}
						this_INT_26=RULE_INT
						{
							newLeafNode(this_INT_26, grammarAccess.getForAccess().getINTTerminalRuleCall_1_0_2_3_3());
						}
						otherlv_27='in'
						{
							newLeafNode(otherlv_27, grammarAccess.getForAccess().getInKeyword_1_0_2_3_4());
						}
						{
							newCompositeNode(grammarAccess.getForAccess().getEStringParserRuleCall_1_0_2_3_5());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_29=')'
				{
					newLeafNode(otherlv_29, grammarAccess.getForAccess().getRightParenthesisKeyword_1_0_3());
				}
			)
			    |
			(
				otherlv_30='repeat'
				{
					newLeafNode(otherlv_30, grammarAccess.getForAccess().getRepeatKeyword_1_1_0());
				}
				this_INT_31=RULE_INT
				{
					newLeafNode(this_INT_31, grammarAccess.getForAccess().getINTTerminalRuleCall_1_1_1());
				}
				otherlv_32='times'
				{
					newLeafNode(otherlv_32, grammarAccess.getForAccess().getTimesKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current; }
	EOF;

// Rule While
ruleWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWhileAccess().getWhileAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='while'
				{
					newLeafNode(otherlv_1, grammarAccess.getWhileAccess().getWhileKeyword_1_0_0());
				}
				(
					otherlv_2='true'
					{
						newLeafNode(otherlv_2, grammarAccess.getWhileAccess().getTrueKeyword_1_0_1_0());
					}
					    |
					(
						(
							otherlv_3='!'
							{
								newLeafNode(otherlv_3, grammarAccess.getWhileAccess().getExclamationMarkKeyword_1_0_1_1_0());
							}
						)?
						{
							newCompositeNode(grammarAccess.getWhileAccess().getEStringParserRuleCall_1_0_1_1_1());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_5='repeat'
				{
					newLeafNode(otherlv_5, grammarAccess.getWhileAccess().getRepeatKeyword_1_1_0());
				}
				otherlv_6='until'
				{
					newLeafNode(otherlv_6, grammarAccess.getWhileAccess().getUntilKeyword_1_1_1());
				}
				{
					newCompositeNode(grammarAccess.getWhileAccess().getEStringParserRuleCall_1_1_2());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
				(
					(
						otherlv_8='or'
						{
							newLeafNode(otherlv_8, grammarAccess.getWhileAccess().getOrKeyword_1_1_3_0_0());
						}
						    |
						otherlv_9='and'
						{
							newLeafNode(otherlv_9, grammarAccess.getWhileAccess().getAndKeyword_1_1_3_0_1());
						}
					)
					{
						newCompositeNode(grammarAccess.getWhileAccess().getEStringParserRuleCall_1_1_3_1());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)*
				(
					(
						otherlv_11='=='
						{
							newLeafNode(otherlv_11, grammarAccess.getWhileAccess().getEqualsSignEqualsSignKeyword_1_1_4_0_0());
						}
						    |
						otherlv_12='!='
						{
							newLeafNode(otherlv_12, grammarAccess.getWhileAccess().getExclamationMarkEqualsSignKeyword_1_1_4_0_1());
						}
					)
					{
						newCompositeNode(grammarAccess.getWhileAccess().getEStringParserRuleCall_1_1_4_1());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterAccess().getParameterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"tdt4250.pseudocode.Pcode.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStop
entryRuleStop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStopRule()); }
	iv_ruleStop=ruleStop
	{ $current=$iv_ruleStop.current; }
	EOF;

// Rule Stop
ruleStop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStopAccess().getStopAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='return'
				{
					newLeafNode(otherlv_1, grammarAccess.getStopAccess().getReturnKeyword_1_0_0());
				}
				{
					newCompositeNode(grammarAccess.getStopAccess().getTypeParserRuleCall_1_0_1());
				}
				ruleType
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			otherlv_3='stop'
			{
				newLeafNode(otherlv_3, grammarAccess.getStopAccess().getStopKeyword_1_1());
			}
			    |
			otherlv_4='break'
			{
				newLeafNode(otherlv_4, grammarAccess.getStopAccess().getBreakKeyword_1_2());
			}
			    |
			otherlv_5='continue'
			{
				newLeafNode(otherlv_5, grammarAccess.getStopAccess().getContinueKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getEStringParserRuleCall_0());
		}
		this_EString_0=ruleEString
		{
			$current.merge(this_EString_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_DOUBLE_1=RULE_DOUBLE
		{
			$current.merge(this_DOUBLE_1);
		}
		{
			newLeafNode(this_DOUBLE_1, grammarAccess.getTypeAccess().getDOUBLETerminalRuleCall_1());
		}
		    |
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getTypeAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleEqualVariable
entryRuleEqualVariable returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEqualVariableRule()); }
	iv_ruleEqualVariable=ruleEqualVariable
	{ $current=$iv_ruleEqualVariable.current.getText(); }
	EOF;

// Rule EqualVariable
ruleEqualVariable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEqualVariableAccess().getEqualsSignEqualsSignKeyword_0());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEqualVariableAccess().getLessThanSignKeyword_1());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEqualVariableAccess().getLessThanSignEqualsSignKeyword_2());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEqualVariableAccess().getGreaterThanSignKeyword_3());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEqualVariableAccess().getGreaterThanSignEqualsSignKeyword_4());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEqualVariableAccess().getExclamationMarkEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleMathSigns
entryRuleMathSigns returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMathSignsRule()); }
	iv_ruleMathSigns=ruleMathSigns
	{ $current=$iv_ruleMathSigns.current.getText(); }
	EOF;

// Rule MathSigns
ruleMathSigns returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMathSignsAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMathSignsAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMathSignsAccess().getAsteriskKeyword_2());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMathSignsAccess().getSolidusKeyword_3());
		}
		    |
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMathSignsAccess().getPercentSignKeyword_4());
		}
		    |
		(
			kw='total'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getMathSignsAccess().getTotalKeyword_5_0());
			}
			kw='division'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getMathSignsAccess().getDivisionKeyword_5_1());
			}
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
