/*
 * generated by Xtext 2.22.0
 */
parser grammar InternalPcodeParser;

options {
	tokenVocab=InternalPcodeLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package tdt4250.pseudocode.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

}

@members {

 	private PcodeGrammarAccess grammarAccess;

    public InternalPcodeParser(TokenStream input, PcodeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected PcodeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModelAccess().getModelAction_0(),
					$current);
			}
		)
		(
			otherlv_1=Package
			{
				newLeafNode(otherlv_1, grammarAccess.getModelAccess().getPackageKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getPackageQualifiedNameParserRuleCall_1_1_0());
					}
					lv_package_2_0=ruleQualifiedName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						set(
							$current,
							"package",
							lv_package_2_0,
							"tdt4250.pseudocode.Pcode.QualifiedName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getFunctionsFunctionParserRuleCall_2_0());
				}
				lv_functions_3_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"functions",
						lv_functions_3_0,
						"tdt4250.pseudocode.Pcode.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw=FullStop
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFunctionAccess().getFunctionAction_0(),
					$current);
			}
		)
		(
			(
				lv_executable_1_0=Executable
				{
					newLeafNode(lv_executable_1_0, grammarAccess.getFunctionAccess().getExecutableExecutableKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed($current, "executable", lv_executable_1_0 != null, "executable");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=LeftParenthesis
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_4_0_0());
					}
					lv_parameters_4_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_4_0,
							"tdt4250.pseudocode.Pcode.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=Comma
				{
					newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_4_1_1_0());
						}
						lv_parameters_6_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_6_0,
								"tdt4250.pseudocode.Pcode.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7=RightParenthesis
		{
			newLeafNode(otherlv_7, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5());
		}
		(
			this_BEGIN_8=RULE_BEGIN
			{
				newLeafNode(this_BEGIN_8, grammarAccess.getFunctionAccess().getBEGINTerminalRuleCall_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getFeaturesFeatureParserRuleCall_6_1_0());
					}
					lv_features_9_0=ruleFeature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"features",
							lv_features_9_0,
							"tdt4250.pseudocode.Pcode.Feature");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			this_END_10=RULE_END
			{
				newLeafNode(this_END_10, grammarAccess.getFunctionAccess().getENDTerminalRuleCall_6_2());
			}
		)*
	)
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getStatementParserRuleCall_0());
		}
		this_Statement_0=ruleStatement
		{
			$current = $this_Statement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0());
		}
		this_IfStatement_0=ruleIfStatement
		{
			$current = $this_IfStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_1());
		}
		this_ForStatement_1=ruleForStatement
		{
			$current = $this_ForStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_2());
		}
		this_WhileStatement_2=ruleWhileStatement
		{
			$current = $this_WhileStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getStopParserRuleCall_3());
		}
		this_Stop_3=ruleStop
		{
			$current = $this_Stop_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getVariableParserRuleCall_0());
		}
		this_Variable_0=ruleVariable
		{
			$current = $this_Variable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFunctionCallParserRuleCall_1());
		}
		this_FunctionCall_1=ruleFunctionCall
		{
			$current = $this_FunctionCall_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getPrintParserRuleCall_2());
		}
		this_Print_2=rulePrint
		{
			$current = $this_Print_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getCollectionAddParserRuleCall_3());
		}
		this_CollectionAdd_3=ruleCollectionAdd
		{
			$current = $this_CollectionAdd_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getCollectionRemoveParserRuleCall_4());
		}
		this_CollectionRemove_4=ruleCollectionRemove
		{
			$current = $this_CollectionRemove_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getValueExchangeParserRuleCall_5());
		}
		this_ValueExchange_5=ruleValueExchange
		{
			$current = $this_ValueExchange_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableAccess().getVariableAction_0(),
					$current);
			}
		)
		(
			(
				(
					(
						lv_name_1_0=RULE_ID
						{
							newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVariableRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_1_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
				(
					(
						(
							lv_op_2_1=EqualsSign
							{
								newLeafNode(lv_op_2_1, grammarAccess.getVariableAccess().getOpEqualsSignKeyword_1_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_1, null);
							}
							    |
							lv_op_2_2=Equals
							{
								newLeafNode(lv_op_2_2, grammarAccess.getVariableAccess().getOpEqualsKeyword_1_0_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_2, null);
							}
							    |
							lv_op_2_3=Is
							{
								newLeafNode(lv_op_2_3, grammarAccess.getVariableAccess().getOpIsKeyword_1_0_1_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_3, null);
							}
							    |
							lv_op_2_4=PlusSignEqualsSign
							{
								newLeafNode(lv_op_2_4, grammarAccess.getVariableAccess().getOpPlusSignEqualsSignKeyword_1_0_1_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_4, null);
							}
							    |
							lv_op_2_5=HyphenMinusEqualsSign
							{
								newLeafNode(lv_op_2_5, grammarAccess.getVariableAccess().getOpHyphenMinusEqualsSignKeyword_1_0_1_0_4());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_5, null);
							}
						)
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getVariableAccess().getValueLiteralExpressionParserRuleCall_1_0_2_0());
						}
						lv_value_3_0=ruleLiteralExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVariableRule());
							}
							set(
								$current,
								"value",
								lv_value_3_0,
								"tdt4250.pseudocode.Pcode.LiteralExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_name_4_0=RULE_ID
						{
							newLeafNode(lv_name_4_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVariableRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_4_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
				(
					(
						(
							lv_op_5_1=PlusSignPlusSign
							{
								newLeafNode(lv_op_5_1, grammarAccess.getVariableAccess().getOpPlusSignPlusSignKeyword_1_1_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableRule());
								}
								setWithLastConsumed($current, "op", lv_op_5_1, null);
							}
							    |
							lv_op_5_2=HyphenMinusHyphenMinus
							{
								newLeafNode(lv_op_5_2, grammarAccess.getVariableAccess().getOpHyphenMinusHyphenMinusKeyword_1_1_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableRule());
								}
								setWithLastConsumed($current, "op", lv_op_5_2, null);
							}
						)
					)
				)
			)
		)
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterAccess().getVariableAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"tdt4250.pseudocode.Pcode.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfStatementAccess().getIfStatementAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=If
				{
					newLeafNode(lv_name_1_0, grammarAccess.getIfStatementAccess().getNameIfKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIfStatementRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "if");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getConditionLiteralExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"tdt4250.pseudocode.Pcode.LiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=Then
			{
				newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getThenKeyword_3());
			}
		)?
		this_BEGIN_4=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_4, grammarAccess.getIfStatementAccess().getBEGINTerminalRuleCall_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getThenFeatureParserRuleCall_5_0());
				}
				lv_then_5_0=ruleFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					add(
						$current,
						"then",
						lv_then_5_0,
						"tdt4250.pseudocode.Pcode.Feature");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_END_6=RULE_END
		{
			newLeafNode(this_END_6, grammarAccess.getIfStatementAccess().getENDTerminalRuleCall_6());
		}
		(
			otherlv_7=Else
			{
				newLeafNode(otherlv_7, grammarAccess.getIfStatementAccess().getElseKeyword_7_0());
			}
			this_BEGIN_8=RULE_BEGIN
			{
				newLeafNode(this_BEGIN_8, grammarAccess.getIfStatementAccess().getBEGINTerminalRuleCall_7_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getOtherwiseFeatureParserRuleCall_7_2_0());
					}
					lv_otherwise_9_0=ruleFeature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						add(
							$current,
							"otherwise",
							lv_otherwise_9_0,
							"tdt4250.pseudocode.Pcode.Feature");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			this_END_10=RULE_END
			{
				newLeafNode(this_END_10, grammarAccess.getIfStatementAccess().getENDTerminalRuleCall_7_3());
			}
		)?
	)
;

// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	iv_ruleForStatement=ruleForStatement
	{ $current=$iv_ruleForStatement.current; }
	EOF;

// Rule ForStatement
ruleForStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForStatementAccess().getForStatementAction_0(),
					$current);
			}
		)
		otherlv_1=For
		{
			newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getForKeyword_1());
		}
		(
			otherlv_2=Interval
			{
				newLeafNode(otherlv_2, grammarAccess.getForStatementAccess().getIntervalKeyword_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getFromArithmeticExpressionParserRuleCall_3_0());
				}
				lv_from_3_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"from",
						lv_from_3_0,
						"tdt4250.pseudocode.Pcode.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=To
		{
			newLeafNode(otherlv_4, grammarAccess.getForStatementAccess().getToKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getToArithmeticExpressionParserRuleCall_5_0());
				}
				lv_to_5_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"to",
						lv_to_5_0,
						"tdt4250.pseudocode.Pcode.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_BEGIN_6=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_6, grammarAccess.getForStatementAccess().getBEGINTerminalRuleCall_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getBlockFeatureParserRuleCall_7_0());
				}
				lv_block_7_0=ruleFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					add(
						$current,
						"block",
						lv_block_7_0,
						"tdt4250.pseudocode.Pcode.Feature");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_END_8=RULE_END
		{
			newLeafNode(this_END_8, grammarAccess.getForStatementAccess().getENDTerminalRuleCall_8());
		}
	)
;

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	iv_ruleWhileStatement=ruleWhileStatement
	{ $current=$iv_ruleWhileStatement.current; }
	EOF;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWhileStatementAccess().getWhileStatementAction_0(),
					$current);
			}
		)
		otherlv_1=While
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getWhileKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getConditionLiteralExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"tdt4250.pseudocode.Pcode.LiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_BEGIN_3=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_3, grammarAccess.getWhileStatementAccess().getBEGINTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getBlockFeatureParserRuleCall_4_0());
				}
				lv_block_4_0=ruleFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					add(
						$current,
						"block",
						lv_block_4_0,
						"tdt4250.pseudocode.Pcode.Feature");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_END_5=RULE_END
		{
			newLeafNode(this_END_5, grammarAccess.getWhileStatementAccess().getENDTerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleStop
entryRuleStop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStopRule()); }
	iv_ruleStop=ruleStop
	{ $current=$iv_ruleStop.current; }
	EOF;

// Rule Stop
ruleStop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStopAccess().getStopAction_0(),
					$current);
			}
		)
		(
			(
				(
					(
						lv_type_1_1=Stop
						{
							newLeafNode(lv_type_1_1, grammarAccess.getStopAccess().getTypeStopKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getStopRule());
							}
							setWithLastConsumed($current, "type", lv_type_1_1, null);
						}
						    |
						lv_type_1_2=Break
						{
							newLeafNode(lv_type_1_2, grammarAccess.getStopAccess().getTypeBreakKeyword_1_0_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getStopRule());
							}
							setWithLastConsumed($current, "type", lv_type_1_2, null);
						}
						    |
						lv_type_1_3=Continue
						{
							newLeafNode(lv_type_1_3, grammarAccess.getStopAccess().getTypeContinueKeyword_1_0_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getStopRule());
							}
							setWithLastConsumed($current, "type", lv_type_1_3, null);
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_type_2_0=Return
						{
							newLeafNode(lv_type_2_0, grammarAccess.getStopAccess().getTypeReturnKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getStopRule());
							}
							setWithLastConsumed($current, "type", lv_type_2_0, "return");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getStopAccess().getValueLiteralExpressionParserRuleCall_1_1_1_0());
						}
						lv_value_3_0=ruleLiteralExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStopRule());
							}
							set(
								$current,
								"value",
								lv_value_3_0,
								"tdt4250.pseudocode.Pcode.LiteralExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRulePrint
entryRulePrint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	iv_rulePrint=rulePrint
	{ $current=$iv_rulePrint.current; }
	EOF;

// Rule Print
rulePrint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=Print
				{
					newLeafNode(lv_name_0_0, grammarAccess.getPrintAccess().getNamePrintKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrintRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "print");
				}
			)
		)
		(
			(
				lv_newline_1_0=Line
				{
					newLeafNode(lv_newline_1_0, grammarAccess.getPrintAccess().getNewlineLineKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrintRule());
					}
					setWithLastConsumed($current, "newline", lv_newline_1_0 != null, "line");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintAccess().getValueLiteralExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"tdt4250.pseudocode.Pcode.LiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCollectionAdd
entryRuleCollectionAdd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionAddRule()); }
	iv_ruleCollectionAdd=ruleCollectionAdd
	{ $current=$iv_ruleCollectionAdd.current; }
	EOF;

// Rule CollectionAdd
ruleCollectionAdd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCollectionAddAccess().getCollectionAddAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCollectionAddRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getCollectionAddAccess().getCollectionVariableCrossReference_1_0());
				}
			)
		)
		otherlv_2=Add
		{
			newLeafNode(otherlv_2, grammarAccess.getCollectionAddAccess().getAddKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionAddAccess().getValueLiteralExpressionParserRuleCall_3_0());
				}
				lv_value_3_0=ruleLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionAddRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"tdt4250.pseudocode.Pcode.LiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCollectionRemove
entryRuleCollectionRemove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionRemoveRule()); }
	iv_ruleCollectionRemove=ruleCollectionRemove
	{ $current=$iv_ruleCollectionRemove.current; }
	EOF;

// Rule CollectionRemove
ruleCollectionRemove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCollectionRemoveAccess().getCollectionRemoveAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCollectionRemoveRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getCollectionRemoveAccess().getCollectionVariableCrossReference_1_0());
				}
			)
		)
		otherlv_2=Remove
		{
			newLeafNode(otherlv_2, grammarAccess.getCollectionRemoveAccess().getRemoveKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionRemoveAccess().getValueLiteralExpressionParserRuleCall_3_0());
				}
				lv_value_3_0=ruleLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionRemoveRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"tdt4250.pseudocode.Pcode.LiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValueExchange
entryRuleValueExchange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueExchangeRule()); }
	iv_ruleValueExchange=ruleValueExchange
	{ $current=$iv_ruleValueExchange.current; }
	EOF;

// Rule ValueExchange
ruleValueExchange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getValueExchangeAccess().getValueExchangeAction_0(),
					$current);
			}
		)
		otherlv_1=Exchange
		{
			newLeafNode(otherlv_1, grammarAccess.getValueExchangeAccess().getExchangeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueExchangeAccess().getCollectionLiteralExpressionParserRuleCall_2_0());
				}
				lv_collection_2_0=ruleLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueExchangeRule());
					}
					set(
						$current,
						"collection",
						lv_collection_2_0,
						"tdt4250.pseudocode.Pcode.LiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=With
		{
			newLeafNode(otherlv_3, grammarAccess.getValueExchangeAccess().getWithKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueExchangeAccess().getValueLiteralExpressionParserRuleCall_4_0());
				}
				lv_value_4_0=ruleLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueExchangeRule());
					}
					set(
						$current,
						"value",
						lv_value_4_0,
						"tdt4250.pseudocode.Pcode.LiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	iv_ruleLiteralExpression=ruleLiteralExpression
	{ $current=$iv_ruleLiteralExpression.current; }
	EOF;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralExpressionAccess().getCollectionParserRuleCall_0());
		}
		this_Collection_0=ruleCollection
		{
			$current = $this_Collection_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralExpressionAccess().getCollectionAccessorParserRuleCall_1());
		}
		this_CollectionAccessor_1=ruleCollectionAccessor
		{
			$current = $this_CollectionAccessor_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralExpressionAccess().getBooleanExpressionParserRuleCall_2());
		}
		this_BooleanExpression_2=ruleBooleanExpression
		{
			$current = $this_BooleanExpression_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCollection
entryRuleCollection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionRule()); }
	iv_ruleCollection=ruleCollection
	{ $current=$iv_ruleCollection.current; }
	EOF;

// Rule Collection
ruleCollection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCollectionAccess().getCollectionLitteralParserRuleCall_0());
		}
		this_CollectionLitteral_0=ruleCollectionLitteral
		{
			$current = $this_CollectionLitteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionAccess().getListParserRuleCall_1());
		}
		this_List_1=ruleList
		{
			$current = $this_List_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleList
entryRuleList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListRule()); }
	iv_ruleList=ruleList
	{ $current=$iv_ruleList.current; }
	EOF;

// Rule List
ruleList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getListAccess().getListAction_0(),
					$current);
			}
		)
		otherlv_1=New
		{
			newLeafNode(otherlv_1, grammarAccess.getListAccess().getNewKeyword_1());
		}
		(
			otherlv_2=Array_1
			{
				newLeafNode(otherlv_2, grammarAccess.getListAccess().getArrayKeyword_2_0());
			}
			    |
			otherlv_3=List_1
			{
				newLeafNode(otherlv_3, grammarAccess.getListAccess().getListKeyword_2_1());
			}
			    |
			otherlv_4=Table_1
			{
				newLeafNode(otherlv_4, grammarAccess.getListAccess().getTableKeyword_2_2());
			}
		)
		otherlv_5=With
		{
			newLeafNode(otherlv_5, grammarAccess.getListAccess().getWithKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListAccess().getTypeTypeParserRuleCall_4_0());
				}
				lv_type_6_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListRule());
					}
					set(
						$current,
						"type",
						lv_type_6_0,
						"tdt4250.pseudocode.Pcode.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7=That
			{
				newLeafNode(otherlv_7, grammarAccess.getListAccess().getThatKeyword_5_0());
			}
			otherlv_8=Contains
			{
				newLeafNode(otherlv_8, grammarAccess.getListAccess().getContainsKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getListAccess().getElementsLiteralExpressionParserRuleCall_5_2_0());
					}
					lv_elements_9_0=ruleLiteralExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListRule());
						}
						add(
							$current,
							"elements",
							lv_elements_9_0,
							"tdt4250.pseudocode.Pcode.LiteralExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_10=Comma
				{
					newLeafNode(otherlv_10, grammarAccess.getListAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getListAccess().getElementsLiteralExpressionParserRuleCall_5_3_1_0());
						}
						lv_elements_11_0=ruleLiteralExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getListRule());
							}
							add(
								$current,
								"elements",
								lv_elements_11_0,
								"tdt4250.pseudocode.Pcode.LiteralExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleCollectionLitteral
entryRuleCollectionLitteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionLitteralRule()); }
	iv_ruleCollectionLitteral=ruleCollectionLitteral
	{ $current=$iv_ruleCollectionLitteral.current; }
	EOF;

// Rule CollectionLitteral
ruleCollectionLitteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCollectionLitteralAccess().getSetLitteralParserRuleCall_0());
		}
		this_SetLitteral_0=ruleSetLitteral
		{
			$current = $this_SetLitteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionLitteralAccess().getListLitteralParserRuleCall_1());
		}
		this_ListLitteral_1=ruleListLitteral
		{
			$current = $this_ListLitteral_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSetLitteral
entryRuleSetLitteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetLitteralRule()); }
	iv_ruleSetLitteral=ruleSetLitteral
	{ $current=$iv_ruleSetLitteral.current; }
	EOF;

// Rule SetLitteral
ruleSetLitteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSetLitteralAccess().getSetLitteralAction_0(),
					$current);
			}
		)
		otherlv_1=LeftCurlyBracket
		{
			newLeafNode(otherlv_1, grammarAccess.getSetLitteralAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetLitteralAccess().getElementsLiteralExpressionParserRuleCall_2_0());
				}
				lv_elements_2_0=ruleLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetLitteralRule());
					}
					add(
						$current,
						"elements",
						lv_elements_2_0,
						"tdt4250.pseudocode.Pcode.LiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=Comma
			{
				newLeafNode(otherlv_3, grammarAccess.getSetLitteralAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSetLitteralAccess().getElementsLiteralExpressionParserRuleCall_3_1_0());
					}
					lv_elements_4_0=ruleLiteralExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetLitteralRule());
						}
						add(
							$current,
							"elements",
							lv_elements_4_0,
							"tdt4250.pseudocode.Pcode.LiteralExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=RightCurlyBracket
		{
			newLeafNode(otherlv_5, grammarAccess.getSetLitteralAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleListLitteral
entryRuleListLitteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListLitteralRule()); }
	iv_ruleListLitteral=ruleListLitteral
	{ $current=$iv_ruleListLitteral.current; }
	EOF;

// Rule ListLitteral
ruleListLitteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getListLitteralAccess().getListLitteralAction_0(),
					$current);
			}
		)
		otherlv_1=LeftSquareBracket
		{
			newLeafNode(otherlv_1, grammarAccess.getListLitteralAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListLitteralAccess().getElementsLiteralExpressionParserRuleCall_2_0());
				}
				lv_elements_2_0=ruleLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListLitteralRule());
					}
					add(
						$current,
						"elements",
						lv_elements_2_0,
						"tdt4250.pseudocode.Pcode.LiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=Comma
			{
				newLeafNode(otherlv_3, grammarAccess.getListLitteralAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getListLitteralAccess().getElementsLiteralExpressionParserRuleCall_3_1_0());
					}
					lv_elements_4_0=ruleLiteralExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListLitteralRule());
						}
						add(
							$current,
							"elements",
							lv_elements_4_0,
							"tdt4250.pseudocode.Pcode.LiteralExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=RightSquareBracket
		{
			newLeafNode(otherlv_5, grammarAccess.getListLitteralAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleCollectionAccessor
entryRuleCollectionAccessor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionAccessorRule()); }
	iv_ruleCollectionAccessor=ruleCollectionAccessor
	{ $current=$iv_ruleCollectionAccessor.current; }
	EOF;

// Rule CollectionAccessor
ruleCollectionAccessor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCollectionAccessorAccess().getCollectionAccessorAction_0(),
					$current);
			}
		)
		(
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCollectionAccessorRule());
							}
						}
						otherlv_1=RULE_ID
						{
							newLeafNode(otherlv_1, grammarAccess.getCollectionAccessorAccess().getCollectionVariableCrossReference_1_0_0_0());
						}
					)
				)
				(
					otherlv_2=LeftSquareBracket
					{
						newLeafNode(otherlv_2, grammarAccess.getCollectionAccessorAccess().getLeftSquareBracketKeyword_1_0_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getCollectionAccessorAccess().getAccessorLiteralExpressionParserRuleCall_1_0_1_1_0());
							}
							lv_accessor_3_0=ruleLiteralExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getCollectionAccessorRule());
								}
								add(
									$current,
									"accessor",
									lv_accessor_3_0,
									"tdt4250.pseudocode.Pcode.LiteralExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_4=RightSquareBracket
					{
						newLeafNode(otherlv_4, grammarAccess.getCollectionAccessorAccess().getRightSquareBracketKeyword_1_0_1_2());
					}
				)+
			)
			    |
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCollectionAccessorRule());
							}
						}
						otherlv_5=RULE_ID
						{
							newLeafNode(otherlv_5, grammarAccess.getCollectionAccessorAccess().getCollectionVariableCrossReference_1_1_0_0());
						}
					)
				)
				otherlv_6=At
				{
					newLeafNode(otherlv_6, grammarAccess.getCollectionAccessorAccess().getAtKeyword_1_1_1());
				}
				(
					otherlv_7=Index
					{
						newLeafNode(otherlv_7, grammarAccess.getCollectionAccessorAccess().getIndexKeyword_1_1_2());
					}
				)?
				(
					(
						{
							newCompositeNode(grammarAccess.getCollectionAccessorAccess().getAccessorLiteralExpressionParserRuleCall_1_1_3_0());
						}
						lv_accessor_8_0=ruleLiteralExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCollectionAccessorRule());
							}
							add(
								$current,
								"accessor",
								lv_accessor_8_0,
								"tdt4250.pseudocode.Pcode.LiteralExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_9=Comma
					{
						newLeafNode(otherlv_9, grammarAccess.getCollectionAccessorAccess().getCommaKeyword_1_1_4_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getCollectionAccessorAccess().getAccessorLiteralExpressionParserRuleCall_1_1_4_1_0());
							}
							lv_accessor_10_0=ruleLiteralExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getCollectionAccessorRule());
								}
								add(
									$current,
									"accessor",
									lv_accessor_10_0,
									"tdt4250.pseudocode.Pcode.LiteralExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)
	)
;

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	iv_ruleBooleanExpression=ruleBooleanExpression
	{ $current=$iv_ruleBooleanExpression.current; }
	EOF;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getBooleanExpressionAccess().getAndOrExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getBooleanExpressionAccess().getOpOrOperatorParserRuleCall_1_0_1_0_0());
							}
							lv_op_2_1=ruleOrOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
								}
								set(
									$current,
									"op",
									lv_op_2_1,
									"tdt4250.pseudocode.Pcode.OrOperator");
								afterParserOrEnumRuleCall();
							}
							    |
							{
								newCompositeNode(grammarAccess.getBooleanExpressionAccess().getOpAndOperatorParserRuleCall_1_0_1_0_1());
							}
							lv_op_2_2=ruleAndOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
								}
								set(
									$current,
									"op",
									lv_op_2_2,
									"tdt4250.pseudocode.Pcode.AndOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanExpressionAccess().getRightComparisonParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"tdt4250.pseudocode.Pcode.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOrOperator
entryRuleOrOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOrOperatorRule()); }
	iv_ruleOrOperator=ruleOrOperator
	{ $current=$iv_ruleOrOperator.current.getText(); }
	EOF;

// Rule OrOperator
ruleOrOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=VerticalLine
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOrOperatorAccess().getVerticalLineKeyword_0());
		}
		    |
		kw=Or
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOrOperatorAccess().getOrKeyword_1());
		}
	)
;

// Entry rule entryRuleAndOperator
entryRuleAndOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAndOperatorRule()); }
	iv_ruleAndOperator=ruleAndOperator
	{ $current=$iv_ruleAndOperator.current.getText(); }
	EOF;

// Rule AndOperator
ruleAndOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=Ampersand
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAndOperatorAccess().getAmpersandKeyword_0());
		}
		    |
		kw=And
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAndOperatorAccess().getAndKeyword_1());
		}
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getEqualsParserRuleCall_0());
		}
		this_Equals_0=ruleEquals
		{
			$current = $this_Equals_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						(
							lv_op_2_1=LessThanSign
							{
								newLeafNode(lv_op_2_1, grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getComparisonRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_1, null);
							}
							    |
							lv_op_2_2=LessThen
							{
								newLeafNode(lv_op_2_2, grammarAccess.getComparisonAccess().getOpLessThenKeyword_1_0_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getComparisonRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_2, null);
							}
							    |
							lv_op_2_3=GreaterThanSign
							{
								newLeafNode(lv_op_2_3, grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_0_1_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getComparisonRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_3, null);
							}
							    |
							lv_op_2_4=BiggerThen
							{
								newLeafNode(lv_op_2_4, grammarAccess.getComparisonAccess().getOpBiggerThenKeyword_1_0_1_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getComparisonRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_4, null);
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRightEqualsParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleEquals
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"tdt4250.pseudocode.Pcode.Equals");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquals
entryRuleEquals returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualsRule()); }
	iv_ruleEquals=ruleEquals
	{ $current=$iv_ruleEquals.current; }
	EOF;

// Rule Equals
ruleEquals returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualsAccess().getAdditionParserRuleCall_0());
		}
		this_Addition_0=ruleAddition
		{
			$current = $this_Addition_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getEqualsAccess().getEqualsLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						(
							lv_op_2_1=EqualsSignEqualsSign
							{
								newLeafNode(lv_op_2_1, grammarAccess.getEqualsAccess().getOpEqualsSignEqualsSignKeyword_1_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getEqualsRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_1, null);
							}
							    |
							lv_op_2_2=LessThanSignEqualsSign
							{
								newLeafNode(lv_op_2_2, grammarAccess.getEqualsAccess().getOpLessThanSignEqualsSignKeyword_1_0_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getEqualsRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_2, null);
							}
							    |
							lv_op_2_3=GreaterThanSignEqualsSign
							{
								newLeafNode(lv_op_2_3, grammarAccess.getEqualsAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getEqualsRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_3, null);
							}
							    |
							lv_op_2_4=ExclamationMarkEqualsSign
							{
								newLeafNode(lv_op_2_4, grammarAccess.getEqualsAccess().getOpExclamationMarkEqualsSignKeyword_1_0_1_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getEqualsRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_4, null);
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualsAccess().getRightAdditionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleAddition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualsRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"tdt4250.pseudocode.Pcode.Addition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticExpressionRule()); }
	iv_ruleArithmeticExpression=ruleArithmeticExpression
	{ $current=$iv_ruleArithmeticExpression.current; }
	EOF;

// Rule ArithmeticExpression
ruleArithmeticExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getAdditionParserRuleCall());
	}
	this_Addition_0=ruleAddition
	{
		$current = $this_Addition_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0(),
								$current);
						}
					)
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getPlusOperatorParserRuleCall_1_0_0_1());
					}
					rulePlusOperator
					{
						afterParserOrEnumRuleCall();
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0(),
								$current);
						}
					)
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getMinusOperatorParserRuleCall_1_0_1_1());
					}
					ruleMinusOperator
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"tdt4250.pseudocode.Pcode.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePlusOperator
entryRulePlusOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPlusOperatorRule()); }
	iv_rulePlusOperator=rulePlusOperator
	{ $current=$iv_rulePlusOperator.current.getText(); }
	EOF;

// Rule PlusOperator
rulePlusOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=PlusSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPlusOperatorAccess().getPlusSignKeyword_0());
		}
		    |
		kw=Plus
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPlusOperatorAccess().getPlusKeyword_1());
		}
	)
;

// Entry rule entryRuleMinusOperator
entryRuleMinusOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMinusOperatorRule()); }
	iv_ruleMinusOperator=ruleMinusOperator
	{ $current=$iv_ruleMinusOperator.current.getText(); }
	EOF;

// Rule MinusOperator
ruleMinusOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=HyphenMinus
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMinusOperatorAccess().getHyphenMinusKeyword_0());
		}
		    |
		kw=Minus
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMinusOperatorAccess().getMinusKeyword_1());
		}
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getPrefixedParserRuleCall_0());
		}
		this_Prefixed_0=rulePrefixed
		{
			$current = $this_Prefixed_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMultiplicationAccess().getMultiOrDivLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getMultiplicationAccess().getOpTimesOperatorParserRuleCall_1_0_1_0_0());
							}
							lv_op_2_1=ruleTimesOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
								}
								set(
									$current,
									"op",
									lv_op_2_1,
									"tdt4250.pseudocode.Pcode.TimesOperator");
								afterParserOrEnumRuleCall();
							}
							    |
							{
								newCompositeNode(grammarAccess.getMultiplicationAccess().getOpDivideOperatorParserRuleCall_1_0_1_0_1());
							}
							lv_op_2_2=ruleDivideOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
								}
								set(
									$current,
									"op",
									lv_op_2_2,
									"tdt4250.pseudocode.Pcode.DivideOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPrefixedParserRuleCall_1_1_0());
					}
					lv_right_3_0=rulePrefixed
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"tdt4250.pseudocode.Pcode.Prefixed");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTimesOperator
entryRuleTimesOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTimesOperatorRule()); }
	iv_ruleTimesOperator=ruleTimesOperator
	{ $current=$iv_ruleTimesOperator.current.getText(); }
	EOF;

// Rule TimesOperator
ruleTimesOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=Asterisk
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimesOperatorAccess().getAsteriskKeyword_0());
		}
		    |
		kw=Times
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimesOperatorAccess().getTimesKeyword_1());
		}
	)
;

// Entry rule entryRuleDivideOperator
entryRuleDivideOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDivideOperatorRule()); }
	iv_ruleDivideOperator=ruleDivideOperator
	{ $current=$iv_ruleDivideOperator.current.getText(); }
	EOF;

// Rule DivideOperator
ruleDivideOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=Solidus
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDivideOperatorAccess().getSolidusKeyword_0());
		}
		    |
		kw=Divide
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDivideOperatorAccess().getDivideKeyword_1());
		}
		    |
		kw=PercentSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDivideOperatorAccess().getPercentSignKeyword_2());
		}
		    |
		kw=Modulo
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDivideOperatorAccess().getModuloKeyword_3());
		}
	)
;

// Entry rule entryRulePrefixed
entryRulePrefixed returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrefixedRule()); }
	iv_rulePrefixed=rulePrefixed
	{ $current=$iv_rulePrefixed.current; }
	EOF;

// Rule Prefixed
rulePrefixed returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrefixedAccess().getBooleanNegationAction_0_0(),
						$current);
				}
			)
			(
				(ExclamationMark)=>
				otherlv_1=ExclamationMark
				{
					newLeafNode(otherlv_1, grammarAccess.getPrefixedAccess().getExclamationMarkKeyword_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrefixedAccess().getExpressionAtomicParserRuleCall_0_2_0());
					}
					lv_expression_2_0=ruleAtomic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrefixedRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"tdt4250.pseudocode.Pcode.Atomic");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrefixedAccess().getArithmeticSignedAction_1_0(),
						$current);
				}
			)
			(
				(ruleMinusOperator)=>
				{
					newCompositeNode(grammarAccess.getPrefixedAccess().getMinusOperatorParserRuleCall_1_1());
				}
				ruleMinusOperator
				{
					afterParserOrEnumRuleCall();
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrefixedAccess().getExpressionAtomicParserRuleCall_1_2_0());
					}
					lv_expression_5_0=ruleAtomic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrefixedRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"tdt4250.pseudocode.Pcode.Atomic");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrefixedAccess().getAtomicParserRuleCall_2());
		}
		this_Atomic_6=ruleAtomic
		{
			$current = $this_Atomic_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	iv_ruleAtomic=ruleAtomic
	{ $current=$iv_ruleAtomic.current; }
	EOF;

// Rule Atomic
ruleAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getParenthesizedExpressionAction_0_0(),
						$current);
				}
			)
			otherlv_1=LeftParenthesis
			{
				newLeafNode(otherlv_1, grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicAccess().getExpressionLiteralExpressionParserRuleCall_0_2_0());
					}
					lv_expression_2_0=ruleLiteralExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"tdt4250.pseudocode.Pcode.LiteralExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=RightParenthesis
			{
				newLeafNode(otherlv_3, grammarAccess.getAtomicAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getNumberLiteralAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_5_0=RULE_INT
					{
						newLeafNode(lv_value_5_0, grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getDoubleLiteralAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_7_0=RULE_DOUBLE
					{
						newLeafNode(lv_value_7_0, grammarAccess.getAtomicAccess().getValueDOUBLETerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_7_0,
							"tdt4250.pseudocode.Pcode.DOUBLE");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getStringLiteralAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_value_9_0=RULE_STRING
					{
						newLeafNode(lv_value_9_0, grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_9_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getBooleanLiteralAction_4_0(),
						$current);
				}
			)
			(
				(
					(
						lv_value_11_1=True
						{
							newLeafNode(lv_value_11_1, grammarAccess.getAtomicAccess().getValueTrueKeyword_4_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicRule());
							}
							setWithLastConsumed($current, "value", lv_value_11_1, null);
						}
						    |
						lv_value_11_2=False
						{
							newLeafNode(lv_value_11_2, grammarAccess.getAtomicAccess().getValueFalseKeyword_4_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicRule());
							}
							setWithLastConsumed($current, "value", lv_value_11_2, null);
						}
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getVariableReferenceAction_5_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
					}
					otherlv_13=RULE_ID
					{
						newLeafNode(otherlv_13, grammarAccess.getAtomicAccess().getRefVariableCrossReference_5_1_0());
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getFunctionCallParserRuleCall_6());
		}
		this_FunctionCall_14=ruleFunctionCall
		{
			$current = $this_FunctionCall_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getSizeExpressionParserRuleCall_7());
		}
		this_SizeExpression_15=ruleSizeExpression
		{
			$current = $this_SizeExpression_15.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFunctionCallAccess().getFunctionCallAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getRefFunctionCrossReference_1_0());
				}
			)
		)
		otherlv_2=LeftParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentsLiteralExpressionParserRuleCall_3_0_0());
					}
					lv_arguments_3_0=ruleLiteralExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_3_0,
							"tdt4250.pseudocode.Pcode.LiteralExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=Comma
				{
					newLeafNode(otherlv_4, grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentsLiteralExpressionParserRuleCall_3_1_1_0());
						}
						lv_arguments_5_0=ruleLiteralExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_5_0,
								"tdt4250.pseudocode.Pcode.LiteralExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=RightParenthesis
		{
			newLeafNode(otherlv_6, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleSizeExpression
entryRuleSizeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSizeExpressionRule()); }
	iv_ruleSizeExpression=ruleSizeExpression
	{ $current=$iv_ruleSizeExpression.current; }
	EOF;

// Rule SizeExpression
ruleSizeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSizeExpressionAccess().getSizeExpressionAction_0(),
					$current);
			}
		)
		otherlv_1=Size
		{
			newLeafNode(otherlv_1, grammarAccess.getSizeExpressionAccess().getSizeKeyword_1());
		}
		otherlv_2=Of
		{
			newLeafNode(otherlv_2, grammarAccess.getSizeExpressionAccess().getOfKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSizeExpressionAccess().getValueAtomicParserRuleCall_3_0());
				}
				lv_value_3_0=ruleAtomic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSizeExpressionRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"tdt4250.pseudocode.Pcode.Atomic");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTypeAccess().getTypeAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getTypesTypeLiteralParserRuleCall_1_0_0());
					}
					lv_types_1_0=ruleTypeLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						add(
							$current,
							"types",
							lv_types_1_0,
							"tdt4250.pseudocode.Pcode.TypeLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=With
				{
					newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getWithKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTypeAccess().getTypesTypeLiteralParserRuleCall_1_1_1_0());
						}
						lv_types_3_0=ruleTypeLiteral
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypeRule());
							}
							add(
								$current,
								"types",
								lv_types_3_0,
								"tdt4250.pseudocode.Pcode.TypeLiteral");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
	)
;

// Entry rule entryRuleTypeLiteral
entryRuleTypeLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeLiteralRule()); }
	iv_ruleTypeLiteral=ruleTypeLiteral
	{ $current=$iv_ruleTypeLiteral.current.getText(); }
	EOF;

// Rule TypeLiteral
ruleTypeLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=Text
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getTextKeyword_0());
		}
		    |
		kw=Number
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getNumberKeyword_1());
		}
		    |
		kw=Decimal
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getDecimalKeyword_2());
		}
		    |
		kw=Array_1
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getArrayKeyword_3());
		}
		    |
		kw=List_1
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getListKeyword_4());
		}
		    |
		kw=Table_1
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getTableKeyword_5());
		}
	)
;
