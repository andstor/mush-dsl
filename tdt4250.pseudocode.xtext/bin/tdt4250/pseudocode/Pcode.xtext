// automatically generated by Xtext
grammar tdt4250.pseudocode.Pcode with org.eclipse.xtext.common.Terminals

import "platform:/plugin/tdt4250.pseudocode.model/model/pseudocode.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

PseudoClass returns PseudoClass:
	{PseudoClass}
	'class' name=EString
	(members+=Constructor)*
	//('\n' + ('\n')*)
	(members+=Method)*
	'end_class'
;


Member returns Member:
 PseudoClass | Method | Constructor ;

Constructor returns Constructor:
	{Constructor}
	name='('
	(parameters+=Parameter ("," parameters+=Parameter)*)*	
	')'
;

Method returns Method:
	{Method}
	'method' name=EString
	'('
	(parameters+=Parameter ("," parameters+=Parameter)*)*		
	')'
	//('\n' ('\n')*)
	body=Body
	'end_method'	
;

Body returns Body:
	{Body}
	statements += (Variable | If | For | While|Stop)*
	statements+=Stop
;


Variable returns Variable:
	{Variable}
	expressions+=Expression 
;

Expression returns Expression:
	{Expression}
	(
	('print' (('"'(Type)* '"')* (Type)(',' Type)*)*)
	| (EString ('='|'+='|'-=') Type (MathSigns Type)*)
	| (EString'_'(Type))
	)
;

If returns If:
	{If}
	'if' ('!'EString | EString| Type EqualVariable Type | EString ('not')? 'exists'| EString ('not')? 'knowing' EString)*
	('else' 'if' ('!'EString | EString| Type EqualVariable Type))*
	('else')?
;
For returns For:
	{For}
	(('for''(' (
	//Original for loop
	(EString '=' INT ';' EString EqualVariable Type';' EString ('++'|'--'|'+' INT|'-' INT)) 
	//For Each	
	| (EString ':' EString)	
	//Same as for each..
	|('all' EString)
	//for a given interval in list
	|('interval' INT 'to' INT 'in' EString)
	)')')
	//Instead of using for
	| ('repeat' INT 'times')
	)
	
;

While returns While:
	{While}
	('while' ('true'|('!')? EString)
	| 'repeat' 'until' EString (('or'|'and') EString )* (('=='|'!=') EString)	
	)
;


Parameter returns Parameter: 
	{Parameter}
	name=EString
;

Stop returns Stop:
	{Stop}
	('return' Type |'stop'| 'break'| 'continue')
;



Type:
	(EString | DOUBLE | INT)
;

EqualVariable:
	('==' |'<' |'<=' | '>' | '>=' | '!=')
;
MathSigns:
	('+'|'-'|'*'|'/'|'%'|'total' 'division')
;

enum VisibilityKind returns VisibilityKind:
				packagePrivate = 'packagePrivate' | private = 'private' | protected = 'protected' | public = 'public';

EString returns ecore::EString:
	STRING | ID;
	
terminal DOUBLE:
    INT '.' INT;


