/*
 * generated by Xtext 2.23.0
 */
grammar InternalPcode;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package tdt4250.pseudocode.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package tdt4250.pseudocode.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

}
@parser::members {
	private PcodeGrammarAccess grammarAccess;

	public void setGrammarAccess(PcodeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRulePseudoClass
entryRulePseudoClass
:
{ before(grammarAccess.getPseudoClassRule()); }
	 rulePseudoClass
{ after(grammarAccess.getPseudoClassRule()); } 
	 EOF 
;

// Rule PseudoClass
rulePseudoClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPseudoClassAccess().getGroup()); }
		(rule__PseudoClass__Group__0)
		{ after(grammarAccess.getPseudoClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstructor
entryRuleConstructor
:
{ before(grammarAccess.getConstructorRule()); }
	 ruleConstructor
{ after(grammarAccess.getConstructorRule()); } 
	 EOF 
;

// Rule Constructor
ruleConstructor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstructorAccess().getGroup()); }
		(rule__Constructor__Group__0)
		{ after(grammarAccess.getConstructorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethod
entryRuleMethod
:
{ before(grammarAccess.getMethodRule()); }
	 ruleMethod
{ after(grammarAccess.getMethodRule()); } 
	 EOF 
;

// Rule Method
ruleMethod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodAccess().getGroup()); }
		(rule__Method__Group__0)
		{ after(grammarAccess.getMethodAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethodBody
entryRuleMethodBody
:
{ before(grammarAccess.getMethodBodyRule()); }
	 ruleMethodBody
{ after(grammarAccess.getMethodBodyRule()); } 
	 EOF 
;

// Rule MethodBody
ruleMethodBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodBodyAccess().getGroup()); }
		(rule__MethodBody__Group__0)
		{ after(grammarAccess.getMethodBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquals
entryRuleEquals
:
{ before(grammarAccess.getEqualsRule()); }
	 ruleEquals
{ after(grammarAccess.getEqualsRule()); } 
	 EOF 
;

// Rule Equals
ruleEquals 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualsAccess().getGroup()); }
		(rule__Equals__Group__0)
		{ after(grammarAccess.getEqualsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleField
entryRuleField
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldAccess().getFieldAction()); }
		()
		{ after(grammarAccess.getFieldAccess().getFieldAction()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Alternatives_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getEStringParserRuleCall_7_1_0()); }
		ruleEString
		{ after(grammarAccess.getMethodAccess().getEStringParserRuleCall_7_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getMethodAccess().getDOUBLETerminalRuleCall_7_1_1()); }
		RULE_DOUBLE
		{ after(grammarAccess.getMethodAccess().getDOUBLETerminalRuleCall_7_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getMethodAccess().getINTTerminalRuleCall_7_1_2()); }
		RULE_INT
		{ after(grammarAccess.getMethodAccess().getINTTerminalRuleCall_7_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBody__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodBodyAccess().getEqualsParserRuleCall_1_0()); }
		ruleEquals
		{ after(grammarAccess.getMethodBodyAccess().getEqualsParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getMethodBodyAccess().getIfParserRuleCall_1_1()); }
		ruleIf
		{ after(grammarAccess.getMethodBodyAccess().getIfParserRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualsAccess().getEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getEqualsAccess().getEStringParserRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualsAccess().getDOUBLETerminalRuleCall_2_1()); }
		RULE_DOUBLE
		{ after(grammarAccess.getEqualsAccess().getDOUBLETerminalRuleCall_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getEqualsAccess().getINTTerminalRuleCall_2_2()); }
		RULE_INT
		{ after(grammarAccess.getEqualsAccess().getINTTerminalRuleCall_2_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getEqualsSignEqualsSignKeyword_2_0()); }
		'=='
		{ after(grammarAccess.getIfAccess().getEqualsSignEqualsSignKeyword_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getIfAccess().getLessThanSignKeyword_2_1()); }
		'<'
		{ after(grammarAccess.getIfAccess().getLessThanSignKeyword_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getIfAccess().getLessThanSignEqualsSignKeyword_2_2()); }
		'<='
		{ after(grammarAccess.getIfAccess().getLessThanSignEqualsSignKeyword_2_2()); }
	)
	|
	(
		{ before(grammarAccess.getIfAccess().getGreaterThanSignKeyword_2_3()); }
		'>'
		{ after(grammarAccess.getIfAccess().getGreaterThanSignKeyword_2_3()); }
	)
	|
	(
		{ before(grammarAccess.getIfAccess().getGreaterThanSignEqualsSignKeyword_2_4()); }
		'>='
		{ after(grammarAccess.getIfAccess().getGreaterThanSignEqualsSignKeyword_2_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getEStringParserRuleCall_0()); }
		ruleEString
		{ after(grammarAccess.getTypeAccess().getEStringParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getDOUBLETerminalRuleCall_1()); }
		RULE_DOUBLE
		{ after(grammarAccess.getTypeAccess().getDOUBLETerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getINTTerminalRuleCall_2()); }
		RULE_INT
		{ after(grammarAccess.getTypeAccess().getINTTerminalRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PseudoClass__Group__0__Impl
	rule__PseudoClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPseudoClassAccess().getPseudoClassAction_0()); }
	()
	{ after(grammarAccess.getPseudoClassAccess().getPseudoClassAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PseudoClass__Group__1__Impl
	rule__PseudoClass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPseudoClassAccess().getNameAssignment_1()); }
	(rule__PseudoClass__NameAssignment_1)
	{ after(grammarAccess.getPseudoClassAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PseudoClass__Group__2__Impl
	rule__PseudoClass__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPseudoClassAccess().getMembersAssignment_2()); }
	(rule__PseudoClass__MembersAssignment_2)*
	{ after(grammarAccess.getPseudoClassAccess().getMembersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PseudoClass__Group__3__Impl
	rule__PseudoClass__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPseudoClassAccess().getLineFeedKeyword_3()); }
	('\n')*
	{ after(grammarAccess.getPseudoClassAccess().getLineFeedKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PseudoClass__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPseudoClassAccess().getMembersAssignment_4()); }
	(rule__PseudoClass__MembersAssignment_4)*
	{ after(grammarAccess.getPseudoClassAccess().getMembersAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constructor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group__0__Impl
	rule__Constructor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getConstructorAction_0()); }
	()
	{ after(grammarAccess.getConstructorAccess().getConstructorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group__1__Impl
	rule__Constructor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getNameAssignment_1()); }
	(rule__Constructor__NameAssignment_1)
	{ after(grammarAccess.getConstructorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group__2__Impl
	rule__Constructor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getGroup_2()); }
	(rule__Constructor__Group_2__0)*
	{ after(grammarAccess.getConstructorAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getConstructorAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constructor__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group_2__0__Impl
	rule__Constructor__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getParametersAssignment_2_0()); }
	(rule__Constructor__ParametersAssignment_2_0)
	{ after(grammarAccess.getConstructorAccess().getParametersAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getGroup_2_1()); }
	(rule__Constructor__Group_2_1__0)*
	{ after(grammarAccess.getConstructorAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constructor__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group_2_1__0__Impl
	rule__Constructor__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getConstructorAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getParametersAssignment_2_1_1()); }
	(rule__Constructor__ParametersAssignment_2_1_1)
	{ after(grammarAccess.getConstructorAccess().getParametersAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__0__Impl
	rule__Method__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getMethodAction_0()); }
	()
	{ after(grammarAccess.getMethodAccess().getMethodAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__1__Impl
	rule__Method__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getNameAssignment_1()); }
	(rule__Method__NameAssignment_1)
	{ after(grammarAccess.getMethodAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__2__Impl
	rule__Method__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__3__Impl
	rule__Method__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_3()); }
	(rule__Method__Group_3__0)*
	{ after(grammarAccess.getMethodAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__4__Impl
	rule__Method__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getMethodAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__5__Impl
	rule__Method__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getLineFeedKeyword_5()); }
	('\n')*
	{ after(grammarAccess.getMethodAccess().getLineFeedKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__6__Impl
	rule__Method__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_6()); }
	(rule__Method__Group_6__0)*
	{ after(grammarAccess.getMethodAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_7()); }
	(rule__Method__Group_7__0)*
	{ after(grammarAccess.getMethodAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_3__0__Impl
	rule__Method__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getParametersAssignment_3_0()); }
	(rule__Method__ParametersAssignment_3_0)
	{ after(grammarAccess.getMethodAccess().getParametersAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_3_1()); }
	(rule__Method__Group_3_1__0)*
	{ after(grammarAccess.getMethodAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_3_1__0__Impl
	rule__Method__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getMethodAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getParametersAssignment_3_1_1()); }
	(rule__Method__ParametersAssignment_3_1_1)
	{ after(grammarAccess.getMethodAccess().getParametersAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6__0__Impl
	rule__Method__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getParametersAssignment_6_0()); }
	(rule__Method__ParametersAssignment_6_0)
	{ after(grammarAccess.getMethodAccess().getParametersAssignment_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_6_1()); }
	(rule__Method__Group_6_1__0)*
	{ after(grammarAccess.getMethodAccess().getGroup_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_6_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6_1__0__Impl
	rule__Method__Group_6_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getLineFeedKeyword_6_1_0()); }
	('\n')*
	{ after(grammarAccess.getMethodAccess().getLineFeedKeyword_6_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getParametersAssignment_6_1_1()); }
	(rule__Method__ParametersAssignment_6_1_1)
	{ after(grammarAccess.getMethodAccess().getParametersAssignment_6_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_7__0__Impl
	rule__Method__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getReturnKeyword_7_0()); }
	'return'
	{ after(grammarAccess.getMethodAccess().getReturnKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getAlternatives_7_1()); }
	(rule__Method__Alternatives_7_1)
	{ after(grammarAccess.getMethodAccess().getAlternatives_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodBody__Group__0__Impl
	rule__MethodBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodBodyAccess().getParameterAction_0()); }
	()
	{ after(grammarAccess.getMethodBodyAccess().getParameterAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodBody__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodBodyAccess().getAlternatives_1()); }
	(rule__MethodBody__Alternatives_1)
	{ after(grammarAccess.getMethodBodyAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equals__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group__0__Impl
	rule__Equals__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getEStringParserRuleCall_0()); }
	ruleEString
	{ after(grammarAccess.getEqualsAccess().getEStringParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group__1__Impl
	rule__Equals__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getEqualsAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getAlternatives_2()); }
	(rule__Equals__Alternatives_2)
	{ after(grammarAccess.getEqualsAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getTypeParserRuleCall_1()); }
	ruleType
	{ after(grammarAccess.getIfAccess().getTypeParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getAlternatives_2()); }
	(rule__If__Alternatives_2)
	{ after(grammarAccess.getIfAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getTypeParserRuleCall_3()); }
	ruleType
	{ after(grammarAccess.getIfAccess().getTypeParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getParameterAction_0()); }
	()
	{ after(grammarAccess.getParameterAccess().getParameterAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getNameAssignment_1()); }
	(rule__Parameter__NameAssignment_1)
	{ after(grammarAccess.getParameterAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PseudoClass__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPseudoClassAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getPseudoClassAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__MembersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPseudoClassAccess().getMembersConstructorParserRuleCall_2_0()); }
		ruleConstructor
		{ after(grammarAccess.getPseudoClassAccess().getMembersConstructorParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__MembersAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPseudoClassAccess().getMembersMethodParserRuleCall_4_0()); }
		ruleMethod
		{ after(grammarAccess.getPseudoClassAccess().getMembersMethodParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructorAccess().getNameLeftParenthesisKeyword_1_0()); }
		(
			{ before(grammarAccess.getConstructorAccess().getNameLeftParenthesisKeyword_1_0()); }
			'('
			{ after(grammarAccess.getConstructorAccess().getNameLeftParenthesisKeyword_1_0()); }
		)
		{ after(grammarAccess.getConstructorAccess().getNameLeftParenthesisKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__ParametersAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructorAccess().getParametersParameterParserRuleCall_2_0_0()); }
		ruleParameter
		{ after(grammarAccess.getConstructorAccess().getParametersParameterParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__ParametersAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructorAccess().getParametersParameterParserRuleCall_2_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getConstructorAccess().getParametersParameterParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getMethodAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ParametersAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getParametersParameterParserRuleCall_3_0_0()); }
		ruleParameter
		{ after(grammarAccess.getMethodAccess().getParametersParameterParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ParametersAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getParametersParameterParserRuleCall_3_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getMethodAccess().getParametersParameterParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ParametersAssignment_6_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getParametersMethodBodyParserRuleCall_6_0_0()); }
		ruleMethodBody
		{ after(grammarAccess.getMethodAccess().getParametersMethodBodyParserRuleCall_6_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ParametersAssignment_6_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getParametersMethodBodyParserRuleCall_6_1_1_0()); }
		ruleMethodBody
		{ after(grammarAccess.getMethodAccess().getParametersMethodBodyParserRuleCall_6_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
