/*
 * generated by Xtext 2.23.0
 */
package tdt4250.pseudocode.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import tdt4250.pseudocode.ide.contentassist.antlr.internal.InternalPcodeParser;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

public class PcodeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PcodeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PcodeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMemberAccess().getAlternatives(), "rule__Member__Alternatives");
			builder.put(grammarAccess.getMethodAccess().getAlternatives_7_1(), "rule__Method__Alternatives_7_1");
			builder.put(grammarAccess.getMethodBodyAccess().getAlternatives_1(), "rule__MethodBody__Alternatives_1");
			builder.put(grammarAccess.getEqualsAccess().getAlternatives_2(), "rule__Equals__Alternatives_2");
			builder.put(grammarAccess.getIfAccess().getAlternatives_2(), "rule__If__Alternatives_2");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getVisibilityKindAccess().getAlternatives(), "rule__VisibilityKind__Alternatives");
			builder.put(grammarAccess.getPseudoClassAccess().getGroup(), "rule__PseudoClass__Group__0");
			builder.put(grammarAccess.getConstructorAccess().getGroup(), "rule__Constructor__Group__0");
			builder.put(grammarAccess.getConstructorAccess().getGroup_2(), "rule__Constructor__Group_2__0");
			builder.put(grammarAccess.getConstructorAccess().getGroup_2_1(), "rule__Constructor__Group_2_1__0");
			builder.put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_3(), "rule__Method__Group_3__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_3_1(), "rule__Method__Group_3_1__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_6(), "rule__Method__Group_6__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_6_1(), "rule__Method__Group_6_1__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_7(), "rule__Method__Group_7__0");
			builder.put(grammarAccess.getMethodBodyAccess().getGroup(), "rule__MethodBody__Group__0");
			builder.put(grammarAccess.getEqualsAccess().getGroup(), "rule__Equals__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getForAccess().getGroup(), "rule__For__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getPseudoClassAccess().getNameAssignment_1(), "rule__PseudoClass__NameAssignment_1");
			builder.put(grammarAccess.getPseudoClassAccess().getMembersAssignment_2(), "rule__PseudoClass__MembersAssignment_2");
			builder.put(grammarAccess.getPseudoClassAccess().getMembersAssignment_4(), "rule__PseudoClass__MembersAssignment_4");
			builder.put(grammarAccess.getConstructorAccess().getNameAssignment_1(), "rule__Constructor__NameAssignment_1");
			builder.put(grammarAccess.getConstructorAccess().getParametersAssignment_2_0(), "rule__Constructor__ParametersAssignment_2_0");
			builder.put(grammarAccess.getConstructorAccess().getParametersAssignment_2_1_1(), "rule__Constructor__ParametersAssignment_2_1_1");
			builder.put(grammarAccess.getMethodAccess().getNameAssignment_1(), "rule__Method__NameAssignment_1");
			builder.put(grammarAccess.getMethodAccess().getParametersAssignment_3_0(), "rule__Method__ParametersAssignment_3_0");
			builder.put(grammarAccess.getMethodAccess().getParametersAssignment_3_1_1(), "rule__Method__ParametersAssignment_3_1_1");
			builder.put(grammarAccess.getMethodAccess().getParametersAssignment_6_0(), "rule__Method__ParametersAssignment_6_0");
			builder.put(grammarAccess.getMethodAccess().getParametersAssignment_6_1_1(), "rule__Method__ParametersAssignment_6_1_1");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PcodeGrammarAccess grammarAccess;

	@Override
	protected InternalPcodeParser createParser() {
		InternalPcodeParser result = new InternalPcodeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PcodeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PcodeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
