/*
 * generated by Xtext 2.23.0
 */
package tdt4250.pseudocode.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import tdt4250.pseudocode.ide.contentassist.antlr.internal.InternalPcodeParser;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

public class PcodeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PcodeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PcodeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMemberAccess().getAlternatives(), "rule__Member__Alternatives");
			builder.put(grammarAccess.getBodyAccess().getStatementsAlternatives_1_0(), "rule__Body__StatementsAlternatives_1_0");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives_1(), "rule__Expression__Alternatives_1");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives_1_1_1(), "rule__Expression__Alternatives_1_1_1");
			builder.put(grammarAccess.getIfAccess().getAlternatives_2(), "rule__If__Alternatives_2");
			builder.put(grammarAccess.getIfAccess().getAlternatives_3_2(), "rule__If__Alternatives_3_2");
			builder.put(grammarAccess.getForAccess().getAlternatives_1(), "rule__For__Alternatives_1");
			builder.put(grammarAccess.getForAccess().getAlternatives_1_0_2(), "rule__For__Alternatives_1_0_2");
			builder.put(grammarAccess.getForAccess().getAlternatives_1_0_2_0_9(), "rule__For__Alternatives_1_0_2_0_9");
			builder.put(grammarAccess.getWhileAccess().getAlternatives_1(), "rule__While__Alternatives_1");
			builder.put(grammarAccess.getWhileAccess().getAlternatives_1_0_1(), "rule__While__Alternatives_1_0_1");
			builder.put(grammarAccess.getWhileAccess().getAlternatives_1_1_3_0(), "rule__While__Alternatives_1_1_3_0");
			builder.put(grammarAccess.getWhileAccess().getAlternatives_1_1_4_0(), "rule__While__Alternatives_1_1_4_0");
			builder.put(grammarAccess.getStopAccess().getAlternatives_1(), "rule__Stop__Alternatives_1");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getEqualVariableAccess().getAlternatives(), "rule__EqualVariable__Alternatives");
			builder.put(grammarAccess.getMathSignsAccess().getAlternatives(), "rule__MathSigns__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getVisibilityKindAccess().getAlternatives(), "rule__VisibilityKind__Alternatives");
			builder.put(grammarAccess.getPseudoClassAccess().getGroup(), "rule__PseudoClass__Group__0");
			builder.put(grammarAccess.getConstructorAccess().getGroup(), "rule__Constructor__Group__0");
			builder.put(grammarAccess.getConstructorAccess().getGroup_2(), "rule__Constructor__Group_2__0");
			builder.put(grammarAccess.getConstructorAccess().getGroup_2_1(), "rule__Constructor__Group_2_1__0");
			builder.put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_4(), "rule__Method__Group_4__0");
			builder.put(grammarAccess.getMethodAccess().getGroup_4_1(), "rule__Method__Group_4_1__0");
			builder.put(grammarAccess.getBodyAccess().getGroup(), "rule__Body__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1_0(), "rule__Expression__Group_1_0__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1_0_1(), "rule__Expression__Group_1_0_1__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1_0_1_0(), "rule__Expression__Group_1_0_1_0__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1_0_1_2(), "rule__Expression__Group_1_0_1_2__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1_1(), "rule__Expression__Group_1_1__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1_1_3(), "rule__Expression__Group_1_1_3__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1_2(), "rule__Expression__Group_1_2__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup_2_0(), "rule__If__Group_2_0__0");
			builder.put(grammarAccess.getIfAccess().getGroup_2_2(), "rule__If__Group_2_2__0");
			builder.put(grammarAccess.getIfAccess().getGroup_2_3(), "rule__If__Group_2_3__0");
			builder.put(grammarAccess.getIfAccess().getGroup_2_4(), "rule__If__Group_2_4__0");
			builder.put(grammarAccess.getIfAccess().getGroup_3(), "rule__If__Group_3__0");
			builder.put(grammarAccess.getIfAccess().getGroup_3_2_0(), "rule__If__Group_3_2_0__0");
			builder.put(grammarAccess.getIfAccess().getGroup_3_2_2(), "rule__If__Group_3_2_2__0");
			builder.put(grammarAccess.getForAccess().getGroup(), "rule__For__Group__0");
			builder.put(grammarAccess.getForAccess().getGroup_1_0(), "rule__For__Group_1_0__0");
			builder.put(grammarAccess.getForAccess().getGroup_1_0_2_0(), "rule__For__Group_1_0_2_0__0");
			builder.put(grammarAccess.getForAccess().getGroup_1_0_2_0_9_2(), "rule__For__Group_1_0_2_0_9_2__0");
			builder.put(grammarAccess.getForAccess().getGroup_1_0_2_0_9_3(), "rule__For__Group_1_0_2_0_9_3__0");
			builder.put(grammarAccess.getForAccess().getGroup_1_0_2_1(), "rule__For__Group_1_0_2_1__0");
			builder.put(grammarAccess.getForAccess().getGroup_1_0_2_2(), "rule__For__Group_1_0_2_2__0");
			builder.put(grammarAccess.getForAccess().getGroup_1_0_2_3(), "rule__For__Group_1_0_2_3__0");
			builder.put(grammarAccess.getForAccess().getGroup_1_1(), "rule__For__Group_1_1__0");
			builder.put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
			builder.put(grammarAccess.getWhileAccess().getGroup_1_0(), "rule__While__Group_1_0__0");
			builder.put(grammarAccess.getWhileAccess().getGroup_1_0_1_1(), "rule__While__Group_1_0_1_1__0");
			builder.put(grammarAccess.getWhileAccess().getGroup_1_1(), "rule__While__Group_1_1__0");
			builder.put(grammarAccess.getWhileAccess().getGroup_1_1_3(), "rule__While__Group_1_1_3__0");
			builder.put(grammarAccess.getWhileAccess().getGroup_1_1_4(), "rule__While__Group_1_1_4__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getStopAccess().getGroup(), "rule__Stop__Group__0");
			builder.put(grammarAccess.getStopAccess().getGroup_1_0(), "rule__Stop__Group_1_0__0");
			builder.put(grammarAccess.getMathSignsAccess().getGroup_5(), "rule__MathSigns__Group_5__0");
			builder.put(grammarAccess.getPseudoClassAccess().getNameAssignment_2(), "rule__PseudoClass__NameAssignment_2");
			builder.put(grammarAccess.getPseudoClassAccess().getMembersAssignment_3(), "rule__PseudoClass__MembersAssignment_3");
			builder.put(grammarAccess.getPseudoClassAccess().getMembersAssignment_4(), "rule__PseudoClass__MembersAssignment_4");
			builder.put(grammarAccess.getConstructorAccess().getNameAssignment_1(), "rule__Constructor__NameAssignment_1");
			builder.put(grammarAccess.getConstructorAccess().getParametersAssignment_2_0(), "rule__Constructor__ParametersAssignment_2_0");
			builder.put(grammarAccess.getConstructorAccess().getParametersAssignment_2_1_1(), "rule__Constructor__ParametersAssignment_2_1_1");
			builder.put(grammarAccess.getMethodAccess().getNameAssignment_2(), "rule__Method__NameAssignment_2");
			builder.put(grammarAccess.getMethodAccess().getParametersAssignment_4_0(), "rule__Method__ParametersAssignment_4_0");
			builder.put(grammarAccess.getMethodAccess().getParametersAssignment_4_1_1(), "rule__Method__ParametersAssignment_4_1_1");
			builder.put(grammarAccess.getMethodAccess().getBodyAssignment_6(), "rule__Method__BodyAssignment_6");
			builder.put(grammarAccess.getBodyAccess().getStatementsAssignment_1(), "rule__Body__StatementsAssignment_1");
			builder.put(grammarAccess.getBodyAccess().getStatementsAssignment_2(), "rule__Body__StatementsAssignment_2");
			builder.put(grammarAccess.getVariableAccess().getExpressionsAssignment_1(), "rule__Variable__ExpressionsAssignment_1");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PcodeGrammarAccess grammarAccess;

	@Override
	protected InternalPcodeParser createParser() {
		InternalPcodeParser result = new InternalPcodeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PcodeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PcodeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
