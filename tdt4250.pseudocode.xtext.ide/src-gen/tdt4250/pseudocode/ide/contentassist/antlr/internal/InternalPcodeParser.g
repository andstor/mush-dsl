/*
 * generated by Xtext 2.22.0
 */
parser grammar InternalPcodeParser;

options {
	tokenVocab=InternalPcodeLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@header {
package tdt4250.pseudocode.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

}
@members {
	private PcodeGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("CircumflexAccent", "'^'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("AmpersandAmpersand", "'&&'");
		tokenNameToValue.put("PlusSignPlusSign", "'++'");
		tokenNameToValue.put("PlusSignEqualsSign", "'+='");
		tokenNameToValue.put("HyphenMinusHyphenMinus", "'--'");
		tokenNameToValue.put("HyphenMinusEqualsSign", "'-='");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("EqualsSignEqualsSign", "'=='");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("At", "'at'");
		tokenNameToValue.put("If", "'if'");
		tokenNameToValue.put("Is", "'is'");
		tokenNameToValue.put("To", "'to'");
		tokenNameToValue.put("VerticalLineVerticalLine", "'||'");
		tokenNameToValue.put("Add", "'add'");
		tokenNameToValue.put("And", "'and'");
		tokenNameToValue.put("For", "'for'");
		tokenNameToValue.put("New", "'new'");
		tokenNameToValue.put("List_1", "'List'");
		tokenNameToValue.put("Text_1", "'Text'");
		tokenNameToValue.put("Else", "'else'");
		tokenNameToValue.put("List_1", "'list'");
		tokenNameToValue.put("Plus", "'plus'");
		tokenNameToValue.put("Stop", "'stop'");
		tokenNameToValue.put("Text_1", "'text'");
		tokenNameToValue.put("Then", "'then'");
		tokenNameToValue.put("True", "'true'");
		tokenNameToValue.put("With", "'with'");
		tokenNameToValue.put("Array_1", "'Array'");
		tokenNameToValue.put("Table_1", "'Table'");
		tokenNameToValue.put("Array_1", "'array'");
		tokenNameToValue.put("Break", "'break'");
		tokenNameToValue.put("False", "'false'");
		tokenNameToValue.put("Index", "'index'");
		tokenNameToValue.put("Minus", "'minus'");
		tokenNameToValue.put("Print", "'print'");
		tokenNameToValue.put("Table_1", "'table'");
		tokenNameToValue.put("While", "'while'");
		tokenNameToValue.put("Number_1", "'Number'");
		tokenNameToValue.put("Equals", "'equals'");
		tokenNameToValue.put("Number_1", "'number'");
		tokenNameToValue.put("Remove", "'remove'");
		tokenNameToValue.put("Return", "'return'");
		tokenNameToValue.put("Decimal_1", "'Decimal'");
		tokenNameToValue.put("Decimal_1", "'decimal'");
		tokenNameToValue.put("Contains", "'contains'");
		tokenNameToValue.put("Continue", "'continue'");
		tokenNameToValue.put("Exchange", "'exchange'");
		tokenNameToValue.put("Interval", "'interval'");
	}

	public void setGrammarAccess(PcodeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdentifier
entryRuleIdentifier
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleIdentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule Identifier
ruleIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentifierAccess().getAlternatives()); }
		(rule__Identifier__Alternatives)
		{ after(grammarAccess.getIdentifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeature
entryRuleFeature
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureAccess().getAlternatives()); }
		(rule__Feature__Alternatives)
		{ after(grammarAccess.getFeatureAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfExpression
entryRuleIfExpression
:
{ before(grammarAccess.getIfExpressionRule()); }
	 ruleIfExpression
{ after(grammarAccess.getIfExpressionRule()); } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfExpressionAccess().getGroup()); }
		(rule__IfExpression__Group__0)
		{ after(grammarAccess.getIfExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForExpression
entryRuleForExpression
:
{ before(grammarAccess.getForExpressionRule()); }
	 ruleForExpression
{ after(grammarAccess.getForExpressionRule()); } 
	 EOF 
;

// Rule ForExpression
ruleForExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForExpressionAccess().getGroup()); }
		(rule__ForExpression__Group__0)
		{ after(grammarAccess.getForExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileExpression
entryRuleWhileExpression
:
{ before(grammarAccess.getWhileExpressionRule()); }
	 ruleWhileExpression
{ after(grammarAccess.getWhileExpressionRule()); } 
	 EOF 
;

// Rule WhileExpression
ruleWhileExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileExpressionAccess().getGroup()); }
		(rule__WhileExpression__Group__0)
		{ after(grammarAccess.getWhileExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStop
entryRuleStop
:
{ before(grammarAccess.getStopRule()); }
	 ruleStop
{ after(grammarAccess.getStopRule()); } 
	 EOF 
;

// Rule Stop
ruleStop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStopAccess().getGroup()); }
		(rule__Stop__Group__0)
		{ after(grammarAccess.getStopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getGroup()); }
		(rule__Print__Group__0)
		{ after(grammarAccess.getPrintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCollectionAdd
entryRuleCollectionAdd
:
{ before(grammarAccess.getCollectionAddRule()); }
	 ruleCollectionAdd
{ after(grammarAccess.getCollectionAddRule()); } 
	 EOF 
;

// Rule CollectionAdd
ruleCollectionAdd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollectionAddAccess().getGroup()); }
		(rule__CollectionAdd__Group__0)
		{ after(grammarAccess.getCollectionAddAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCollectionRemove
entryRuleCollectionRemove
:
{ before(grammarAccess.getCollectionRemoveRule()); }
	 ruleCollectionRemove
{ after(grammarAccess.getCollectionRemoveRule()); } 
	 EOF 
;

// Rule CollectionRemove
ruleCollectionRemove 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollectionRemoveAccess().getGroup()); }
		(rule__CollectionRemove__Group__0)
		{ after(grammarAccess.getCollectionRemoveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValueExchange
entryRuleValueExchange
:
{ before(grammarAccess.getValueExchangeRule()); }
	 ruleValueExchange
{ after(grammarAccess.getValueExchangeRule()); } 
	 EOF 
;

// Rule ValueExchange
ruleValueExchange 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueExchangeAccess().getGroup()); }
		(rule__ValueExchange__Group__0)
		{ after(grammarAccess.getValueExchangeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
		(rule__LiteralExpression__Alternatives)
		{ after(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCollection
entryRuleCollection
:
{ before(grammarAccess.getCollectionRule()); }
	 ruleCollection
{ after(grammarAccess.getCollectionRule()); } 
	 EOF 
;

// Rule Collection
ruleCollection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollectionAccess().getAlternatives()); }
		(rule__Collection__Alternatives)
		{ after(grammarAccess.getCollectionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleList
entryRuleList
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;

// Rule List
ruleList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListAccess().getGroup()); }
		(rule__List__Group__0)
		{ after(grammarAccess.getListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCollectionLitteral
entryRuleCollectionLitteral
:
{ before(grammarAccess.getCollectionLitteralRule()); }
	 ruleCollectionLitteral
{ after(grammarAccess.getCollectionLitteralRule()); } 
	 EOF 
;

// Rule CollectionLitteral
ruleCollectionLitteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollectionLitteralAccess().getAlternatives()); }
		(rule__CollectionLitteral__Alternatives)
		{ after(grammarAccess.getCollectionLitteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetLitteral
entryRuleSetLitteral
:
{ before(grammarAccess.getSetLitteralRule()); }
	 ruleSetLitteral
{ after(grammarAccess.getSetLitteralRule()); } 
	 EOF 
;

// Rule SetLitteral
ruleSetLitteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetLitteralAccess().getGroup()); }
		(rule__SetLitteral__Group__0)
		{ after(grammarAccess.getSetLitteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListLitteral
entryRuleListLitteral
:
{ before(grammarAccess.getListLitteralRule()); }
	 ruleListLitteral
{ after(grammarAccess.getListLitteralRule()); } 
	 EOF 
;

// Rule ListLitteral
ruleListLitteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListLitteralAccess().getGroup()); }
		(rule__ListLitteral__Group__0)
		{ after(grammarAccess.getListLitteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCollectionAccessor
entryRuleCollectionAccessor
:
{ before(grammarAccess.getCollectionAccessorRule()); }
	 ruleCollectionAccessor
{ after(grammarAccess.getCollectionAccessorRule()); } 
	 EOF 
;

// Rule CollectionAccessor
ruleCollectionAccessor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollectionAccessorAccess().getGroup()); }
		(rule__CollectionAccessor__Group__0)
		{ after(grammarAccess.getCollectionAccessorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getGroup()); }
		(rule__BooleanExpression__Group__0)
		{ after(grammarAccess.getBooleanExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquals
entryRuleEquals
:
{ before(grammarAccess.getEqualsRule()); }
	 ruleEquals
{ after(grammarAccess.getEqualsRule()); } 
	 EOF 
;

// Rule Equals
ruleEquals 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualsAccess().getGroup()); }
		(rule__Equals__Group__0)
		{ after(grammarAccess.getEqualsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression
:
{ before(grammarAccess.getArithmeticExpressionRule()); }
	 ruleArithmeticExpression
{ after(grammarAccess.getArithmeticExpressionRule()); } 
	 EOF 
;

// Rule ArithmeticExpression
ruleArithmeticExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticExpressionAccess().getAdditionParserRuleCall()); }
		ruleAddition
		{ after(grammarAccess.getArithmeticExpressionAccess().getAdditionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlusOperator
entryRulePlusOperator
:
{ before(grammarAccess.getPlusOperatorRule()); }
	 rulePlusOperator
{ after(grammarAccess.getPlusOperatorRule()); } 
	 EOF 
;

// Rule PlusOperator
rulePlusOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusOperatorAccess().getAlternatives()); }
		(rule__PlusOperator__Alternatives)
		{ after(grammarAccess.getPlusOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrefixed
entryRulePrefixed
:
{ before(grammarAccess.getPrefixedRule()); }
	 rulePrefixed
{ after(grammarAccess.getPrefixedRule()); } 
	 EOF 
;

// Rule Prefixed
rulePrefixed 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrefixedAccess().getAlternatives()); }
		(rule__Prefixed__Alternatives)
		{ after(grammarAccess.getPrefixedAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomic
entryRuleAtomic
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicAccess().getAlternatives()); }
		(rule__Atomic__Alternatives)
		{ after(grammarAccess.getAtomicAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
		(rule__FunctionCall__Group__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeLiteral
entryRuleTypeLiteral
:
{ before(grammarAccess.getTypeLiteralRule()); }
	 ruleTypeLiteral
{ after(grammarAccess.getTypeLiteralRule()); } 
	 EOF 
;

// Rule TypeLiteral
ruleTypeLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeLiteralAccess().getGroup()); }
		(rule__TypeLiteral__Group__0)
		{ after(grammarAccess.getTypeLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifierAccess().getFunctionParserRuleCall_0()); }
		ruleFunction
		{ after(grammarAccess.getIdentifierAccess().getFunctionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getIdentifierAccess().getTypeLiteralParserRuleCall_1()); }
		ruleTypeLiteral
		{ after(grammarAccess.getIdentifierAccess().getTypeLiteralParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getFeatureAccess().getStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureAccess().getExpressionParserRuleCall_1()); }
		ruleExpression
		{ after(grammarAccess.getFeatureAccess().getExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getIfExpressionParserRuleCall_0()); }
		ruleIfExpression
		{ after(grammarAccess.getStatementAccess().getIfExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getForExpressionParserRuleCall_1()); }
		ruleForExpression
		{ after(grammarAccess.getStatementAccess().getForExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getWhileExpressionParserRuleCall_2()); }
		ruleWhileExpression
		{ after(grammarAccess.getStatementAccess().getWhileExpressionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getStopParserRuleCall_3()); }
		ruleStop
		{ after(grammarAccess.getStatementAccess().getStopParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getVariableParserRuleCall_0()); }
		ruleVariable
		{ after(grammarAccess.getExpressionAccess().getVariableParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getPrintParserRuleCall_1()); }
		rulePrint
		{ after(grammarAccess.getExpressionAccess().getPrintParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getCollectionAddParserRuleCall_2()); }
		ruleCollectionAdd
		{ after(grammarAccess.getExpressionAccess().getCollectionAddParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getCollectionRemoveParserRuleCall_3()); }
		ruleCollectionRemove
		{ after(grammarAccess.getExpressionAccess().getCollectionRemoveParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getValueExchangeParserRuleCall_4()); }
		ruleValueExchange
		{ after(grammarAccess.getExpressionAccess().getValueExchangeParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getGroup_1_0()); }
		(rule__Variable__Group_1_0__0)
		{ after(grammarAccess.getVariableAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getGroup_1_1()); }
		(rule__Variable__Group_1_1__0)
		{ after(grammarAccess.getVariableAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__OpAlternatives_1_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getOpEqualsSignKeyword_1_0_1_0_0()); }
		EqualsSign
		{ after(grammarAccess.getVariableAccess().getOpEqualsSignKeyword_1_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getOpEqualsKeyword_1_0_1_0_1()); }
		Equals
		{ after(grammarAccess.getVariableAccess().getOpEqualsKeyword_1_0_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getOpIsKeyword_1_0_1_0_2()); }
		Is
		{ after(grammarAccess.getVariableAccess().getOpIsKeyword_1_0_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getOpPlusSignEqualsSignKeyword_1_0_1_0_3()); }
		PlusSignEqualsSign
		{ after(grammarAccess.getVariableAccess().getOpPlusSignEqualsSignKeyword_1_0_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getOpHyphenMinusEqualsSignKeyword_1_0_1_0_4()); }
		HyphenMinusEqualsSign
		{ after(grammarAccess.getVariableAccess().getOpHyphenMinusEqualsSignKeyword_1_0_1_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__OpAlternatives_1_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getOpPlusSignPlusSignKeyword_1_1_1_0_0()); }
		PlusSignPlusSign
		{ after(grammarAccess.getVariableAccess().getOpPlusSignPlusSignKeyword_1_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getOpHyphenMinusHyphenMinusKeyword_1_1_1_0_1()); }
		HyphenMinusHyphenMinus
		{ after(grammarAccess.getVariableAccess().getOpHyphenMinusHyphenMinusKeyword_1_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStopAccess().getTypeAssignment_1_0()); }
		(rule__Stop__TypeAssignment_1_0)
		{ after(grammarAccess.getStopAccess().getTypeAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getStopAccess().getGroup_1_1()); }
		(rule__Stop__Group_1_1__0)
		{ after(grammarAccess.getStopAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__TypeAlternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStopAccess().getTypeStopKeyword_1_0_0_0()); }
		Stop
		{ after(grammarAccess.getStopAccess().getTypeStopKeyword_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStopAccess().getTypeBreakKeyword_1_0_0_1()); }
		Break
		{ after(grammarAccess.getStopAccess().getTypeBreakKeyword_1_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getStopAccess().getTypeContinueKeyword_1_0_0_2()); }
		Continue
		{ after(grammarAccess.getStopAccess().getTypeContinueKeyword_1_0_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getCollectionParserRuleCall_0()); }
		ruleCollection
		{ after(grammarAccess.getLiteralExpressionAccess().getCollectionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getCollectionAccessorParserRuleCall_1()); }
		ruleCollectionAccessor
		{ after(grammarAccess.getLiteralExpressionAccess().getCollectionAccessorParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getBooleanExpressionParserRuleCall_2()); }
		ruleBooleanExpression
		{ after(grammarAccess.getLiteralExpressionAccess().getBooleanExpressionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccess().getCollectionLitteralParserRuleCall_0()); }
		ruleCollectionLitteral
		{ after(grammarAccess.getCollectionAccess().getCollectionLitteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionAccess().getListParserRuleCall_1()); }
		ruleList
		{ after(grammarAccess.getCollectionAccess().getListParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__TypeAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getTypeTextKeyword_2_0_0()); }
		Text_1
		{ after(grammarAccess.getListAccess().getTypeTextKeyword_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getListAccess().getTypeNumberKeyword_2_0_1()); }
		Number_1
		{ after(grammarAccess.getListAccess().getTypeNumberKeyword_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getListAccess().getTypeDecimalKeyword_2_0_2()); }
		Decimal_1
		{ after(grammarAccess.getListAccess().getTypeDecimalKeyword_2_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getArrayKeyword_3_0()); }
		Array_1
		{ after(grammarAccess.getListAccess().getArrayKeyword_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getListAccess().getListKeyword_3_1()); }
		List_1
		{ after(grammarAccess.getListAccess().getListKeyword_3_1()); }
	)
	|
	(
		{ before(grammarAccess.getListAccess().getTableKeyword_3_2()); }
		Table_1
		{ after(grammarAccess.getListAccess().getTableKeyword_3_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionLitteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionLitteralAccess().getSetLitteralParserRuleCall_0()); }
		ruleSetLitteral
		{ after(grammarAccess.getCollectionLitteralAccess().getSetLitteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionLitteralAccess().getListLitteralParserRuleCall_1()); }
		ruleListLitteral
		{ after(grammarAccess.getCollectionLitteralAccess().getListLitteralParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccessorAccess().getGroup_1_0()); }
		(rule__CollectionAccessor__Group_1_0__0)
		{ after(grammarAccess.getCollectionAccessorAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionAccessorAccess().getGroup_1_1()); }
		(rule__CollectionAccessor__Group_1_1__0)
		{ after(grammarAccess.getCollectionAccessorAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__OpAlternatives_1_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_0_1_0_0()); }
		VerticalLineVerticalLine
		{ after(grammarAccess.getBooleanExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getOpAmpersandAmpersandKeyword_1_0_1_0_1()); }
		AmpersandAmpersand
		{ after(grammarAccess.getBooleanExpressionAccess().getOpAmpersandAmpersandKeyword_1_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAlternatives_1_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_0_1_0_0()); }
		LessThanSign
		{ after(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_0_1_0_1()); }
		GreaterThanSign
		{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__OpAlternatives_1_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualsAccess().getOpEqualsSignEqualsSignKeyword_1_0_1_0_0()); }
		EqualsSignEqualsSign
		{ after(grammarAccess.getEqualsAccess().getOpEqualsSignEqualsSignKeyword_1_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualsAccess().getOpLessThanSignEqualsSignKeyword_1_0_1_0_1()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getEqualsAccess().getOpLessThanSignEqualsSignKeyword_1_0_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getEqualsAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getEqualsAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getEqualsAccess().getOpExclamationMarkEqualsSignKeyword_1_0_1_0_3()); }
		ExclamationMarkEqualsSign
		{ after(grammarAccess.getEqualsAccess().getOpExclamationMarkEqualsSignKeyword_1_0_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
		(rule__Addition__Group_1_0_0__0)
		{ after(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
		(rule__Addition__Group_1_0_1__0)
		{ after(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Alternatives_1_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1_0()); }
		HyphenMinus
		{ after(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAccess().getMinusKeyword_1_0_1_1_1()); }
		Minus
		{ after(grammarAccess.getAdditionAccess().getMinusKeyword_1_0_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOperatorAccess().getPlusSignKeyword_0()); }
		PlusSign
		{ after(grammarAccess.getPlusOperatorAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getPlusOperatorAccess().getPlusKeyword_1()); }
		Plus
		{ after(grammarAccess.getPlusOperatorAccess().getPlusKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OpAlternatives_1_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOpAsteriskKeyword_1_0_1_0_0()); }
		Asterisk
		{ after(grammarAccess.getMultiplicationAccess().getOpAsteriskKeyword_1_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getOpSolidusKeyword_1_0_1_0_1()); }
		Solidus
		{ after(grammarAccess.getMultiplicationAccess().getOpSolidusKeyword_1_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixedAccess().getGroup_0()); }
		(rule__Prefixed__Group_0__0)
		{ after(grammarAccess.getPrefixedAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrefixedAccess().getGroup_1()); }
		(rule__Prefixed__Group_1__0)
		{ after(grammarAccess.getPrefixedAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrefixedAccess().getAtomicParserRuleCall_2()); }
		ruleAtomic
		{ after(grammarAccess.getPrefixedAccess().getAtomicParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__Alternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixedAccess().getHyphenMinusKeyword_1_1_0_0()); }
		HyphenMinus
		{ after(grammarAccess.getPrefixedAccess().getHyphenMinusKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrefixedAccess().getMinusKeyword_1_1_0_1()); }
		Minus
		{ after(grammarAccess.getPrefixedAccess().getMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_0()); }
		(rule__Atomic__Group_0__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_1()); }
		(rule__Atomic__Group_1__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_2()); }
		(rule__Atomic__Group_2__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_3()); }
		(rule__Atomic__Group_3__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_4()); }
		(rule__Atomic__Group_4__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getFunctionCallParserRuleCall_5()); }
		ruleFunctionCall
		{ after(grammarAccess.getAtomicAccess().getFunctionCallParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAlternatives_3_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueTrueKeyword_3_1_0_0()); }
		True
		{ after(grammarAccess.getAtomicAccess().getValueTrueKeyword_3_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getValueFalseKeyword_3_1_0_1()); }
		False
		{ after(grammarAccess.getAtomicAccess().getValueFalseKeyword_3_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__NameAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeLiteralAccess().getNameTextKeyword_1_0_0()); }
		Text_1
		{ after(grammarAccess.getTypeLiteralAccess().getNameTextKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLiteralAccess().getNameNumberKeyword_1_0_1()); }
		Number_1
		{ after(grammarAccess.getTypeLiteralAccess().getNameNumberKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLiteralAccess().getNameDecimalKeyword_1_0_2()); }
		Decimal_1
		{ after(grammarAccess.getTypeLiteralAccess().getNameDecimalKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLiteralAccess().getNameArrayKeyword_1_0_3()); }
		Array_1
		{ after(grammarAccess.getTypeLiteralAccess().getNameArrayKeyword_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLiteralAccess().getNameListKeyword_1_0_4()); }
		List_1
		{ after(grammarAccess.getTypeLiteralAccess().getNameListKeyword_1_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLiteralAccess().getNameTableKeyword_1_0_5()); }
		Table_1
		{ after(grammarAccess.getTypeLiteralAccess().getNameTableKeyword_1_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelAction_0()); }
	()
	{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getFunctionsAssignment_1()); }
	(rule__Model__FunctionsAssignment_1)*
	{ after(grammarAccess.getModelAccess().getFunctionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFunctionAction_0()); }
	()
	{ after(grammarAccess.getFunctionAccess().getFunctionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
	(rule__Function__NameAssignment_1)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getGroup_3()); }
	(rule__Function__Group_3__0)*
	{ after(grammarAccess.getFunctionAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__5__Impl
	rule__Function__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getBEGINTerminalRuleCall_5()); }
	RULE_BEGIN
	{ after(grammarAccess.getFunctionAccess().getBEGINTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__6__Impl
	rule__Function__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFeaturesAssignment_6()); }
	(rule__Function__FeaturesAssignment_6)*
	{ after(grammarAccess.getFunctionAccess().getFeaturesAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getENDTerminalRuleCall_7()); }
	RULE_END
	{ after(grammarAccess.getFunctionAccess().getENDTerminalRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_3__0__Impl
	rule__Function__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getParametersAssignment_3_0()); }
	(rule__Function__ParametersAssignment_3_0)
	{ after(grammarAccess.getFunctionAccess().getParametersAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getGroup_3_1()); }
	(rule__Function__Group_3_1__0)*
	{ after(grammarAccess.getFunctionAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_3_1__0__Impl
	rule__Function__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getCommaKeyword_3_1_0()); }
	Comma
	{ after(grammarAccess.getFunctionAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getParametersAssignment_3_1_1()); }
	(rule__Function__ParametersAssignment_3_1_1)
	{ after(grammarAccess.getFunctionAccess().getParametersAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getVariableAction_0()); }
	()
	{ after(grammarAccess.getVariableAccess().getVariableAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getAlternatives_1()); }
	(rule__Variable__Alternatives_1)
	{ after(grammarAccess.getVariableAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_0__0__Impl
	rule__Variable__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNameAssignment_1_0_0()); }
	(rule__Variable__NameAssignment_1_0_0)
	{ after(grammarAccess.getVariableAccess().getNameAssignment_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_0__1__Impl
	rule__Variable__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getOpAssignment_1_0_1()); }
	(rule__Variable__OpAssignment_1_0_1)
	{ after(grammarAccess.getVariableAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getValueAssignment_1_0_2()); }
	(rule__Variable__ValueAssignment_1_0_2)
	{ after(grammarAccess.getVariableAccess().getValueAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_1__0__Impl
	rule__Variable__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNameAssignment_1_1_0()); }
	(rule__Variable__NameAssignment_1_1_0)
	{ after(grammarAccess.getVariableAccess().getNameAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getOpAssignment_1_1_1()); }
	(rule__Variable__OpAssignment_1_1_1)
	{ after(grammarAccess.getVariableAccess().getOpAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getVariableAction_0()); }
	()
	{ after(grammarAccess.getParameterAccess().getVariableAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
	(rule__Parameter__TypeAssignment_1)
	{ after(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getNameAssignment_2()); }
	(rule__Parameter__NameAssignment_2)
	{ after(grammarAccess.getParameterAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__0__Impl
	rule__IfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getIfExpressionAction_0()); }
	()
	{ after(grammarAccess.getIfExpressionAccess().getIfExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__1__Impl
	rule__IfExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getNameAssignment_1()); }
	(rule__IfExpression__NameAssignment_1)
	{ after(grammarAccess.getIfExpressionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__2__Impl
	rule__IfExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getConditionAssignment_2()); }
	(rule__IfExpression__ConditionAssignment_2)
	{ after(grammarAccess.getIfExpressionAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__3__Impl
	rule__IfExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getThenKeyword_3()); }
	(Then)?
	{ after(grammarAccess.getIfExpressionAccess().getThenKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__4__Impl
	rule__IfExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getBEGINTerminalRuleCall_4()); }
	RULE_BEGIN
	{ after(grammarAccess.getIfExpressionAccess().getBEGINTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__5__Impl
	rule__IfExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getThenAssignment_5()); }
	(rule__IfExpression__ThenAssignment_5)*
	{ after(grammarAccess.getIfExpressionAccess().getThenAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__6__Impl
	rule__IfExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getENDTerminalRuleCall_6()); }
	RULE_END
	{ after(grammarAccess.getIfExpressionAccess().getENDTerminalRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getGroup_7()); }
	(rule__IfExpression__Group_7__0)?
	{ after(grammarAccess.getIfExpressionAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group_7__0__Impl
	rule__IfExpression__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getElseKeyword_7_0()); }
	(Else)
	{ after(grammarAccess.getIfExpressionAccess().getElseKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group_7__1__Impl
	rule__IfExpression__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getBEGINTerminalRuleCall_7_1()); }
	RULE_BEGIN
	{ after(grammarAccess.getIfExpressionAccess().getBEGINTerminalRuleCall_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_7__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group_7__2__Impl
	rule__IfExpression__Group_7__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_7__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getOtherwiseAssignment_7_2()); }
	(rule__IfExpression__OtherwiseAssignment_7_2)*
	{ after(grammarAccess.getIfExpressionAccess().getOtherwiseAssignment_7_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_7__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group_7__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_7__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getENDTerminalRuleCall_7_3()); }
	RULE_END
	{ after(grammarAccess.getIfExpressionAccess().getENDTerminalRuleCall_7_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForExpression__Group__0__Impl
	rule__ForExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForExpressionAccess().getForExpressionAction_0()); }
	()
	{ after(grammarAccess.getForExpressionAccess().getForExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForExpression__Group__1__Impl
	rule__ForExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForExpressionAccess().getForKeyword_1()); }
	For
	{ after(grammarAccess.getForExpressionAccess().getForKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForExpression__Group__2__Impl
	rule__ForExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForExpressionAccess().getIntervalKeyword_2()); }
	(Interval)?
	{ after(grammarAccess.getForExpressionAccess().getIntervalKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForExpression__Group__3__Impl
	rule__ForExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForExpressionAccess().getFromAssignment_3()); }
	(rule__ForExpression__FromAssignment_3)
	{ after(grammarAccess.getForExpressionAccess().getFromAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForExpression__Group__4__Impl
	rule__ForExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForExpressionAccess().getToKeyword_4()); }
	To
	{ after(grammarAccess.getForExpressionAccess().getToKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForExpression__Group__5__Impl
	rule__ForExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForExpressionAccess().getToAssignment_5()); }
	(rule__ForExpression__ToAssignment_5)
	{ after(grammarAccess.getForExpressionAccess().getToAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForExpression__Group__6__Impl
	rule__ForExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForExpressionAccess().getBEGINTerminalRuleCall_6()); }
	RULE_BEGIN
	{ after(grammarAccess.getForExpressionAccess().getBEGINTerminalRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForExpression__Group__7__Impl
	rule__ForExpression__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForExpressionAccess().getBlockAssignment_7()); }
	(rule__ForExpression__BlockAssignment_7)*
	{ after(grammarAccess.getForExpressionAccess().getBlockAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForExpression__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForExpressionAccess().getENDTerminalRuleCall_8()); }
	RULE_END
	{ after(grammarAccess.getForExpressionAccess().getENDTerminalRuleCall_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileExpression__Group__0__Impl
	rule__WhileExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileExpressionAccess().getWhileExpressionAction_0()); }
	()
	{ after(grammarAccess.getWhileExpressionAccess().getWhileExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileExpression__Group__1__Impl
	rule__WhileExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileExpressionAccess().getWhileKeyword_1()); }
	While
	{ after(grammarAccess.getWhileExpressionAccess().getWhileKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileExpression__Group__2__Impl
	rule__WhileExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileExpressionAccess().getConditionAssignment_2()); }
	(rule__WhileExpression__ConditionAssignment_2)
	{ after(grammarAccess.getWhileExpressionAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileExpression__Group__3__Impl
	rule__WhileExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileExpressionAccess().getBEGINTerminalRuleCall_3()); }
	RULE_BEGIN
	{ after(grammarAccess.getWhileExpressionAccess().getBEGINTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileExpression__Group__4__Impl
	rule__WhileExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileExpressionAccess().getBlockAssignment_4()); }
	(rule__WhileExpression__BlockAssignment_4)*
	{ after(grammarAccess.getWhileExpressionAccess().getBlockAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileExpressionAccess().getENDTerminalRuleCall_5()); }
	RULE_END
	{ after(grammarAccess.getWhileExpressionAccess().getENDTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Stop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stop__Group__0__Impl
	rule__Stop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopAccess().getStopAction_0()); }
	()
	{ after(grammarAccess.getStopAccess().getStopAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stop__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopAccess().getAlternatives_1()); }
	(rule__Stop__Alternatives_1)
	{ after(grammarAccess.getStopAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Stop__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stop__Group_1_1__0__Impl
	rule__Stop__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopAccess().getTypeAssignment_1_1_0()); }
	(rule__Stop__TypeAssignment_1_1_0)
	{ after(grammarAccess.getStopAccess().getTypeAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stop__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopAccess().getValueAssignment_1_1_1()); }
	(rule__Stop__ValueAssignment_1_1_1)
	{ after(grammarAccess.getStopAccess().getValueAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getNameAssignment_0()); }
	(rule__Print__NameAssignment_0)
	{ after(grammarAccess.getPrintAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getValueAssignment_1()); }
	(rule__Print__ValueAssignment_1)
	{ after(grammarAccess.getPrintAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionAdd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAdd__Group__0__Impl
	rule__CollectionAdd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAdd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAddAccess().getCollectionAddAction_0()); }
	()
	{ after(grammarAccess.getCollectionAddAccess().getCollectionAddAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAdd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAdd__Group__1__Impl
	rule__CollectionAdd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAdd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAddAccess().getCollectionAssignment_1()); }
	(rule__CollectionAdd__CollectionAssignment_1)
	{ after(grammarAccess.getCollectionAddAccess().getCollectionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAdd__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAdd__Group__2__Impl
	rule__CollectionAdd__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAdd__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAddAccess().getAddKeyword_2()); }
	Add
	{ after(grammarAccess.getCollectionAddAccess().getAddKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAdd__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAdd__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAdd__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAddAccess().getValueAssignment_3()); }
	(rule__CollectionAdd__ValueAssignment_3)
	{ after(grammarAccess.getCollectionAddAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionRemove__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionRemove__Group__0__Impl
	rule__CollectionRemove__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRemove__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionRemoveAccess().getCollectionRemoveAction_0()); }
	()
	{ after(grammarAccess.getCollectionRemoveAccess().getCollectionRemoveAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRemove__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionRemove__Group__1__Impl
	rule__CollectionRemove__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRemove__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionRemoveAccess().getCollectionAssignment_1()); }
	(rule__CollectionRemove__CollectionAssignment_1)
	{ after(grammarAccess.getCollectionRemoveAccess().getCollectionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRemove__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionRemove__Group__2__Impl
	rule__CollectionRemove__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRemove__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionRemoveAccess().getRemoveKeyword_2()); }
	Remove
	{ after(grammarAccess.getCollectionRemoveAccess().getRemoveKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRemove__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionRemove__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRemove__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionRemoveAccess().getValueAssignment_3()); }
	(rule__CollectionRemove__ValueAssignment_3)
	{ after(grammarAccess.getCollectionRemoveAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueExchange__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExchange__Group__0__Impl
	rule__ValueExchange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExchange__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExchangeAccess().getValueExchangeAction_0()); }
	()
	{ after(grammarAccess.getValueExchangeAccess().getValueExchangeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExchange__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExchange__Group__1__Impl
	rule__ValueExchange__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExchange__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExchangeAccess().getExchangeKeyword_1()); }
	Exchange
	{ after(grammarAccess.getValueExchangeAccess().getExchangeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExchange__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExchange__Group__2__Impl
	rule__ValueExchange__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExchange__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExchangeAccess().getCollectionAssignment_2()); }
	(rule__ValueExchange__CollectionAssignment_2)
	{ after(grammarAccess.getValueExchangeAccess().getCollectionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExchange__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExchange__Group__3__Impl
	rule__ValueExchange__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExchange__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExchangeAccess().getWithKeyword_3()); }
	With
	{ after(grammarAccess.getValueExchangeAccess().getWithKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExchange__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExchange__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExchange__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExchangeAccess().getValueAssignment_4()); }
	(rule__ValueExchange__ValueAssignment_4)
	{ after(grammarAccess.getValueExchangeAccess().getValueAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__0__Impl
	rule__List__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getListAction_0()); }
	()
	{ after(grammarAccess.getListAccess().getListAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__1__Impl
	rule__List__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getNewKeyword_1()); }
	New
	{ after(grammarAccess.getListAccess().getNewKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__2__Impl
	rule__List__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getTypeAssignment_2()); }
	(rule__List__TypeAssignment_2)
	{ after(grammarAccess.getListAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__3__Impl
	rule__List__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getAlternatives_3()); }
	(rule__List__Alternatives_3)
	{ after(grammarAccess.getListAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getGroup_4()); }
	(rule__List__Group_4__0)?
	{ after(grammarAccess.getListAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_4__0__Impl
	rule__List__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getAndKeyword_4_0()); }
	And
	{ after(grammarAccess.getListAccess().getAndKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_4__1__Impl
	rule__List__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getContainsKeyword_4_1()); }
	Contains
	{ after(grammarAccess.getListAccess().getContainsKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_4__2__Impl
	rule__List__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getElementsAssignment_4_2()); }
	(rule__List__ElementsAssignment_4_2)
	{ after(grammarAccess.getListAccess().getElementsAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getGroup_4_3()); }
	(rule__List__Group_4_3__0)*
	{ after(grammarAccess.getListAccess().getGroup_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_4_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_4_3__0__Impl
	rule__List__Group_4_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_4_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getCommaKeyword_4_3_0()); }
	Comma
	{ after(grammarAccess.getListAccess().getCommaKeyword_4_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_4_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_4_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_4_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getElementsAssignment_4_3_1()); }
	(rule__List__ElementsAssignment_4_3_1)
	{ after(grammarAccess.getListAccess().getElementsAssignment_4_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetLitteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLitteral__Group__0__Impl
	rule__SetLitteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLitteralAccess().getSetLitteralAction_0()); }
	()
	{ after(grammarAccess.getSetLitteralAccess().getSetLitteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLitteral__Group__1__Impl
	rule__SetLitteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLitteralAccess().getLeftCurlyBracketKeyword_1()); }
	LeftCurlyBracket
	{ after(grammarAccess.getSetLitteralAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLitteral__Group__2__Impl
	rule__SetLitteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLitteralAccess().getGroup_2()); }
	(rule__SetLitteral__Group_2__0)?
	{ after(grammarAccess.getSetLitteralAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLitteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLitteralAccess().getRightCurlyBracketKeyword_3()); }
	RightCurlyBracket
	{ after(grammarAccess.getSetLitteralAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetLitteral__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLitteral__Group_2__0__Impl
	rule__SetLitteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLitteralAccess().getElementsAssignment_2_0()); }
	(rule__SetLitteral__ElementsAssignment_2_0)
	{ after(grammarAccess.getSetLitteralAccess().getElementsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLitteral__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLitteralAccess().getGroup_2_1()); }
	(rule__SetLitteral__Group_2_1__0)*
	{ after(grammarAccess.getSetLitteralAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetLitteral__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLitteral__Group_2_1__0__Impl
	rule__SetLitteral__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLitteralAccess().getCommaKeyword_2_1_0()); }
	Comma
	{ after(grammarAccess.getSetLitteralAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetLitteral__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetLitteralAccess().getElementsAssignment_2_1_1()); }
	(rule__SetLitteral__ElementsAssignment_2_1_1)
	{ after(grammarAccess.getSetLitteralAccess().getElementsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListLitteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLitteral__Group__0__Impl
	rule__ListLitteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLitteralAccess().getListLitteralAction_0()); }
	()
	{ after(grammarAccess.getListLitteralAccess().getListLitteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLitteral__Group__1__Impl
	rule__ListLitteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLitteralAccess().getLeftSquareBracketKeyword_1()); }
	LeftSquareBracket
	{ after(grammarAccess.getListLitteralAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLitteral__Group__2__Impl
	rule__ListLitteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLitteralAccess().getGroup_2()); }
	(rule__ListLitteral__Group_2__0)?
	{ after(grammarAccess.getListLitteralAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLitteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLitteralAccess().getRightSquareBracketKeyword_3()); }
	RightSquareBracket
	{ after(grammarAccess.getListLitteralAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListLitteral__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLitteral__Group_2__0__Impl
	rule__ListLitteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLitteralAccess().getElementsAssignment_2_0()); }
	(rule__ListLitteral__ElementsAssignment_2_0)
	{ after(grammarAccess.getListLitteralAccess().getElementsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLitteral__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLitteralAccess().getGroup_2_1()); }
	(rule__ListLitteral__Group_2_1__0)*
	{ after(grammarAccess.getListLitteralAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListLitteral__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLitteral__Group_2_1__0__Impl
	rule__ListLitteral__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLitteralAccess().getCommaKeyword_2_1_0()); }
	Comma
	{ after(grammarAccess.getListLitteralAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLitteral__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLitteralAccess().getElementsAssignment_2_1_1()); }
	(rule__ListLitteral__ElementsAssignment_2_1_1)
	{ after(grammarAccess.getListLitteralAccess().getElementsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionAccessor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccessor__Group__0__Impl
	rule__CollectionAccessor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessorAccess().getCollectionAccessorAction_0()); }
	()
	{ after(grammarAccess.getCollectionAccessorAccess().getCollectionAccessorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccessor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessorAccess().getAlternatives_1()); }
	(rule__CollectionAccessor__Alternatives_1)
	{ after(grammarAccess.getCollectionAccessorAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionAccessor__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccessor__Group_1_0__0__Impl
	rule__CollectionAccessor__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessorAccess().getCollectionAssignment_1_0_0()); }
	(rule__CollectionAccessor__CollectionAssignment_1_0_0)
	{ after(grammarAccess.getCollectionAccessorAccess().getCollectionAssignment_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccessor__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCollectionAccessorAccess().getGroup_1_0_1()); }
		(rule__CollectionAccessor__Group_1_0_1__0)
		{ after(grammarAccess.getCollectionAccessorAccess().getGroup_1_0_1()); }
	)
	(
		{ before(grammarAccess.getCollectionAccessorAccess().getGroup_1_0_1()); }
		(rule__CollectionAccessor__Group_1_0_1__0)*
		{ after(grammarAccess.getCollectionAccessorAccess().getGroup_1_0_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionAccessor__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccessor__Group_1_0_1__0__Impl
	rule__CollectionAccessor__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessorAccess().getLeftSquareBracketKeyword_1_0_1_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getCollectionAccessorAccess().getLeftSquareBracketKeyword_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccessor__Group_1_0_1__1__Impl
	rule__CollectionAccessor__Group_1_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessorAccess().getAccessorAssignment_1_0_1_1()); }
	(rule__CollectionAccessor__AccessorAssignment_1_0_1_1)
	{ after(grammarAccess.getCollectionAccessorAccess().getAccessorAssignment_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccessor__Group_1_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessorAccess().getRightSquareBracketKeyword_1_0_1_2()); }
	RightSquareBracket
	{ after(grammarAccess.getCollectionAccessorAccess().getRightSquareBracketKeyword_1_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionAccessor__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccessor__Group_1_1__0__Impl
	rule__CollectionAccessor__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessorAccess().getCollectionAssignment_1_1_0()); }
	(rule__CollectionAccessor__CollectionAssignment_1_1_0)
	{ after(grammarAccess.getCollectionAccessorAccess().getCollectionAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccessor__Group_1_1__1__Impl
	rule__CollectionAccessor__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessorAccess().getAtKeyword_1_1_1()); }
	At
	{ after(grammarAccess.getCollectionAccessorAccess().getAtKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccessor__Group_1_1__2__Impl
	rule__CollectionAccessor__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessorAccess().getIndexKeyword_1_1_2()); }
	(Index)?
	{ after(grammarAccess.getCollectionAccessorAccess().getIndexKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccessor__Group_1_1__3__Impl
	rule__CollectionAccessor__Group_1_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessorAccess().getAccessorAssignment_1_1_3()); }
	(rule__CollectionAccessor__AccessorAssignment_1_1_3)
	{ after(grammarAccess.getCollectionAccessorAccess().getAccessorAssignment_1_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccessor__Group_1_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessorAccess().getGroup_1_1_4()); }
	(rule__CollectionAccessor__Group_1_1_4__0)*
	{ after(grammarAccess.getCollectionAccessorAccess().getGroup_1_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionAccessor__Group_1_1_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccessor__Group_1_1_4__0__Impl
	rule__CollectionAccessor__Group_1_1_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_1_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessorAccess().getCommaKeyword_1_1_4_0()); }
	Comma
	{ after(grammarAccess.getCollectionAccessorAccess().getCommaKeyword_1_1_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_1_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollectionAccessor__Group_1_1_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__Group_1_1_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollectionAccessorAccess().getAccessorAssignment_1_1_4_1()); }
	(rule__CollectionAccessor__AccessorAssignment_1_1_4_1)
	{ after(grammarAccess.getCollectionAccessorAccess().getAccessorAssignment_1_1_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group__0__Impl
	rule__BooleanExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
	{ after(grammarAccess.getBooleanExpressionAccess().getComparisonParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getGroup_1()); }
	(rule__BooleanExpression__Group_1__0)*
	{ after(grammarAccess.getBooleanExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group_1__0__Impl
	rule__BooleanExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getGroup_1_0()); }
	(rule__BooleanExpression__Group_1_0__0)
	{ after(grammarAccess.getBooleanExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getRightAssignment_1_1()); }
	(rule__BooleanExpression__RightAssignment_1_1)
	{ after(grammarAccess.getBooleanExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group_1_0__0__Impl
	rule__BooleanExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getAndOrExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getBooleanExpressionAccess().getAndOrExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__BooleanExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getBooleanExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getEqualsParserRuleCall_0()); }
	ruleEquals
	{ after(grammarAccess.getComparisonAccess().getEqualsParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
	(rule__Comparison__Group_1__0)*
	{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1_0()); }
	(rule__Comparison__Group_1_0__0)
	{ after(grammarAccess.getComparisonAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
	(rule__Comparison__RightAssignment_1_1)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0__0__Impl
	rule__Comparison__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOpAssignment_1_0_1()); }
	(rule__Comparison__OpAssignment_1_0_1)
	{ after(grammarAccess.getComparisonAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equals__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group__0__Impl
	rule__Equals__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
	{ after(grammarAccess.getEqualsAccess().getAdditionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getGroup_1()); }
	(rule__Equals__Group_1__0)*
	{ after(grammarAccess.getEqualsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equals__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group_1__0__Impl
	rule__Equals__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getGroup_1_0()); }
	(rule__Equals__Group_1_0__0)
	{ after(grammarAccess.getEqualsAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getRightAssignment_1_1()); }
	(rule__Equals__RightAssignment_1_1)
	{ after(grammarAccess.getEqualsAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equals__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group_1_0__0__Impl
	rule__Equals__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getEqualsLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getEqualsAccess().getEqualsLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getOpAssignment_1_0_1()); }
	(rule__Equals__OpAssignment_1_0_1)
	{ after(grammarAccess.getEqualsAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
	(rule__Addition__Alternatives_1_0)
	{ after(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
	(rule__Addition__RightAssignment_1_1)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0_0__0__Impl
	rule__Addition__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getPlusOperatorParserRuleCall_1_0_0_1()); }
	rulePlusOperator
	{ after(grammarAccess.getAdditionAccess().getPlusOperatorParserRuleCall_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0_1__0__Impl
	rule__Addition__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAlternatives_1_0_1_1()); }
	(rule__Addition__Alternatives_1_0_1_1)
	{ after(grammarAccess.getAdditionAccess().getAlternatives_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getPrefixedParserRuleCall_0()); }
	rulePrefixed
	{ after(grammarAccess.getMultiplicationAccess().getPrefixedParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0()); }
	(rule__Multiplication__Group_1_0__0)
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
	(rule__Multiplication__RightAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1_0__0__Impl
	rule__Multiplication__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiOrDivLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiOrDivLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getOpAssignment_1_0_1()); }
	(rule__Multiplication__OpAssignment_1_0_1)
	{ after(grammarAccess.getMultiplicationAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Prefixed__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefixed__Group_0__0__Impl
	rule__Prefixed__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixedAccess().getBooleanNegationAction_0_0()); }
	()
	{ after(grammarAccess.getPrefixedAccess().getBooleanNegationAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefixed__Group_0__1__Impl
	rule__Prefixed__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixedAccess().getExclamationMarkKeyword_0_1()); }
	(ExclamationMark)
	{ after(grammarAccess.getPrefixedAccess().getExclamationMarkKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefixed__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixedAccess().getExpressionAssignment_0_2()); }
	(rule__Prefixed__ExpressionAssignment_0_2)
	{ after(grammarAccess.getPrefixedAccess().getExpressionAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Prefixed__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefixed__Group_1__0__Impl
	rule__Prefixed__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixedAccess().getArithmeticSignedAction_1_0()); }
	()
	{ after(grammarAccess.getPrefixedAccess().getArithmeticSignedAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefixed__Group_1__1__Impl
	rule__Prefixed__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixedAccess().getGroup_1_1()); }
	(rule__Prefixed__Group_1_1__0)
	{ after(grammarAccess.getPrefixedAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefixed__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixedAccess().getExpressionAssignment_1_2()); }
	(rule__Prefixed__ExpressionAssignment_1_2)
	{ after(grammarAccess.getPrefixedAccess().getExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Prefixed__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefixed__Group_1_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixedAccess().getAlternatives_1_1_0()); }
	(rule__Prefixed__Alternatives_1_1_0)
	{ after(grammarAccess.getPrefixedAccess().getAlternatives_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_0__0__Impl
	rule__Atomic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getParenthesizedExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getParenthesizedExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_0__1__Impl
	rule__Atomic__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_0_1()); }
	LeftParenthesis
	{ after(grammarAccess.getAtomicAccess().getLeftParenthesisKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_0__2__Impl
	rule__Atomic__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getExpressionAssignment_0_2()); }
	(rule__Atomic__ExpressionAssignment_0_2)
	{ after(grammarAccess.getAtomicAccess().getExpressionAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getRightParenthesisKeyword_0_3()); }
	RightParenthesis
	{ after(grammarAccess.getAtomicAccess().getRightParenthesisKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_1__0__Impl
	rule__Atomic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getNumberLiteralAction_1_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getNumberLiteralAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
	(rule__Atomic__ValueAssignment_1_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_2__0__Impl
	rule__Atomic__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getStringLiteralAction_2_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getStringLiteralAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
	(rule__Atomic__ValueAssignment_2_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_3__0__Impl
	rule__Atomic__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getBooleanLiteralAction_3_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getBooleanLiteralAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_3_1()); }
	(rule__Atomic__ValueAssignment_3_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_4__0__Impl
	rule__Atomic__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getVariableReferenceAction_4_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getVariableReferenceAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getRefAssignment_4_1()); }
	(rule__Atomic__RefAssignment_4_1)
	{ after(grammarAccess.getAtomicAccess().getRefAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
	()
	{ after(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRefAssignment_1()); }
	(rule__FunctionCall__RefAssignment_1)
	{ after(grammarAccess.getFunctionCallAccess().getRefAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__3__Impl
	rule__FunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_3()); }
	(rule__FunctionCall__Group_3__0)?
	{ after(grammarAccess.getFunctionCallAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3__0__Impl
	rule__FunctionCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getParametersAssignment_3_0()); }
	(rule__FunctionCall__ParametersAssignment_3_0)
	{ after(grammarAccess.getFunctionCallAccess().getParametersAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_3_1()); }
	(rule__FunctionCall__Group_3_1__0)*
	{ after(grammarAccess.getFunctionCallAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3_1__0__Impl
	rule__FunctionCall__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1_0()); }
	Comma
	{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getParametersAssignment_3_1_1()); }
	(rule__FunctionCall__ParametersAssignment_3_1_1)
	{ after(grammarAccess.getFunctionCallAccess().getParametersAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group__0__Impl
	rule__TypeLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getTypeLiteralAction_0()); }
	()
	{ after(grammarAccess.getTypeLiteralAccess().getTypeLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getNameAssignment_1()); }
	(rule__TypeLiteral__NameAssignment_1)
	{ after(grammarAccess.getTypeLiteralAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__FunctionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getFunctionsFunctionParserRuleCall_1_0()); }
		ruleFunction
		{ after(grammarAccess.getModelAccess().getFunctionsFunctionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParametersAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_3_0_0()); }
		ruleParameter
		{ after(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParametersAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_3_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getFunctionAccess().getParametersParameterParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__FeaturesAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getFeaturesFeatureParserRuleCall_6_0()); }
		ruleFeature
		{ after(grammarAccess.getFunctionAccess().getFeaturesFeatureParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getOpAlternatives_1_0_1_0()); }
		(rule__Variable__OpAlternatives_1_0_1_0)
		{ after(grammarAccess.getVariableAccess().getOpAlternatives_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__ValueAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getValueLiteralExpressionParserRuleCall_1_0_2_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getVariableAccess().getValueLiteralExpressionParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_1_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__OpAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getOpAlternatives_1_1_1_0()); }
		(rule__Variable__OpAlternatives_1_1_1_0)
		{ after(grammarAccess.getVariableAccess().getOpAlternatives_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getTypeIdentifierParserRuleCall_1_0()); }
		ruleIdentifier
		{ after(grammarAccess.getParameterAccess().getTypeIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getNameIfKeyword_1_0()); }
		(
			{ before(grammarAccess.getIfExpressionAccess().getNameIfKeyword_1_0()); }
			If
			{ after(grammarAccess.getIfExpressionAccess().getNameIfKeyword_1_0()); }
		)
		{ after(grammarAccess.getIfExpressionAccess().getNameIfKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getConditionLiteralExpressionParserRuleCall_2_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getIfExpressionAccess().getConditionLiteralExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ThenAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getThenFeatureParserRuleCall_5_0()); }
		ruleFeature
		{ after(grammarAccess.getIfExpressionAccess().getThenFeatureParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__OtherwiseAssignment_7_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getOtherwiseFeatureParserRuleCall_7_2_0()); }
		ruleFeature
		{ after(grammarAccess.getIfExpressionAccess().getOtherwiseFeatureParserRuleCall_7_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__FromAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForExpressionAccess().getFromArithmeticExpressionParserRuleCall_3_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getForExpressionAccess().getFromArithmeticExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__ToAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForExpressionAccess().getToArithmeticExpressionParserRuleCall_5_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getForExpressionAccess().getToArithmeticExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpression__BlockAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForExpressionAccess().getBlockFeatureParserRuleCall_7_0()); }
		ruleFeature
		{ after(grammarAccess.getForExpressionAccess().getBlockFeatureParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileExpressionAccess().getConditionLiteralExpressionParserRuleCall_2_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getWhileExpressionAccess().getConditionLiteralExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileExpression__BlockAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileExpressionAccess().getBlockFeatureParserRuleCall_4_0()); }
		ruleFeature
		{ after(grammarAccess.getWhileExpressionAccess().getBlockFeatureParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__TypeAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStopAccess().getTypeAlternatives_1_0_0()); }
		(rule__Stop__TypeAlternatives_1_0_0)
		{ after(grammarAccess.getStopAccess().getTypeAlternatives_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__TypeAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStopAccess().getTypeReturnKeyword_1_1_0_0()); }
		(
			{ before(grammarAccess.getStopAccess().getTypeReturnKeyword_1_1_0_0()); }
			Return
			{ after(grammarAccess.getStopAccess().getTypeReturnKeyword_1_1_0_0()); }
		)
		{ after(grammarAccess.getStopAccess().getTypeReturnKeyword_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__ValueAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStopAccess().getValueLiteralExpressionParserRuleCall_1_1_1_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getStopAccess().getValueLiteralExpressionParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getNamePrintKeyword_0_0()); }
		(
			{ before(grammarAccess.getPrintAccess().getNamePrintKeyword_0_0()); }
			Print
			{ after(grammarAccess.getPrintAccess().getNamePrintKeyword_0_0()); }
		)
		{ after(grammarAccess.getPrintAccess().getNamePrintKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getValueLiteralExpressionParserRuleCall_1_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getPrintAccess().getValueLiteralExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAdd__CollectionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAddAccess().getCollectionVariableCrossReference_1_0()); }
		(
			{ before(grammarAccess.getCollectionAddAccess().getCollectionVariableIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCollectionAddAccess().getCollectionVariableIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getCollectionAddAccess().getCollectionVariableCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAdd__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAddAccess().getValueLiteralExpressionParserRuleCall_3_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getCollectionAddAccess().getValueLiteralExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRemove__CollectionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionRemoveAccess().getCollectionVariableCrossReference_1_0()); }
		(
			{ before(grammarAccess.getCollectionRemoveAccess().getCollectionVariableIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCollectionRemoveAccess().getCollectionVariableIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getCollectionRemoveAccess().getCollectionVariableCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRemove__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionRemoveAccess().getValueLiteralExpressionParserRuleCall_3_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getCollectionRemoveAccess().getValueLiteralExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExchange__CollectionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueExchangeAccess().getCollectionLiteralExpressionParserRuleCall_2_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getValueExchangeAccess().getCollectionLiteralExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExchange__ValueAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueExchangeAccess().getValueLiteralExpressionParserRuleCall_4_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getValueExchangeAccess().getValueLiteralExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getTypeAlternatives_2_0()); }
		(rule__List__TypeAlternatives_2_0)
		{ after(grammarAccess.getListAccess().getTypeAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__ElementsAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getElementsLiteralExpressionParserRuleCall_4_2_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getListAccess().getElementsLiteralExpressionParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__ElementsAssignment_4_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getElementsLiteralExpressionParserRuleCall_4_3_1_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getListAccess().getElementsLiteralExpressionParserRuleCall_4_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__ElementsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetLitteralAccess().getElementsLiteralExpressionParserRuleCall_2_0_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getSetLitteralAccess().getElementsLiteralExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetLitteral__ElementsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetLitteralAccess().getElementsLiteralExpressionParserRuleCall_2_1_1_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getSetLitteralAccess().getElementsLiteralExpressionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__ElementsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListLitteralAccess().getElementsLiteralExpressionParserRuleCall_2_0_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getListLitteralAccess().getElementsLiteralExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLitteral__ElementsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListLitteralAccess().getElementsLiteralExpressionParserRuleCall_2_1_1_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getListLitteralAccess().getElementsLiteralExpressionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__CollectionAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccessorAccess().getCollectionVariableCrossReference_1_0_0_0()); }
		(
			{ before(grammarAccess.getCollectionAccessorAccess().getCollectionVariableIDTerminalRuleCall_1_0_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCollectionAccessorAccess().getCollectionVariableIDTerminalRuleCall_1_0_0_0_1()); }
		)
		{ after(grammarAccess.getCollectionAccessorAccess().getCollectionVariableCrossReference_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__AccessorAssignment_1_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccessorAccess().getAccessorLiteralExpressionParserRuleCall_1_0_1_1_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getCollectionAccessorAccess().getAccessorLiteralExpressionParserRuleCall_1_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__CollectionAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccessorAccess().getCollectionVariableCrossReference_1_1_0_0()); }
		(
			{ before(grammarAccess.getCollectionAccessorAccess().getCollectionVariableIDTerminalRuleCall_1_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCollectionAccessorAccess().getCollectionVariableIDTerminalRuleCall_1_1_0_0_1()); }
		)
		{ after(grammarAccess.getCollectionAccessorAccess().getCollectionVariableCrossReference_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__AccessorAssignment_1_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccessorAccess().getAccessorLiteralExpressionParserRuleCall_1_1_3_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getCollectionAccessorAccess().getAccessorLiteralExpressionParserRuleCall_1_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionAccessor__AccessorAssignment_1_1_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccessorAccess().getAccessorLiteralExpressionParserRuleCall_1_1_4_1_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getCollectionAccessorAccess().getAccessorLiteralExpressionParserRuleCall_1_1_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getOpAlternatives_1_0_1_0()); }
		(rule__BooleanExpression__OpAlternatives_1_0_1_0)
		{ after(grammarAccess.getBooleanExpressionAccess().getOpAlternatives_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getRightComparisonParserRuleCall_1_1_0()); }
		ruleComparison
		{ after(grammarAccess.getBooleanExpressionAccess().getRightComparisonParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpAlternatives_1_0_1_0()); }
		(rule__Comparison__OpAlternatives_1_0_1_0)
		{ after(grammarAccess.getComparisonAccess().getOpAlternatives_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightEqualsParserRuleCall_1_1_0()); }
		ruleEquals
		{ after(grammarAccess.getComparisonAccess().getRightEqualsParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualsAccess().getOpAlternatives_1_0_1_0()); }
		(rule__Equals__OpAlternatives_1_0_1_0)
		{ after(grammarAccess.getEqualsAccess().getOpAlternatives_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualsAccess().getRightAdditionParserRuleCall_1_1_0()); }
		ruleAddition
		{ after(grammarAccess.getEqualsAccess().getRightAdditionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
		ruleMultiplication
		{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOpAlternatives_1_0_1_0()); }
		(rule__Multiplication__OpAlternatives_1_0_1_0)
		{ after(grammarAccess.getMultiplicationAccess().getOpAlternatives_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightPrefixedParserRuleCall_1_1_0()); }
		rulePrefixed
		{ after(grammarAccess.getMultiplicationAccess().getRightPrefixedParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__ExpressionAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixedAccess().getExpressionAtomicParserRuleCall_0_2_0()); }
		ruleAtomic
		{ after(grammarAccess.getPrefixedAccess().getExpressionAtomicParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefixed__ExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixedAccess().getExpressionAtomicParserRuleCall_1_2_0()); }
		ruleAtomic
		{ after(grammarAccess.getPrefixedAccess().getExpressionAtomicParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ExpressionAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getExpressionLiteralExpressionParserRuleCall_0_2_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getAtomicAccess().getExpressionLiteralExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_1_1_0()); }
		RULE_INT
		{ after(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueAlternatives_3_1_0()); }
		(rule__Atomic__ValueAlternatives_3_1_0)
		{ after(grammarAccess.getAtomicAccess().getValueAlternatives_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__RefAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getRefVariableCrossReference_4_1_0()); }
		(
			{ before(grammarAccess.getAtomicAccess().getRefVariableIDTerminalRuleCall_4_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAtomicAccess().getRefVariableIDTerminalRuleCall_4_1_0_1()); }
		)
		{ after(grammarAccess.getAtomicAccess().getRefVariableCrossReference_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__RefAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getRefFunctionCrossReference_1_0()); }
		(
			{ before(grammarAccess.getFunctionCallAccess().getRefFunctionIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFunctionCallAccess().getRefFunctionIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getFunctionCallAccess().getRefFunctionCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParametersAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getParametersParameterParserRuleCall_3_0_0()); }
		ruleParameter
		{ after(grammarAccess.getFunctionCallAccess().getParametersParameterParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParametersAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getParametersParameterParserRuleCall_3_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getFunctionCallAccess().getParametersParameterParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeLiteralAccess().getNameAlternatives_1_0()); }
		(rule__TypeLiteral__NameAlternatives_1_0)
		{ after(grammarAccess.getTypeLiteralAccess().getNameAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
