/*
 * generated by Xtext 2.23.0
 */
grammar InternalPcode;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package tdt4250.pseudocode.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package tdt4250.pseudocode.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import tdt4250.pseudocode.services.PcodeGrammarAccess;

}
@parser::members {
	private PcodeGrammarAccess grammarAccess;

	public void setGrammarAccess(PcodeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRulePseudoClass
entryRulePseudoClass
:
{ before(grammarAccess.getPseudoClassRule()); }
	 rulePseudoClass
{ after(grammarAccess.getPseudoClassRule()); } 
	 EOF 
;

// Rule PseudoClass
rulePseudoClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPseudoClassAccess().getGroup()); }
		(rule__PseudoClass__Group__0)
		{ after(grammarAccess.getPseudoClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstructor
entryRuleConstructor
:
{ before(grammarAccess.getConstructorRule()); }
	 ruleConstructor
{ after(grammarAccess.getConstructorRule()); } 
	 EOF 
;

// Rule Constructor
ruleConstructor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstructorAccess().getGroup()); }
		(rule__Constructor__Group__0)
		{ after(grammarAccess.getConstructorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethod
entryRuleMethod
:
{ before(grammarAccess.getMethodRule()); }
	 ruleMethod
{ after(grammarAccess.getMethodRule()); } 
	 EOF 
;

// Rule Method
ruleMethod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodAccess().getGroup()); }
		(rule__Method__Group__0)
		{ after(grammarAccess.getMethodAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBody
entryRuleBody
:
{ before(grammarAccess.getBodyRule()); }
	 ruleBody
{ after(grammarAccess.getBodyRule()); } 
	 EOF 
;

// Rule Body
ruleBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBodyAccess().getGroup()); }
		(rule__Body__Group__0)
		{ after(grammarAccess.getBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFor
entryRuleFor
:
{ before(grammarAccess.getForRule()); }
	 ruleFor
{ after(grammarAccess.getForRule()); } 
	 EOF 
;

// Rule For
ruleFor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForAccess().getGroup()); }
		(rule__For__Group__0)
		{ after(grammarAccess.getForAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhile
entryRuleWhile
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileAccess().getGroup()); }
		(rule__While__Group__0)
		{ after(grammarAccess.getWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStop
entryRuleStop
:
{ before(grammarAccess.getStopRule()); }
	 ruleStop
{ after(grammarAccess.getStopRule()); } 
	 EOF 
;

// Rule Stop
ruleStop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStopAccess().getGroup()); }
		(rule__Stop__Group__0)
		{ after(grammarAccess.getStopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqualVariable
entryRuleEqualVariable
:
{ before(grammarAccess.getEqualVariableRule()); }
	 ruleEqualVariable
{ after(grammarAccess.getEqualVariableRule()); } 
	 EOF 
;

// Rule EqualVariable
ruleEqualVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualVariableAccess().getAlternatives()); }
		(rule__EqualVariable__Alternatives)
		{ after(grammarAccess.getEqualVariableAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__StatementsAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getStatementsVariableParserRuleCall_1_0_0()); }
		ruleVariable
		{ after(grammarAccess.getBodyAccess().getStatementsVariableParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getStatementsIfParserRuleCall_1_0_1()); }
		ruleIf
		{ after(grammarAccess.getBodyAccess().getStatementsIfParserRuleCall_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getStatementsForParserRuleCall_1_0_2()); }
		ruleFor
		{ after(grammarAccess.getBodyAccess().getStatementsForParserRuleCall_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getStatementsWhileParserRuleCall_1_0_3()); }
		ruleWhile
		{ after(grammarAccess.getBodyAccess().getStatementsWhileParserRuleCall_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getStatementsStopParserRuleCall_1_0_4()); }
		ruleStop
		{ after(grammarAccess.getBodyAccess().getStatementsStopParserRuleCall_1_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getGroup_2_0()); }
		(rule__If__Group_2_0__0)
		{ after(grammarAccess.getIfAccess().getGroup_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getIfAccess().getEStringParserRuleCall_2_1()); }
		ruleEString
		{ after(grammarAccess.getIfAccess().getEStringParserRuleCall_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getIfAccess().getGroup_2_2()); }
		(rule__If__Group_2_2__0)
		{ after(grammarAccess.getIfAccess().getGroup_2_2()); }
	)
	|
	(
		{ before(grammarAccess.getIfAccess().getGroup_2_3()); }
		(rule__If__Group_2_3__0)
		{ after(grammarAccess.getIfAccess().getGroup_2_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Alternatives_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getGroup_3_1_0()); }
		(rule__If__Group_3_1_0__0)
		{ after(grammarAccess.getIfAccess().getGroup_3_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getIfAccess().getEStringParserRuleCall_3_1_1()); }
		ruleEString
		{ after(grammarAccess.getIfAccess().getEStringParserRuleCall_3_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getIfAccess().getGroup_3_1_2()); }
		(rule__If__Group_3_1_2__0)
		{ after(grammarAccess.getIfAccess().getGroup_3_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getGroup_3_0()); }
		(rule__For__Group_3_0__0)
		{ after(grammarAccess.getForAccess().getGroup_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getForAccess().getGroup_3_1()); }
		(rule__For__Group_3_1__0)
		{ after(grammarAccess.getForAccess().getGroup_3_1()); }
	)
	|
	(
		{ before(grammarAccess.getForAccess().getGroup_3_2()); }
		(rule__For__Group_3_2__0)
		{ after(grammarAccess.getForAccess().getGroup_3_2()); }
	)
	|
	(
		{ before(grammarAccess.getForAccess().getGroup_3_3()); }
		(rule__For__Group_3_3__0)
		{ after(grammarAccess.getForAccess().getGroup_3_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Alternatives_3_0_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getPlusSignPlusSignKeyword_3_0_9_0()); }
		'++'
		{ after(grammarAccess.getForAccess().getPlusSignPlusSignKeyword_3_0_9_0()); }
	)
	|
	(
		{ before(grammarAccess.getForAccess().getHyphenMinusHyphenMinusKeyword_3_0_9_1()); }
		'--'
		{ after(grammarAccess.getForAccess().getHyphenMinusHyphenMinusKeyword_3_0_9_1()); }
	)
	|
	(
		{ before(grammarAccess.getForAccess().getGroup_3_0_9_2()); }
		(rule__For__Group_3_0_9_2__0)
		{ after(grammarAccess.getForAccess().getGroup_3_0_9_2()); }
	)
	|
	(
		{ before(grammarAccess.getForAccess().getGroup_3_0_9_3()); }
		(rule__For__Group_3_0_9_3__0)
		{ after(grammarAccess.getForAccess().getGroup_3_0_9_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getTrueKeyword_2_0()); }
		'true'
		{ after(grammarAccess.getWhileAccess().getTrueKeyword_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getWhileAccess().getGroup_2_1()); }
		(rule__While__Group_2_1__0)
		{ after(grammarAccess.getWhileAccess().getGroup_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStopAccess().getGroup_1_0()); }
		(rule__Stop__Group_1_0__0)
		{ after(grammarAccess.getStopAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getStopAccess().getStopKeyword_1_1()); }
		'stop'
		{ after(grammarAccess.getStopAccess().getStopKeyword_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getStopAccess().getBreakKeyword_1_2()); }
		'break'
		{ after(grammarAccess.getStopAccess().getBreakKeyword_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getStopAccess().getContinueKeyword_1_3()); }
		'continue'
		{ after(grammarAccess.getStopAccess().getContinueKeyword_1_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getEStringParserRuleCall_0()); }
		ruleEString
		{ after(grammarAccess.getTypeAccess().getEStringParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getDOUBLETerminalRuleCall_1()); }
		RULE_DOUBLE
		{ after(grammarAccess.getTypeAccess().getDOUBLETerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getINTTerminalRuleCall_2()); }
		RULE_INT
		{ after(grammarAccess.getTypeAccess().getINTTerminalRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualVariable__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualVariableAccess().getEqualsSignEqualsSignKeyword_0()); }
		'=='
		{ after(grammarAccess.getEqualVariableAccess().getEqualsSignEqualsSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualVariableAccess().getLessThanSignKeyword_1()); }
		'<'
		{ after(grammarAccess.getEqualVariableAccess().getLessThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getEqualVariableAccess().getLessThanSignEqualsSignKeyword_2()); }
		'<='
		{ after(grammarAccess.getEqualVariableAccess().getLessThanSignEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getEqualVariableAccess().getGreaterThanSignKeyword_3()); }
		'>'
		{ after(grammarAccess.getEqualVariableAccess().getGreaterThanSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getEqualVariableAccess().getGreaterThanSignEqualsSignKeyword_4()); }
		'>='
		{ after(grammarAccess.getEqualVariableAccess().getGreaterThanSignEqualsSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getEqualVariableAccess().getExclamationMarkEqualsSignKeyword_5()); }
		'!='
		{ after(grammarAccess.getEqualVariableAccess().getExclamationMarkEqualsSignKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PseudoClass__Group__0__Impl
	rule__PseudoClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPseudoClassAccess().getPseudoClassAction_0()); }
	()
	{ after(grammarAccess.getPseudoClassAccess().getPseudoClassAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PseudoClass__Group__1__Impl
	rule__PseudoClass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPseudoClassAccess().getClassKeyword_1()); }
	'class'
	{ after(grammarAccess.getPseudoClassAccess().getClassKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PseudoClass__Group__2__Impl
	rule__PseudoClass__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPseudoClassAccess().getNameAssignment_2()); }
	(rule__PseudoClass__NameAssignment_2)
	{ after(grammarAccess.getPseudoClassAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PseudoClass__Group__3__Impl
	rule__PseudoClass__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPseudoClassAccess().getMembersAssignment_3()); }
	(rule__PseudoClass__MembersAssignment_3)*
	{ after(grammarAccess.getPseudoClassAccess().getMembersAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PseudoClass__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPseudoClassAccess().getMembersAssignment_4()); }
	(rule__PseudoClass__MembersAssignment_4)*
	{ after(grammarAccess.getPseudoClassAccess().getMembersAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constructor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group__0__Impl
	rule__Constructor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getConstructorAction_0()); }
	()
	{ after(grammarAccess.getConstructorAccess().getConstructorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group__1__Impl
	rule__Constructor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getNameAssignment_1()); }
	(rule__Constructor__NameAssignment_1)
	{ after(grammarAccess.getConstructorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group__2__Impl
	rule__Constructor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getGroup_2()); }
	(rule__Constructor__Group_2__0)*
	{ after(grammarAccess.getConstructorAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getConstructorAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constructor__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group_2__0__Impl
	rule__Constructor__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getParametersAssignment_2_0()); }
	(rule__Constructor__ParametersAssignment_2_0)
	{ after(grammarAccess.getConstructorAccess().getParametersAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getGroup_2_1()); }
	(rule__Constructor__Group_2_1__0)*
	{ after(grammarAccess.getConstructorAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constructor__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group_2_1__0__Impl
	rule__Constructor__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getConstructorAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constructor__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructorAccess().getParametersAssignment_2_1_1()); }
	(rule__Constructor__ParametersAssignment_2_1_1)
	{ after(grammarAccess.getConstructorAccess().getParametersAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__0__Impl
	rule__Method__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getMethodAction_0()); }
	()
	{ after(grammarAccess.getMethodAccess().getMethodAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__1__Impl
	rule__Method__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getMethodKeyword_1()); }
	'method'
	{ after(grammarAccess.getMethodAccess().getMethodKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__2__Impl
	rule__Method__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getNameAssignment_2()); }
	(rule__Method__NameAssignment_2)
	{ after(grammarAccess.getMethodAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__3__Impl
	rule__Method__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_3()); }
	'('
	{ after(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__4__Impl
	rule__Method__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_4()); }
	(rule__Method__Group_4__0)*
	{ after(grammarAccess.getMethodAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__5__Impl
	rule__Method__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getMethodAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getBodyAssignment_6()); }
	(rule__Method__BodyAssignment_6)
	{ after(grammarAccess.getMethodAccess().getBodyAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_4__0__Impl
	rule__Method__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getParametersAssignment_4_0()); }
	(rule__Method__ParametersAssignment_4_0)
	{ after(grammarAccess.getMethodAccess().getParametersAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_4_1()); }
	(rule__Method__Group_4_1__0)*
	{ after(grammarAccess.getMethodAccess().getGroup_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_4_1__0__Impl
	rule__Method__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getCommaKeyword_4_1_0()); }
	','
	{ after(grammarAccess.getMethodAccess().getCommaKeyword_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getParametersAssignment_4_1_1()); }
	(rule__Method__ParametersAssignment_4_1_1)
	{ after(grammarAccess.getMethodAccess().getParametersAssignment_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__0__Impl
	rule__Body__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getBodyAction_0()); }
	()
	{ after(grammarAccess.getBodyAccess().getBodyAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__1__Impl
	rule__Body__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getStatementsAssignment_1()); }
	(rule__Body__StatementsAssignment_1)*
	{ after(grammarAccess.getBodyAccess().getStatementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getStatementsAssignment_2()); }
	(rule__Body__StatementsAssignment_2)
	{ after(grammarAccess.getBodyAccess().getStatementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getVariableAction_0()); }
	()
	{ after(grammarAccess.getVariableAccess().getVariableAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getEStringParserRuleCall_1()); }
	ruleEString
	{ after(grammarAccess.getVariableAccess().getEStringParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__2__Impl
	rule__Variable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getVariableAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getTypeParserRuleCall_3()); }
	ruleType
	{ after(grammarAccess.getVariableAccess().getTypeParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfAction_0()); }
	()
	{ after(grammarAccess.getIfAccess().getIfAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_1()); }
	'if'
	{ after(grammarAccess.getIfAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getAlternatives_2()); }
	(rule__If__Alternatives_2)*
	{ after(grammarAccess.getIfAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getGroup_3()); }
	(rule__If__Group_3__0)*
	{ after(grammarAccess.getIfAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getElseKeyword_4()); }
	('else')?
	{ after(grammarAccess.getIfAccess().getElseKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_2_0__0__Impl
	rule__If__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getExclamationMarkKeyword_2_0_0()); }
	'!'
	{ after(grammarAccess.getIfAccess().getExclamationMarkKeyword_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getEStringParserRuleCall_2_0_1()); }
	ruleEString
	{ after(grammarAccess.getIfAccess().getEStringParserRuleCall_2_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_2_2__0__Impl
	rule__If__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getTypeParserRuleCall_2_2_0()); }
	ruleType
	{ after(grammarAccess.getIfAccess().getTypeParserRuleCall_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_2_2__1__Impl
	rule__If__Group_2_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getEqualVariableParserRuleCall_2_2_1()); }
	ruleEqualVariable
	{ after(grammarAccess.getIfAccess().getEqualVariableParserRuleCall_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_2_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getTypeParserRuleCall_2_2_2()); }
	ruleType
	{ after(grammarAccess.getIfAccess().getTypeParserRuleCall_2_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_2_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_2_3__0__Impl
	rule__If__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getEStringParserRuleCall_2_3_0()); }
	ruleEString
	{ after(grammarAccess.getIfAccess().getEStringParserRuleCall_2_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_2_3__1__Impl
	rule__If__Group_2_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getNotKeyword_2_3_1()); }
	('not')?
	{ after(grammarAccess.getIfAccess().getNotKeyword_2_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_2_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getExistsKeyword_2_3_2()); }
	'exists'
	{ after(grammarAccess.getIfAccess().getExistsKeyword_2_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_3__0__Impl
	rule__If__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getElseifKeyword_3_0()); }
	'elseif'
	{ after(grammarAccess.getIfAccess().getElseifKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getAlternatives_3_1()); }
	(rule__If__Alternatives_3_1)
	{ after(grammarAccess.getIfAccess().getAlternatives_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_3_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_3_1_0__0__Impl
	rule__If__Group_3_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getExclamationMarkKeyword_3_1_0_0()); }
	'!'
	{ after(grammarAccess.getIfAccess().getExclamationMarkKeyword_3_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_3_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getEStringParserRuleCall_3_1_0_1()); }
	ruleEString
	{ after(grammarAccess.getIfAccess().getEStringParserRuleCall_3_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_3_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_3_1_2__0__Impl
	rule__If__Group_3_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getTypeParserRuleCall_3_1_2_0()); }
	ruleType
	{ after(grammarAccess.getIfAccess().getTypeParserRuleCall_3_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_3_1_2__1__Impl
	rule__If__Group_3_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getEqualVariableParserRuleCall_3_1_2_1()); }
	ruleEqualVariable
	{ after(grammarAccess.getIfAccess().getEqualVariableParserRuleCall_3_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_3_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_3_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getTypeParserRuleCall_3_1_2_2()); }
	ruleType
	{ after(grammarAccess.getIfAccess().getTypeParserRuleCall_3_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__0__Impl
	rule__For__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getForAction_0()); }
	()
	{ after(grammarAccess.getForAccess().getForAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__1__Impl
	rule__For__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getForKeyword_1()); }
	'for'
	{ after(grammarAccess.getForAccess().getForKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__2__Impl
	rule__For__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getForAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__3__Impl
	rule__For__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getAlternatives_3()); }
	(rule__For__Alternatives_3)
	{ after(grammarAccess.getForAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getForAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group_3_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_0__0__Impl
	rule__For__Group_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getEStringParserRuleCall_3_0_0()); }
	ruleEString
	{ after(grammarAccess.getForAccess().getEStringParserRuleCall_3_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_0__1__Impl
	rule__For__Group_3_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getEqualsSignKeyword_3_0_1()); }
	'='
	{ after(grammarAccess.getForAccess().getEqualsSignKeyword_3_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_0__2__Impl
	rule__For__Group_3_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getINTTerminalRuleCall_3_0_2()); }
	RULE_INT
	{ after(grammarAccess.getForAccess().getINTTerminalRuleCall_3_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_0__3__Impl
	rule__For__Group_3_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getSemicolonKeyword_3_0_3()); }
	';'
	{ after(grammarAccess.getForAccess().getSemicolonKeyword_3_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_0__4__Impl
	rule__For__Group_3_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getEStringParserRuleCall_3_0_4()); }
	ruleEString
	{ after(grammarAccess.getForAccess().getEStringParserRuleCall_3_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_0__5__Impl
	rule__For__Group_3_0__6
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getEqualVariableParserRuleCall_3_0_5()); }
	ruleEqualVariable
	{ after(grammarAccess.getForAccess().getEqualVariableParserRuleCall_3_0_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_0__6__Impl
	rule__For__Group_3_0__7
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getTypeParserRuleCall_3_0_6()); }
	ruleType
	{ after(grammarAccess.getForAccess().getTypeParserRuleCall_3_0_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_0__7__Impl
	rule__For__Group_3_0__8
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getSemicolonKeyword_3_0_7()); }
	';'
	{ after(grammarAccess.getForAccess().getSemicolonKeyword_3_0_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_0__8__Impl
	rule__For__Group_3_0__9
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getEStringParserRuleCall_3_0_8()); }
	ruleEString
	{ after(grammarAccess.getForAccess().getEStringParserRuleCall_3_0_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_0__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getAlternatives_3_0_9()); }
	(rule__For__Alternatives_3_0_9)
	{ after(grammarAccess.getForAccess().getAlternatives_3_0_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group_3_0_9_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_0_9_2__0__Impl
	rule__For__Group_3_0_9_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0_9_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getPlusSignKeyword_3_0_9_2_0()); }
	'+'
	{ after(grammarAccess.getForAccess().getPlusSignKeyword_3_0_9_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0_9_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_0_9_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0_9_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getINTTerminalRuleCall_3_0_9_2_1()); }
	RULE_INT
	{ after(grammarAccess.getForAccess().getINTTerminalRuleCall_3_0_9_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group_3_0_9_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_0_9_3__0__Impl
	rule__For__Group_3_0_9_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0_9_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getHyphenMinusKeyword_3_0_9_3_0()); }
	'-'
	{ after(grammarAccess.getForAccess().getHyphenMinusKeyword_3_0_9_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0_9_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_0_9_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_0_9_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getINTTerminalRuleCall_3_0_9_3_1()); }
	RULE_INT
	{ after(grammarAccess.getForAccess().getINTTerminalRuleCall_3_0_9_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_1__0__Impl
	rule__For__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getEStringParserRuleCall_3_1_0()); }
	ruleEString
	{ after(grammarAccess.getForAccess().getEStringParserRuleCall_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_1__1__Impl
	rule__For__Group_3_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getColonKeyword_3_1_1()); }
	':'
	{ after(grammarAccess.getForAccess().getColonKeyword_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getEStringParserRuleCall_3_1_2()); }
	ruleEString
	{ after(grammarAccess.getForAccess().getEStringParserRuleCall_3_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group_3_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_2__0__Impl
	rule__For__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getAllKeyword_3_2_0()); }
	'all'
	{ after(grammarAccess.getForAccess().getAllKeyword_3_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getEStringParserRuleCall_3_2_1()); }
	ruleEString
	{ after(grammarAccess.getForAccess().getEStringParserRuleCall_3_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group_3_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_3__0__Impl
	rule__For__Group_3_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getIntervalKeyword_3_3_0()); }
	'interval'
	{ after(grammarAccess.getForAccess().getIntervalKeyword_3_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_3__1__Impl
	rule__For__Group_3_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getINTTerminalRuleCall_3_3_1()); }
	RULE_INT
	{ after(grammarAccess.getForAccess().getINTTerminalRuleCall_3_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_3__2__Impl
	rule__For__Group_3_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getToKeyword_3_3_2()); }
	'to'
	{ after(grammarAccess.getForAccess().getToKeyword_3_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_3__3__Impl
	rule__For__Group_3_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getINTTerminalRuleCall_3_3_3()); }
	RULE_INT
	{ after(grammarAccess.getForAccess().getINTTerminalRuleCall_3_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_3__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_3__4__Impl
	rule__For__Group_3_3__5
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_3__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getInKeyword_3_3_4()); }
	'in'
	{ after(grammarAccess.getForAccess().getInKeyword_3_3_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_3__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_3_3__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_3_3__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getEStringParserRuleCall_3_3_5()); }
	ruleEString
	{ after(grammarAccess.getForAccess().getEStringParserRuleCall_3_3_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileAction_0()); }
	()
	{ after(grammarAccess.getWhileAccess().getWhileAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileKeyword_1()); }
	'while'
	{ after(grammarAccess.getWhileAccess().getWhileKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getAlternatives_2()); }
	(rule__While__Alternatives_2)
	{ after(grammarAccess.getWhileAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group_2_1__0__Impl
	rule__While__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getExclamationMarkKeyword_2_1_0()); }
	('!')?
	{ after(grammarAccess.getWhileAccess().getExclamationMarkKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getEStringParserRuleCall_2_1_1()); }
	ruleEString
	{ after(grammarAccess.getWhileAccess().getEStringParserRuleCall_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getParameterAction_0()); }
	()
	{ after(grammarAccess.getParameterAccess().getParameterAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getNameAssignment_1()); }
	(rule__Parameter__NameAssignment_1)
	{ after(grammarAccess.getParameterAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Stop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stop__Group__0__Impl
	rule__Stop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopAccess().getStopAction_0()); }
	()
	{ after(grammarAccess.getStopAccess().getStopAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stop__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopAccess().getAlternatives_1()); }
	(rule__Stop__Alternatives_1)
	{ after(grammarAccess.getStopAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Stop__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stop__Group_1_0__0__Impl
	rule__Stop__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopAccess().getReturnKeyword_1_0_0()); }
	'return'
	{ after(grammarAccess.getStopAccess().getReturnKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stop__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stop__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopAccess().getTypeParserRuleCall_1_0_1()); }
	ruleType
	{ after(grammarAccess.getStopAccess().getTypeParserRuleCall_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PseudoClass__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPseudoClassAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getPseudoClassAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__MembersAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPseudoClassAccess().getMembersConstructorParserRuleCall_3_0()); }
		ruleConstructor
		{ after(grammarAccess.getPseudoClassAccess().getMembersConstructorParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoClass__MembersAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPseudoClassAccess().getMembersMethodParserRuleCall_4_0()); }
		ruleMethod
		{ after(grammarAccess.getPseudoClassAccess().getMembersMethodParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructorAccess().getNameLeftParenthesisKeyword_1_0()); }
		(
			{ before(grammarAccess.getConstructorAccess().getNameLeftParenthesisKeyword_1_0()); }
			'('
			{ after(grammarAccess.getConstructorAccess().getNameLeftParenthesisKeyword_1_0()); }
		)
		{ after(grammarAccess.getConstructorAccess().getNameLeftParenthesisKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__ParametersAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructorAccess().getParametersParameterParserRuleCall_2_0_0()); }
		ruleParameter
		{ after(grammarAccess.getConstructorAccess().getParametersParameterParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor__ParametersAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructorAccess().getParametersParameterParserRuleCall_2_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getConstructorAccess().getParametersParameterParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getMethodAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ParametersAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getParametersParameterParserRuleCall_4_0_0()); }
		ruleParameter
		{ after(grammarAccess.getMethodAccess().getParametersParameterParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ParametersAssignment_4_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getParametersParameterParserRuleCall_4_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getMethodAccess().getParametersParameterParserRuleCall_4_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__BodyAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getBodyBodyParserRuleCall_6_0()); }
		ruleBody
		{ after(grammarAccess.getMethodAccess().getBodyBodyParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getStatementsAlternatives_1_0()); }
		(rule__Body__StatementsAlternatives_1_0)
		{ after(grammarAccess.getBodyAccess().getStatementsAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__StatementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getStatementsStopParserRuleCall_2_0()); }
		ruleStop
		{ after(grammarAccess.getBodyAccess().getStatementsStopParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
