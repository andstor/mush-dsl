/*
 * generated by Xtext 2.22.0
 */
package tdt4250.pseudocode.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.eclipse.xtext.util.EmfFormatter
import tdt4250.pseudocode.Model
import tdt4250.pseudocode.generator.PcodeGenerator
import org.eclipse.xtext.xbase.testing.CompilationTestHelper

@ExtendWith(InjectionExtension)
@InjectWith(PcodeInjectorProvider)
class PcodeParsingTest {
	@Inject ParseHelper<Model> parseHelper
	
	@Inject extension CompilationTestHelper
	
	val code = '''
			ANNABELLE(nUMBeR alder, Number hoyde,text hoyde)
				e=2*(1+2)
				G = [1,2,3,4]
				G1 = [[1,1],[2,2]]
				G2 = [[3,3],[3,3]]
				
				G add [1,1]
				i = 1//11+3*2+-3
				i = "hei"
				j = alder
				k equals a new number list and contains 1,2,3,4
				if i<=10 then
					print "If works!"
					
					exchange G1 with G2
					
					exchange G1 at 1,1 with G2[i][j]
					for interval 2 to 4
						print "For works!" + 7
						break
					while i <= 5
						print "While works!"
						
						//i=2 ... må fikse reassignments.... hmm
						
				else
					u=9
				return i
		'''
		
	/*val code = '''
		ANNABELLE(nUMBeR alder, Number hoyde)
		i = 2
		i += 8
		i++
		s=9
		if 9==2 then
			s= 0
		
		'''*/
	
	@Test def void parseModel() {
		val result = parseHelper.parse(code)
		println(EmfFormatter.objToStr(result))
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	
	@Test def compileModel() {
     code.assertCompilesTo('''
         public class ANNABELLE {
             private String title;
				
             public String implementation(asd) {
                 
                 return title;
             }
         }
     ''')
     }
	
	
	
}
