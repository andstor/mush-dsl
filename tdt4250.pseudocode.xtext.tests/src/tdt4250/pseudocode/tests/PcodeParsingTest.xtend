/*
 * generated by Xtext 2.22.0
 */
package tdt4250.pseudocode.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.util.EmfFormatter
import org.eclipse.xtext.xbase.testing.CompilationTestHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import tdt4250.pseudocode.Model

@ExtendWith(InjectionExtension)
@InjectWith(PcodeInjectorProvider)
class PcodeParsingTest {
    @Inject ParseHelper<Model> parseHelper

    @Inject extension CompilationTestHelper
    val code = '''
        package no.test.pseudo
        PARTITION2(number p, number r)
            a=0
            return a
        
        PARTITION(list with list with text p, number r)
            ff=[[[1,2]]]
            B=[1,2]
            B1 = new list with number that contains 1,2,3,4
            B2 = new list with number that contains 1,1,1,1
            B3 = new list with list with number that contains [1],[1],[1],[1]
            y={{1,1}, {1,1}, {3,3}}
            x = B[r]
            i = p 
            i=i
            j = p
            f=0
            ww=PARTITION2()
            for interval 1 to r
                temp = B[j]
                if 2 <= x+1
                    iasd = PARTITION2() + "lol"
                    exchange B[i] with B[j]
            exchange B at index i+1 with B[r]
            print ff
            return ff
    '''

    /*val code = '''
     * 	ANNABELLE(nUMBeR alder, Number hoyde)
     * 	i = 2
     * 	i += 8
     * 	i++
     * 	s=9
     * 	if 9==2 then
     * 		s= 0
     * 	
     '''*/
    @Test def void parseModel() {
        val result = parseHelper.parse(code)
        println(EmfFormatter.objToStr(result))
        val errors = result.eResource.errors
        Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    }

    @Test def compileModel() {
        code.assertCompilesTo('''
            public class ANNABELLE {
                private String title;
            
                     public String implementation(asd) {
                         
                         return title;
                     }
            }
        ''')
    }

}
