/**
 * generated by Xtext 2.22.0
 */
package tdt4250.pseudocode.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.resource.SaveOptions;
import org.eclipse.xtext.serializer.ISerializer;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.util.EmfFormatter;
import org.eclipse.xtext.util.IAcceptor;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Pair;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import tdt4250.pseudocode.Model;
import tdt4250.pseudocode.tests.PcodeInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(PcodeInjectorProvider.class)
@SuppressWarnings("all")
public class PcodeParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Inject
  @Extension
  private ISerializer serializer;
  
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;
  
  private final String code = new Function0<String>() {
    @Override
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("executable PARTITION()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("n = 2 divide 3");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("n = 2 * 2");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if 2 notEqual 1");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("kk=0");
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  /**
   * val code = '''
   * 	ANNABELLE(nUMBeR alder, Number hoyde)
   * 	i = 2
   * 	i += 8
   * 	i++
   * 	s=9
   * 	if 9==2 then
   * 		s= 0
   * 
   * '''
   */
  @Test
  public void parseModel() {
    try {
      final Model result = this.parseHelper.parse(this.code);
      InputOutput.<String>println(EmfFormatter.objToStr(result));
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder.append(_join);
      Assertions.assertTrue(_isEmpty, _builder.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void compileModel() {
    try {
      this.parseModel();
      final IAcceptor<CompilationTestHelper.Result> _function = (CompilationTestHelper.Result it) -> {
        CompilationTestHelper.Result _println = InputOutput.<CompilationTestHelper.Result>println(it);
        /* Pair.<CompilationTestHelper.Result, CompilationTestHelper.Result>of(it, _println); */
      };
      this._compilationTestHelper.compile(this.code, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void formatModel() {
    try {
      final Model model = this.parseHelper.parse(this.code);
      InputOutput.<String>println(EmfFormatter.objToStr(model));
      final String result = this.serializer.serialize(model, SaveOptions.newBuilder().format().getOptions());
      InputOutput.<String>println(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
