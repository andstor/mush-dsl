/**
 * generated by Xtext 2.22.0
 */
package tdt4250.pseudocode.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.util.EmfFormatter;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import tdt4250.pseudocode.Model;
import tdt4250.pseudocode.tests.PcodeInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(PcodeInjectorProvider.class)
@SuppressWarnings("all")
public class PcodeParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;
  
  private final String code = new Function0<String>() {
    @Override
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("        \t");
      _builder.append("PARTITION2(number p, number r)");
      _builder.newLine();
      _builder.append("        \t   ");
      _builder.append("a=0");
      _builder.newLine();
      _builder.append("        \t   ");
      _builder.append("return a");
      _builder.newLine();
      _builder.newLine();
      _builder.append("PARTITION(number p, number r)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("ff=[[[1,2]]]");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("B=[1,2]");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("B1 = new number list and contains 1,2,3,4");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("B2 = new number list and contains 1,1,1,1");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("//error B2 = new number list and contains [1],[1],[1],[1]");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("y={{1,1}, {1,1}, {3,3}}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("x = B[r]");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("i = p ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("i=i");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("j = p");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("f=0");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("ww=PARTITION2()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("for interval 1 to r");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("temp = B[j]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if 2 <= x+1");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("iasd = PARTITION2() + \"lol\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("exchange B[i] with B[j]");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("exchange B at index i+1 with B[r]");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("print ff");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return ff");
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  /**
   * val code = '''
   * ANNABELLE(nUMBeR alder, Number hoyde)
   * i = 2
   * i += 8
   * i++
   * s=9
   * if 9==2 then
   * s= 0
   * 
   * '''
   */
  @Test
  public void parseModel() {
    try {
      final Model result = this.parseHelper.parse(this.code);
      InputOutput.<String>println(EmfFormatter.objToStr(result));
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder.append(_join);
      Assertions.assertTrue(_isEmpty, _builder.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void compileModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("public class ANNABELLE {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("private String title;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public String implementation(asd) {");
      _builder.newLine();
      _builder.append("        ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("return title;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      this._compilationTestHelper.assertCompilesTo(this.code, _builder);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
